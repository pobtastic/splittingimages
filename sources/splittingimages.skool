@rom
@start
@expand=#DEF(#ANIMATE(delay,count=$50)(name=$a)*$name-1,$delay;#FOR$02,$count||x|$name-x|;||($name-animation))
@expand=#DEF(#PLURAL(count)(s=$s,p=$p) #LET(count=$count)#FORMAT(#IF($count==$01)($s,$p)))
@expand=#DEF(#POKE #LINK:Pokes)
@expand=#DEF(#FACT #LINK:Facts)

; Loading Screen
;
; #UDGTABLE
; { =h Splitting Images Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $FF,$F8,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $4020 DEFB $07,$E0,$00,$01,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$00,$0F,$E0,$00,$00,$00,$00,$01,$FC,$00,$01,$FC,$00,$00 ;
 $4040 DEFB $1F,$FF,$EB,$F7,$E0,$00,$07,$C0,$00,$07,$C0,$F0,$0F,$00,$3C,$01,$E0,$7B,$FC,$F7,$F0,$00,$00,$00,$00,$07,$D1,$F7,$C1,$F4,$00,$00 ;
 $4060 DEFB $01,$F1,$CC,$07,$80,$00,$F8,$07,$FF,$E3,$E0,$C0,$00,$00,$00,$01,$F0,$7E,$7E,$70,$F0,$00,$00,$00,$00,$07,$D1,$F4,$01,$F4,$00,$00 ;
 $4080 DEFB $00,$7F,$FF,$FC,$00,$00,$03,$F0,$FF,$C3,$F0,$7C,$07,$80,$00,$00,$03,$80,$00,$1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40A0 DEFB $00,$01,$FF,$00,$00,$00,$00,$00,$F8,$7C,$00,$1E,$7C,$01,$F9,$F0,$F0,$00,$00,$00,$00,$00,$00,$00,$6E,$19,$8C,$61,$98,$66,$1B,$00 ;
 $40C0 DEFB $00,$00,$03,$00,$00,$00,$00,$00,$00,$1C,$1F,$FF,$BF,$0F,$F9,$F0,$7E,$F8,$FE,$0F,$F0,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$F0,$03 ;
 $40E0 DEFB $00,$00,$01,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$00,$00,$00,$1F,$E0,$00,$00,$00,$00,$00,$00,$7F,$FF,$E0,$00,$00,$20,$00,$03 ;
 $4100 DEFB $FF,$E0,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $07,$E0,$00,$01,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$01,$E0,$00,$00,$1F,$F0,$00,$00,$00,$00,$02,$03,$80,$04,$0C,$00,$00 ;
 $4140 DEFB $1F,$DF,$C9,$E5,$E0,$00,$0F,$E0,$00,$07,$C0,$60,$0F,$00,$3F,$03,$F0,$7F,$FC,$F0,$00,$00,$00,$00,$00,$07,$D1,$F7,$A1,$F4,$00,$00 ;
 $4160 DEFB $00,$F1,$FC,$06,$00,$00,$FC,$03,$F9,$C3,$00,$00,$00,$00,$7C,$01,$F0,$7C,$7C,$00,$F0,$00,$00,$00,$00,$07,$D1,$F4,$01,$F4,$00,$00 ;
 $4180 DEFB $00,$3F,$FF,$FC,$00,$00,$C7,$E0,$FF,$83,$F8,$7E,$06,$00,$00,$00,$0F,$C0,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $00,$00,$7C,$00,$00,$00,$00,$00,$F8,$7C,$06,$3E,$7E,$03,$F3,$C0,$00,$00,$00,$03,$FC,$00,$00,$00,$66,$19,$8E,$E1,$98,$66,$1E,$00 ;
 $41C0 DEFB $00,$00,$00,$C0,$00,$00,$00,$00,$00,$7C,$1F,$9F,$9F,$0F,$F1,$F8,$7C,$F8,$1C,$01,$C0,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$E0,$03 ;
 $41E0 DEFB $00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$C0,$00,$00,$00,$00,$00,$00,$FF,$FF,$F0,$00,$00,$20,$00,$03 ;
 $4200 DEFB $01,$C0,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $07,$E0,$00,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$0E,$00,$3E,$01,$E0,$00,$00,$1F,$F0,$00,$00,$00,$00,$07,$F0,$60,$17,$F4,$00,$00 ;
 $4240 DEFB $0F,$E0,$C5,$05,$E0,$00,$1F,$E0,$00,$03,$C0,$00,$1F,$C0,$3F,$81,$F0,$7F,$80,$00,$00,$00,$00,$00,$00,$07,$D0,$FF,$81,$F4,$00,$00 ;
 $4260 DEFB $00,$F1,$FC,$06,$00,$00,$FE,$01,$F8,$00,$00,$00,$07,$80,$7C,$01,$F0,$38,$30,$31,$F0,$00,$00,$00,$00,$07,$D3,$E8,$01,$F4,$00,$00 ;
 $4280 DEFB $00,$3F,$EB,$F8,$00,$00,$FF,$C0,$FF,$01,$F0,$3E,$00,$00,$00,$00,$1F,$E0,$0F,$C0,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42A0 DEFB $00,$00,$38,$00,$00,$00,$00,$00,$F8,$7C,$1F,$3E,$FE,$03,$C0,$00,$00,$00,$3F,$03,$FE,$00,$00,$00,$66,$19,$8D,$61,$F8,$7C,$1E,$00 ;
 $42C0 DEFB $00,$00,$00,$20,$00,$00,$00,$00,$00,$7C,$1F,$BF,$1F,$8F,$E0,$F8,$30,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$C0,$03 ;
 $42E0 DEFB $00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FC,$00,$00,$10,$00,$03 ;
 $4300 DEFB $03,$C0,$00,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $07,$E0,$00,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$7E,$01,$E0,$00,$00,$3E,$E0,$00,$00,$00,$00,$07,$FE,$10,$3F,$F4,$00,$00 ;
 $4340 DEFB $0F,$E0,$C4,$85,$E0,$00,$3F,$C0,$00,$03,$C0,$00,$1F,$E0,$7F,$81,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$07,$D0,$FF,$41,$F4,$00,$00 ;
 $4360 DEFB $00,$F7,$FF,$8E,$00,$00,$7F,$81,$C0,$20,$00,$38,$0F,$80,$7C,$01,$F0,$00,$00,$71,$E0,$00,$00,$00,$00,$07,$CF,$E0,$01,$F4,$00,$00 ;
 $4380 DEFB $00,$1F,$FF,$F8,$00,$00,$FF,$80,$F6,$71,$C0,$1C,$00,$00,$00,$00,$3F,$E0,$1F,$E0,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$00,$10,$00,$00,$00,$00,$00,$70,$7C,$3F,$7E,$FE,$00,$00,$30,$07,$F9,$FE,$C0,$FE,$00,$00,$00,$6E,$19,$8C,$61,$98,$6C,$1B,$00 ;
 $43C0 DEFB $00,$00,$00,$20,$00,$00,$00,$00,$00,$7C,$1F,$3F,$1F,$07,$C0,$00,$0C,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$C0,$03 ;
 $43E0 DEFB $00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FE,$00,$00,$10,$00,$03 ;
 $4400 DEFB $03,$C0,$00,$03,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4420 DEFB $07,$F0,$00,$00,$C0,$00,$00,$00,$00,$07,$00,$00,$0F,$00,$3E,$00,$C0,$30,$70,$3C,$E0,$00,$00,$00,$00,$07,$FF,$98,$FF,$F4,$00,$00 ;
 $4440 DEFB $0F,$F3,$C3,$0D,$E0,$00,$7E,$80,$07,$83,$C0,$00,$1F,$E1,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$D0,$FF,$81,$F4,$00,$00 ;
 $4460 DEFB $00,$7F,$FF,$CE,$00,$00,$7F,$C0,$00,$E3,$E0,$F8,$0F,$80,$7E,$01,$F8,$00,$00,$7B,$E0,$00,$00,$00,$00,$07,$FF,$C0,$01,$F4,$00,$00 ;
 $4480 DEFB $00,$0F,$FF,$F0,$00,$01,$FF,$00,$F0,$F8,$00,$00,$00,$00,$0F,$80,$3C,$E0,$3F,$E1,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$00,$10,$00,$00,$00,$00,$00,$60,$7C,$3F,$FF,$C0,$00,$C3,$F0,$FF,$F9,$F0,$E4,$3E,$00,$00,$00,$7C,$0F,$0C,$61,$98,$66,$19,$80 ;
 $44C0 DEFB $00,$00,$00,$20,$00,$00,$00,$00,$00,$7E,$1F,$3F,$1E,$03,$00,$00,$1C,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$80,$03 ;
 $44E0 DEFB $00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$00,$00,$08,$00,$03 ;
 $4500 DEFB $07,$E0,$00,$03,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $0F,$FF,$FB,$E8,$E0,$00,$00,$00,$00,$0F,$80,$60,$0F,$00,$3E,$00,$00,$78,$F8,$78,$F0,$00,$00,$00,$00,$07,$FF,$C9,$FF,$F4,$00,$00 ;
 $4540 DEFB $07,$ED,$C0,$E3,$C0,$00,$7C,$00,$8F,$C3,$C0,$F0,$7F,$C1,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$D0,$FF,$01,$F4,$00,$00 ;
 $4560 DEFB $00,$7F,$FF,$EC,$00,$00,$38,$00,$30,$E3,$E0,$7C,$0F,$C0,$7F,$00,$F8,$00,$00,$7F,$E0,$00,$00,$00,$00,$07,$FF,$80,$01,$F4,$00,$00 ;
 $4580 DEFB $00,$07,$FF,$E0,$00,$01,$FC,$00,$F0,$78,$00,$00,$00,$00,$3F,$C0,$78,$E0,$7D,$E3,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$08,$00,$00,$00,$00,$00,$00,$7C,$1F,$F0,$00,$07,$CF,$F0,$FF,$F9,$E1,$EE,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$00,$00,$40,$00,$00,$00,$00,$00,$7E,$1F,$1E,$08,$00,$00,$00,$1C,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FE,$00,$03 ;
 $45E0 DEFB $00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$80,$00,$00,$00,$00,$07,$FF,$FD,$FF,$00,$00,$06,$00,$03 ;
 $4600 DEFB $07,$E0,$00,$01,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4620 DEFB $1F,$E7,$C7,$85,$E0,$00,$00,$00,$00,$0F,$80,$F0,$0F,$00,$3C,$00,$00,$F9,$F8,$79,$F0,$00,$00,$00,$00,$07,$CF,$E3,$F9,$F4,$00,$00 ;
 $4640 DEFB $07,$F1,$C0,$03,$C0,$00,$F8,$01,$DF,$C3,$E1,$F8,$7F,$00,$00,$00,$00,$00,$00,$FD,$F0,$00,$00,$00,$00,$07,$D0,$F8,$01,$F4,$00,$00 ;
 $4660 DEFB $00,$7C,$F6,$EC,$00,$00,$03,$F1,$F1,$E3,$E0,$7C,$0F,$E0,$7C,$00,$70,$00,$00,$7F,$C0,$00,$00,$00,$00,$07,$FE,$00,$01,$F8,$00,$00 ;
 $4680 DEFB $00,$07,$FF,$E0,$00,$01,$F8,$00,$F0,$78,$00,$00,$00,$00,$7F,$C0,$79,$F0,$F9,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$00,$08,$00,$00,$00,$00,$00,$00,$7C,$00,$00,$3E,$07,$9F,$F0,$FF,$F9,$FF,$DF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$00,$00,$40,$00,$00,$00,$00,$00,$7E,$1F,$00,$00,$00,$00,$00,$1F,$F0,$00,$00,$00,$00,$00,$00,$01,$FC,$00,$00,$00,$F8,$00,$03 ;
 $46E0 DEFB $00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$00,$00,$7F,$BF,$E0,$00,$00,$00,$00,$07,$FF,$80,$7F,$80,$00,$01,$80,$03 ;
 $4700 DEFB $07,$E0,$00,$01,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $1F,$EF,$FB,$C5,$E0,$00,$03,$80,$00,$07,$C0,$F0,$0F,$00,$3C,$00,$00,$79,$FC,$F3,$F0,$00,$00,$00,$00,$07,$D3,$E3,$E1,$F4,$00,$00 ;
 $4740 DEFB $03,$E1,$C0,$07,$80,$00,$F8,$03,$FF,$E3,$E0,$F8,$70,$00,$00,$00,$00,$3E,$FC,$F9,$F0,$00,$00,$00,$00,$07,$D0,$FA,$01,$F4,$00,$00 ;
 $4760 DEFB $00,$7F,$FE,$FC,$00,$00,$07,$F1,$F3,$C3,$E0,$7C,$0F,$C0,$38,$00,$00,$00,$00,$3F,$80,$00,$00,$00,$00,$07,$F0,$00,$01,$F0,$00,$00 ;
 $4780 DEFB $00,$03,$FF,$C0,$00,$00,$60,$00,$F0,$7C,$00,$0C,$38,$00,$FD,$F0,$F9,$F0,$00,$00,$00,$00,$00,$00,$7C,$0F,$08,$20,$F0,$7C,$19,$80 ;
 $47A0 DEFB $00,$00,$04,$00,$00,$00,$00,$00,$00,$40,$00,$3F,$FE,$0F,$FF,$F0,$FE,$F8,$FF,$8F,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$80,$00,$00,$00,$00,$00,$3C,$1E,$00,$00,$00,$00,$00,$1F,$F0,$00,$00,$00,$00,$00,$00,$0F,$FF,$80,$00,$00,$70,$00,$03 ;
 $47E0 DEFB $00,$00,$08,$00,$00,$00,$BB,$E0,$00,$00,$00,$00,$1F,$FC,$00,$01,$FB,$FE,$F8,$00,$00,$00,$00,$07,$FE,$00,$7F,$C0,$00,$00,$40,$03 ;
 $4800 DEFB $00,$00,$04,$00,$00,$03,$FF,$F8,$00,$00,$00,$00,$FF,$FF,$00,$03,$F3,$03,$FC,$00,$00,$00,$00,$07,$70,$00,$3F,$C0,$00,$00,$40,$03 ;
 $4820 DEFB $01,$E0,$02,$00,$0F,$FF,$FF,$FF,$FF,$00,$0F,$FF,$FF,$FF,$FC,$37,$FF,$FF,$FF,$FC,$00,$00,$00,$03,$60,$00,$1F,$F0,$00,$00,$00,$03 ;
 $4840 DEFB $00,$00,$00,$00,$7F,$80,$00,$00,$7F,$F0,$1F,$F2,$0E,$C1,$FF,$FD,$E0,$00,$07,$F7,$00,$00,$00,$03,$0C,$00,$00,$98,$00,$00,$00,$03 ;
 $4860 DEFB $00,$0C,$00,$00,$FF,$1F,$81,$BE,$1F,$F8,$F7,$03,$FE,$3B,$F1,$FF,$BF,$74,$EC,$F7,$80,$03,$F0,$00,$7F,$80,$01,$E0,$00,$00,$00,$03 ;
 $4880 DEFB $00,$00,$00,$00,$3F,$80,$7F,$30,$FF,$E0,$3B,$04,$E1,$FF,$E0,$07,$FE,$FF,$D3,$F0,$00,$00,$60,$00,$03,$80,$F0,$00,$00,$00,$00,$03 ;
 $48A0 DEFB $00,$38,$FF,$18,$00,$3F,$3E,$FF,$FC,$00,$03,$BE,$00,$7F,$80,$00,$1D,$C3,$B8,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$18,$03 ;
 $48C0 DEFB $00,$FC,$00,$31,$00,$00,$7F,$E0,$00,$00,$00,$1E,$FF,$FE,$00,$00,$00,$07,$00,$00,$0F,$FF,$FF,$FF,$80,$07,$C7,$F7,$FF,$80,$00,$03 ;
 $48E0 DEFB $01,$B9,$81,$4F,$C0,$00,$00,$7E,$00,$07,$FC,$00,$07,$00,$00,$06,$00,$08,$00,$00,$3F,$C0,$00,$3F,$E0,$CF,$8F,$FF,$E3,$FC,$00,$03 ;
 $4900 DEFB $00,$00,$02,$00,$00,$0F,$FF,$FE,$00,$00,$00,$07,$FF,$FF,$80,$07,$E0,$E0,$DE,$00,$00,$00,$00,$06,$00,$00,$0F,$E0,$00,$00,$40,$03 ;
 $4920 DEFB $01,$E0,$01,$00,$0F,$FF,$FF,$FF,$FF,$80,$0F,$FF,$3F,$FF,$FC,$3D,$FF,$FF,$FF,$7E,$00,$00,$00,$03,$80,$7E,$0F,$F8,$00,$00,$00,$03 ;
 $4940 DEFB $00,$00,$00,$00,$FF,$80,$00,$00,$7F,$F0,$1F,$E4,$00,$0D,$FF,$F9,$60,$00,$03,$C7,$00,$00,$01,$83,$08,$00,$00,$18,$00,$00,$00,$03 ;
 $4960 DEFB $00,$1E,$00,$00,$FF,$0B,$80,$00,$1F,$F8,$F7,$14,$70,$1F,$F0,$FF,$B8,$34,$00,$FF,$80,$07,$E0,$00,$3C,$8E,$01,$60,$00,$00,$00,$03 ;
 $4980 DEFB $00,$00,$00,$00,$0F,$80,$FF,$00,$FF,$E0,$16,$05,$C1,$FF,$E0,$03,$F6,$EF,$C3,$C0,$00,$00,$00,$00,$01,$DF,$E0,$00,$00,$00,$00,$03 ;
 $49A0 DEFB $00,$7F,$F9,$9C,$00,$1F,$C3,$FF,$F8,$00,$03,$DB,$00,$3F,$80,$00,$0E,$7F,$F8,$00,$00,$07,$F8,$00,$00,$08,$00,$00,$00,$00,$00,$03 ;
 $49C0 DEFB $00,$FC,$E1,$D9,$00,$00,$3F,$80,$00,$00,$00,$0F,$FF,$FC,$00,$00,$00,$1F,$00,$00,$0F,$FF,$FF,$FF,$80,$07,$1F,$FF,$7F,$C0,$00,$03 ;
 $49E0 DEFB $00,$F8,$9D,$9C,$C0,$30,$00,$FC,$00,$0D,$FF,$00,$01,$00,$00,$00,$00,$08,$00,$00,$7F,$80,$00,$1F,$E0,$8F,$83,$FF,$F3,$FC,$00,$03 ;
 $4A00 DEFB $00,$00,$01,$00,$00,$7F,$FF,$FF,$C0,$00,$00,$1F,$FF,$FF,$E0,$0E,$DC,$38,$3F,$00,$00,$00,$00,$04,$00,$00,$0F,$E0,$00,$00,$80,$03 ;
 $4A20 DEFB $01,$E0,$00,$80,$1F,$FF,$FF,$FF,$FF,$80,$1F,$FE,$00,$FF,$FE,$3F,$FF,$FF,$FF,$7E,$00,$00,$00,$03,$09,$FF,$0F,$98,$00,$00,$00,$03 ;
 $4A40 DEFB $00,$00,$00,$00,$FF,$80,$00,$00,$7F,$F0,$1F,$C4,$00,$01,$FF,$F9,$60,$00,$03,$FE,$00,$00,$03,$C1,$08,$00,$00,$30,$00,$00,$00,$03 ;
 $4A60 DEFB $00,$1E,$00,$00,$FF,$02,$00,$00,$3F,$F0,$EE,$04,$00,$1B,$F0,$7B,$80,$30,$01,$EF,$80,$07,$80,$00,$3F,$FC,$00,$40,$00,$00,$00,$03 ;
 $4A80 DEFB $00,$00,$30,$00,$07,$C1,$FF,$F0,$FF,$C0,$1F,$05,$81,$9F,$E0,$01,$E7,$7F,$47,$80,$00,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$00,$03 ;
 $4AA0 DEFB $00,$77,$EC,$CC,$00,$0F,$FF,$FF,$F0,$00,$01,$CD,$06,$7F,$80,$00,$07,$82,$F0,$00,$00,$1F,$FF,$00,$00,$04,$00,$00,$00,$00,$00,$03 ;
 $4AC0 DEFB $00,$F9,$63,$69,$00,$00,$1F,$00,$00,$00,$00,$07,$FF,$FC,$00,$00,$00,$0A,$00,$00,$1F,$FC,$7F,$FF,$C0,$0F,$9F,$FF,$03,$E0,$00,$03 ;
 $4AE0 DEFB $00,$F9,$76,$3D,$C0,$78,$01,$F0,$00,$0F,$FF,$00,$00,$80,$00,$00,$00,$10,$00,$00,$FF,$80,$00,$1F,$E1,$8D,$CF,$FF,$F9,$FC,$00,$03 ;
 $4B00 DEFB $00,$00,$01,$00,$00,$7F,$FF,$FF,$E0,$00,$00,$7F,$FF,$FF,$E0,$0F,$F0,$6C,$2F,$00,$00,$00,$00,$04,$00,$00,$0F,$E0,$00,$00,$80,$03 ;
 $4B20 DEFB $00,$C0,$00,$C0,$1F,$FF,$FF,$7F,$FF,$80,$1F,$F8,$00,$03,$FE,$7F,$FE,$FF,$FE,$7E,$00,$00,$00,$03,$F9,$E4,$07,$8C,$00,$00,$00,$03 ;
 $4B40 DEFB $00,$00,$00,$00,$FF,$80,$00,$00,$3F,$F0,$1F,$C5,$FE,$81,$FB,$FE,$C0,$00,$03,$D6,$00,$00,$03,$C1,$98,$00,$00,$F0,$00,$00,$00,$03 ;
 $4B60 DEFB $00,$1E,$00,$00,$FF,$00,$00,$00,$1F,$F0,$7F,$08,$00,$18,$70,$3F,$C0,$70,$01,$FF,$80,$07,$81,$80,$1F,$C0,$01,$C0,$03,$00,$00,$03 ;
 $4B80 DEFB $00,$00,$FE,$00,$03,$C7,$FF,$F9,$FF,$80,$0E,$45,$FE,$1F,$E0,$00,$F1,$3E,$07,$80,$00,$00,$00,$00,$00,$7F,$00,$00,$00,$00,$00,$03 ;
 $4BA0 DEFB $00,$7D,$BF,$4E,$00,$07,$FF,$FF,$C0,$00,$01,$E7,$40,$77,$00,$00,$03,$C1,$E0,$00,$00,$7F,$FF,$C0,$00,$04,$00,$00,$00,$00,$00,$03 ;
 $4BC0 DEFB $00,$D9,$E3,$8D,$80,$00,$0E,$00,$07,$F8,$00,$03,$FF,$F8,$00,$00,$00,$02,$00,$00,$1F,$F0,$19,$FF,$C0,$1F,$BF,$FF,$0C,$E0,$00,$03 ;
 $4BE0 DEFB $00,$F9,$FF,$3F,$80,$78,$01,$F0,$00,$06,$FF,$80,$00,$80,$00,$00,$00,$20,$00,$00,$FF,$80,$00,$1F,$E3,$CC,$8F,$E7,$DC,$7E,$00,$03 ;
 $4C00 DEFB $00,$00,$00,$80,$01,$FF,$FF,$FF,$F0,$00,$01,$FF,$FF,$FF,$F0,$1F,$C0,$B4,$2F,$80,$00,$00,$00,$06,$00,$00,$0F,$E0,$00,$03,$00,$03 ;
 $4C20 DEFB $00,$00,$00,$80,$1F,$F6,$70,$07,$FF,$C0,$1F,$F8,$00,$01,$FE,$7F,$F8,$18,$1E,$3C,$00,$00,$00,$03,$F9,$9F,$87,$6C,$00,$00,$00,$03 ;
 $4C40 DEFB $00,$00,$00,$00,$FF,$80,$00,$7C,$3F,$F0,$3F,$8B,$FC,$87,$FB,$FC,$C7,$C1,$F3,$FC,$00,$00,$03,$C1,$98,$60,$00,$E0,$00,$00,$00,$03 ;
 $4C60 DEFB $00,$0C,$00,$00,$FF,$00,$00,$00,$3F,$F0,$7A,$00,$06,$18,$F0,$3F,$E0,$63,$02,$FF,$00,$03,$63,$C0,$1F,$00,$03,$80,$07,$80,$00,$03 ;
 $4C80 DEFB $00,$03,$FF,$80,$03,$E7,$FF,$FF,$FF,$80,$0F,$25,$7F,$FF,$E0,$00,$F9,$40,$0F,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$18,$03 ;
 $4CA0 DEFB $00,$6F,$1F,$8E,$00,$07,$FF,$FF,$00,$00,$00,$C6,$81,$F7,$00,$00,$01,$F7,$C0,$00,$00,$FF,$FF,$F0,$00,$02,$07,$F9,$00,$00,$00,$03 ;
 $4CC0 DEFB $00,$D8,$C1,$CD,$C0,$00,$0E,$00,$FF,$FF,$00,$00,$FF,$F0,$00,$06,$00,$04,$00,$00,$1F,$E0,$00,$7F,$C0,$3E,$BF,$FF,$87,$E0,$00,$03 ;
 $4CE0 DEFB $00,$BC,$18,$1E,$80,$78,$03,$E0,$00,$07,$FF,$C0,$00,$40,$00,$00,$00,$60,$00,$01,$BF,$0F,$E0,$1F,$C3,$86,$FF,$07,$FE,$3E,$00,$03 ;
 $4D00 DEFB $00,$00,$00,$80,$03,$FF,$FF,$FF,$FC,$00,$03,$FF,$FF,$FF,$F8,$1E,$80,$DC,$3F,$E0,$00,$00,$00,$06,$00,$00,$0F,$E0,$00,$01,$80,$03 ;
 $4D20 DEFB $00,$00,$00,$00,$3F,$C0,$00,$01,$FF,$E0,$1F,$F8,$00,$01,$FE,$7F,$F0,$00,$0F,$9E,$00,$00,$00,$03,$FC,$36,$07,$6C,$00,$00,$00,$03 ;
 $4D40 DEFB $00,$00,$00,$00,$FF,$BF,$01,$FE,$3F,$F8,$7F,$08,$32,$8F,$F9,$DB,$CF,$E3,$C9,$FE,$00,$00,$61,$80,$90,$A4,$00,$E0,$00,$00,$00,$03 ;
 $4D60 DEFB $00,$00,$00,$00,$FF,$00,$00,$00,$3F,$F0,$7C,$60,$0C,$0C,$E0,$1F,$E0,$E3,$8F,$FF,$00,$00,$F3,$C0,$0F,$F8,$07,$00,$07,$80,$00,$03 ;
 $4D80 DEFB $00,$0F,$FF,$E0,$03,$FE,$00,$1F,$FF,$80,$07,$25,$30,$3E,$C0,$00,$7E,$80,$9F,$00,$00,$00,$00,$00,$00,$06,$80,$00,$00,$00,$3C,$03 ;
 $4DA0 DEFB $00,$7F,$0F,$F3,$00,$07,$FF,$FC,$00,$00,$00,$E3,$8C,$3F,$00,$00,$00,$7F,$80,$00,$03,$FF,$FF,$FC,$00,$02,$3F,$FF,$C0,$00,$00,$03 ;
 $4DC0 DEFB $00,$F8,$00,$0D,$C0,$00,$04,$07,$FF,$FF,$C0,$00,$7F,$C0,$00,$0F,$00,$04,$00,$00,$3F,$C0,$00,$3F,$C0,$3E,$FF,$FF,$E9,$F0,$00,$03 ;
 $4DE0 DEFB $00,$FC,$30,$1D,$80,$30,$07,$C0,$00,$07,$FF,$C0,$00,$40,$00,$00,$00,$40,$00,$01,$9F,$1F,$F0,$FF,$C7,$B0,$3F,$3F,$BF,$1F,$00,$03 ;
 $4E00 DEFB $00,$00,$01,$00,$07,$FF,$FF,$FF,$FC,$00,$07,$FF,$FF,$FF,$F8,$3D,$00,$68,$3F,$E0,$00,$00,$00,$07,$00,$00,$3F,$E0,$00,$00,$00,$03 ;
 $4E20 DEFB $00,$00,$00,$00,$3F,$C0,$00,$00,$FF,$E0,$1F,$FC,$01,$F9,$FE,$FF,$F0,$00,$07,$1E,$00,$00,$00,$03,$FC,$04,$02,$28,$00,$00,$00,$03 ;
 $4E40 DEFB $00,$00,$00,$00,$FF,$BF,$83,$C2,$3F,$F8,$7F,$0D,$FB,$37,$79,$D3,$D7,$E7,$FD,$CF,$00,$00,$F0,$00,$DF,$C4,$00,$E0,$00,$00,$00,$03 ;
 $4E60 DEFB $00,$00,$00,$00,$7F,$80,$01,$80,$7F,$F0,$35,$40,$1F,$1C,$E0,$0F,$F1,$BE,$FF,$FE,$00,$00,$F3,$C0,$0F,$F8,$3E,$00,$07,$80,$00,$03 ;
 $4E80 DEFB $00,$0C,$C3,$70,$01,$FC,$7B,$1F,$FF,$00,$07,$77,$9F,$FF,$C0,$00,$7E,$80,$BE,$00,$00,$00,$00,$00,$00,$07,$00,$00,$00,$00,$3C,$03 ;
 $4EA0 DEFB $00,$7E,$03,$F3,$00,$03,$FF,$F8,$00,$00,$00,$7B,$E4,$1F,$00,$00,$00,$1E,$00,$00,$07,$FF,$FF,$FE,$00,$04,$FC,$7F,$F8,$00,$00,$03 ;
 $4EC0 DEFB $00,$A8,$00,$0D,$C0,$00,$0E,$1F,$FF,$FF,$C0,$00,$1F,$80,$00,$0F,$00,$04,$00,$00,$3F,$C0,$00,$3F,$E0,$7A,$5F,$FF,$EE,$78,$00,$03 ;
 $4EE0 DEFB $00,$FE,$00,$3D,$00,$00,$07,$80,$00,$07,$FF,$C0,$00,$20,$00,$00,$00,$C0,$00,$01,$8F,$03,$93,$FF,$EF,$FC,$00,$FF,$8D,$C7,$00,$03 ;
 $4F00 DEFB $00,$C0,$02,$00,$07,$FF,$FF,$FF,$FE,$00,$07,$FF,$FF,$FF,$FC,$33,$27,$3E,$7F,$F0,$00,$00,$00,$07,$91,$9E,$3F,$E0,$00,$00,$00,$03 ;
 $4F20 DEFB $00,$00,$00,$00,$7F,$80,$00,$00,$FF,$E0,$1F,$F8,$00,$01,$FF,$FD,$E0,$00,$07,$EF,$00,$00,$00,$03,$EC,$10,$00,$E8,$00,$00,$00,$03 ;
 $4F40 DEFB $00,$00,$00,$00,$FF,$27,$83,$F8,$1F,$F8,$FF,$8D,$FE,$3F,$F9,$FF,$8F,$F3,$FD,$C3,$00,$00,$F0,$00,$5F,$00,$01,$E0,$00,$00,$00,$03 ;
 $4F60 DEFB $00,$00,$00,$00,$7F,$80,$81,$A0,$FF,$E0,$36,$00,$37,$FF,$E0,$0F,$FF,$08,$7A,$FE,$00,$00,$F1,$80,$07,$80,$3C,$00,$03,$00,$00,$03 ;
 $4F80 DEFB $00,$1C,$7C,$38,$00,$FE,$3E,$3F,$FF,$00,$03,$76,$87,$DF,$C0,$00,$7F,$C1,$FC,$00,$00,$00,$00,$00,$00,$06,$00,$00,$00,$00,$3C,$03 ;
 $4FA0 DEFB $00,$DC,$00,$71,$00,$00,$FF,$F0,$00,$00,$00,$39,$F0,$FF,$00,$00,$00,$0C,$00,$00,$07,$FF,$FF,$FF,$00,$03,$80,$4F,$FE,$00,$00,$03 ;
 $4FC0 DEFB $01,$AB,$D5,$0D,$C0,$00,$0A,$3F,$E0,$3D,$F0,$00,$06,$00,$00,$0F,$00,$04,$00,$00,$3F,$C0,$00,$3F,$E0,$73,$1F,$FF,$E7,$B8,$00,$03 ;
 $4FE0 DEFB $00,$FF,$00,$FB,$00,$00,$07,$80,$00,$06,$FF,$E0,$00,$10,$00,$00,$01,$80,$00,$01,$FE,$0F,$C7,$FF,$FD,$9F,$E3,$FF,$CC,$73,$80,$03 ;
 $5000 DEFB $00,$7F,$F3,$FE,$00,$00,$07,$00,$00,$03,$6F,$E0,$00,$08,$00,$00,$02,$00,$00,$01,$FE,$03,$E7,$FF,$F8,$07,$83,$FD,$F6,$07,$C0,$03 ;
 $5020 DEFB $1E,$00,$08,$00,$00,$60,$0F,$00,$00,$FF,$FF,$F0,$00,$00,$04,$01,$80,$00,$00,$00,$3C,$0E,$43,$8F,$ED,$9F,$28,$3F,$FF,$3F,$F8,$03 ;
 $5040 DEFB $00,$2F,$FF,$0C,$00,$00,$00,$C3,$E9,$C0,$3F,$80,$00,$00,$00,$D4,$00,$00,$00,$0F,$03,$00,$07,$F8,$38,$FE,$00,$7C,$3F,$FF,$E0,$03 ;
 $5060 DEFB $00,$F9,$3E,$98,$91,$43,$00,$3F,$87,$FF,$7E,$00,$06,$00,$00,$04,$00,$00,$30,$00,$00,$07,$FC,$00,$00,$FF,$83,$FF,$FF,$FE,$00,$03 ;
 $5080 DEFB $00,$07,$BE,$77,$81,$00,$30,$00,$7F,$1F,$C0,$00,$00,$0F,$00,$10,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$07,$FC,$00,$00,$00,$03 ;
 $50A0 DEFB $00,$00,$00,$80,$10,$00,$00,$00,$00,$80,$00,$00,$0F,$00,$00,$08,$00,$00,$00,$00,$04,$40,$44,$33,$08,$00,$84,$A4,$90,$8A,$52,$83 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $00,$1F,$FF,$F0,$00,$00,$0F,$00,$00,$03,$7F,$E0,$00,$04,$00,$00,$06,$00,$00,$01,$B6,$00,$C7,$FF,$F8,$00,$8F,$80,$FB,$1F,$C0,$03 ;
 $5120 DEFB $1E,$00,$08,$00,$00,$00,$0F,$00,$03,$FF,$FF,$E0,$00,$00,$02,$02,$00,$00,$00,$00,$38,$0C,$7B,$9F,$ED,$2C,$7C,$3F,$FF,$9F,$F8,$03 ;
 $5140 DEFB $00,$7F,$FF,$0E,$00,$00,$00,$C3,$09,$E0,$3F,$80,$00,$00,$00,$10,$00,$00,$00,$0F,$01,$00,$07,$F8,$1C,$FE,$04,$7F,$3F,$FF,$E0,$03 ;
 $5160 DEFB $00,$FC,$39,$5C,$01,$C0,$00,$1F,$FF,$FB,$FE,$00,$00,$00,$00,$04,$00,$00,$78,$00,$00,$01,$F0,$00,$00,$7F,$C0,$FA,$FF,$F8,$00,$03 ;
 $5180 DEFB $00,$01,$FE,$5E,$01,$00,$78,$00,$1F,$FF,$80,$00,$00,$0F,$00,$20,$00,$00,$06,$00,$00,$00,$18,$00,$00,$00,$01,$F0,$00,$00,$00,$03 ;
 $51A0 DEFB $00,$00,$60,$40,$60,$00,$00,$00,$00,$00,$00,$00,$0F,$00,$00,$30,$00,$00,$00,$00,$05,$4D,$66,$4A,$88,$00,$E4,$A4,$9C,$AA,$52,$E3 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$3C,$3C,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$3C,$3C,$00 ;
 $5200 DEFB $00,$01,$FE,$00,$00,$00,$0F,$00,$00,$0C,$FF,$E0,$00,$04,$00,$00,$08,$00,$00,$01,$F4,$00,$87,$BF,$E0,$03,$FE,$00,$F9,$1F,$E0,$03 ;
 $5220 DEFB $0C,$00,$08,$00,$00,$00,$0F,$80,$03,$FF,$FF,$E0,$00,$00,$02,$0C,$00,$00,$00,$00,$0C,$18,$0F,$DF,$E3,$6D,$FC,$3F,$FF,$97,$F8,$03 ;
 $5240 DEFB $00,$7E,$C8,$A2,$00,$00,$00,$E0,$09,$FC,$3F,$80,$00,$00,$00,$10,$00,$00,$00,$06,$01,$80,$03,$F0,$1E,$7E,$08,$7F,$BF,$FF,$E0,$03 ;
 $5260 DEFB $00,$7D,$0C,$D7,$33,$EC,$00,$1F,$9E,$F6,$FC,$00,$00,$00,$00,$04,$00,$00,$78,$00,$00,$01,$C0,$00,$00,$3B,$C0,$00,$FF,$F0,$00,$03 ;
 $5280 DEFB $00,$00,$07,$F0,$02,$00,$78,$00,$0F,$FF,$00,$00,$00,$0F,$00,$20,$00,$00,$0F,$00,$00,$00,$28,$00,$00,$00,$00,$C0,$00,$00,$00,$03 ;
 $52A0 DEFB $6C,$00,$F0,$3D,$80,$00,$00,$00,$00,$00,$00,$00,$0F,$00,$00,$30,$00,$00,$00,$00,$05,$51,$44,$72,$8E,$48,$87,$24,$90,$AB,$DC,$83 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$7E,$7E,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$7E,$7E,$00 ;
 $5300 DEFB $00,$00,$70,$00,$00,$00,$0F,$00,$00,$0C,$FF,$E0,$00,$02,$00,$00,$08,$00,$00,$00,$D4,$00,$07,$9F,$E0,$0F,$FC,$00,$7D,$9F,$F0,$03 ;
 $5320 DEFB $00,$00,$0B,$00,$00,$00,$07,$07,$E3,$FF,$FF,$E0,$00,$00,$01,$08,$00,$00,$00,$00,$0C,$10,$1F,$EF,$40,$C8,$FC,$78,$FF,$DF,$FC,$03 ;
 $5340 DEFB $00,$7C,$45,$32,$00,$18,$00,$60,$31,$FF,$FF,$80,$00,$00,$00,$10,$00,$00,$00,$00,$00,$C0,$03,$E0,$0F,$FA,$19,$7F,$FF,$FF,$C0,$03 ;
 $5360 DEFB $00,$FE,$8B,$D6,$33,$C6,$00,$0D,$07,$8F,$FC,$00,$00,$00,$00,$04,$00,$00,$78,$00,$00,$00,$E0,$00,$00,$1F,$E0,$01,$FF,$C0,$06,$03 ;
 $5380 DEFB $00,$00,$04,$00,$02,$00,$78,$00,$03,$FE,$00,$00,$00,$06,$00,$20,$00,$00,$0F,$00,$00,$00,$04,$00,$00,$00,$01,$C0,$00,$00,$00,$03 ;
 $53A0 DEFB $4A,$00,$F0,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$10,$00,$00,$00,$00,$05,$51,$44,$42,$89,$30,$85,$24,$90,$AA,$54,$83 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$7E,$7E,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$7E,$7E,$00 ;
 $5400 DEFB $00,$00,$14,$00,$00,$60,$0F,$00,$00,$1D,$FF,$E0,$00,$02,$00,$00,$10,$00,$00,$00,$D8,$00,$07,$87,$E0,$7F,$F0,$00,$7E,$FE,$F0,$03 ;
 $5420 DEFB $00,$00,$3F,$E0,$00,$00,$07,$9F,$E3,$FB,$BF,$E0,$00,$00,$00,$D8,$00,$00,$00,$00,$0C,$1F,$1F,$EE,$40,$C8,$38,$78,$0F,$E3,$F8,$03 ;
 $5440 DEFB $00,$FE,$41,$31,$00,$30,$00,$60,$E1,$FE,$FF,$80,$06,$00,$00,$10,$00,$00,$00,$00,$00,$60,$07,$E0,$07,$FE,$10,$0F,$FF,$FF,$C0,$03 ;
 $5460 DEFB $00,$FC,$3E,$DE,$36,$C0,$00,$06,$00,$06,$F8,$00,$00,$00,$00,$08,$00,$00,$30,$00,$00,$00,$40,$00,$00,$0F,$F0,$03,$FF,$C0,$0F,$03 ;
 $5480 DEFB $00,$00,$02,$00,$04,$00,$30,$00,$01,$F8,$00,$00,$00,$00,$00,$10,$00,$00,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00,$00,$03 ;
 $54A0 DEFB $6C,$00,$F0,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$91,$33,$32,$8E,$20,$F4,$A5,$DE,$52,$52,$F3 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$7E,$7E,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$7E,$7E,$00 ;
 $5500 DEFB $00,$00,$38,$00,$00,$F0,$0E,$00,$00,$03,$FF,$E0,$00,$01,$80,$00,$20,$00,$00,$00,$E8,$00,$07,$C7,$EE,$FF,$C0,$01,$FE,$FE,$F0,$03 ;
 $5520 DEFB $00,$01,$7F,$F0,$00,$00,$03,$9F,$E3,$9F,$1F,$C0,$00,$00,$00,$30,$00,$00,$00,$00,$0E,$1B,$FF,$EC,$40,$1C,$00,$7C,$1F,$FF,$F0,$03 ;
 $5540 DEFB $00,$F1,$1C,$01,$C0,$00,$00,$78,$D8,$FF,$FF,$00,$0F,$00,$00,$18,$00,$00,$00,$00,$00,$70,$23,$C0,$07,$DF,$13,$FF,$FF,$FF,$80,$03 ;
 $5560 DEFB $00,$7C,$7F,$DA,$7C,$80,$00,$03,$00,$0C,$F0,$00,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$40,$00,$00,$07,$F8,$07,$FF,$00,$0F,$03 ;
 $5580 DEFB $00,$00,$02,$00,$04,$00,$00,$00,$01,$F0,$00,$00,$00,$00,$00,$10,$00,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03 ;
 $55A0 DEFB $48,$00,$60,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$03 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$7E,$7E,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$7E,$7E,$00 ;
 $5600 DEFB $0C,$00,$10,$00,$00,$F0,$0F,$00,$00,$07,$FF,$F0,$00,$00,$70,$00,$C0,$00,$00,$00,$40,$00,$03,$CF,$DC,$3C,$00,$07,$FE,$FF,$F8,$03 ;
 $5620 DEFB $00,$07,$FD,$90,$00,$00,$01,$8F,$C3,$88,$1F,$C0,$00,$00,$00,$36,$00,$00,$00,$06,$06,$09,$EF,$FC,$7E,$CC,$00,$7C,$1F,$FF,$F0,$03 ;
 $5640 DEFB $00,$70,$3C,$73,$61,$06,$00,$39,$83,$FF,$FF,$00,$0F,$00,$00,$08,$00,$00,$00,$00,$00,$38,$67,$80,$03,$9F,$1F,$FB,$FF,$FF,$80,$03 ;
 $5660 DEFB $00,$1F,$7D,$D0,$F0,$80,$00,$01,$C0,$03,$F0,$00,$00,$00,$00,$10,$00,$00,$00,$00,$00,$00,$20,$00,$00,$01,$FF,$0F,$F0,$00,$0F,$03 ;
 $5680 DEFB $00,$00,$01,$00,$08,$00,$00,$00,$00,$E0,$00,$00,$00,$00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03 ;
 $56A0 DEFB $68,$00,$00,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$03 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$3C,$3C,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$3C,$3C,$00 ;
 $5700 DEFB $1E,$00,$10,$00,$00,$F0,$0F,$00,$00,$3F,$FF,$F0,$00,$00,$08,$00,$80,$00,$00,$00,$78,$02,$63,$CF,$D9,$FF,$F8,$0F,$3F,$7F,$F8,$03 ;
 $5720 DEFB $00,$0F,$FD,$5C,$00,$00,$01,$8F,$63,$80,$1F,$C0,$00,$00,$00,$7E,$00,$00,$00,$0F,$03,$00,$7F,$FC,$3E,$DC,$00,$78,$3F,$FF,$E0,$03 ;
 $5740 DEFB $00,$BA,$3E,$D8,$7F,$00,$00,$3D,$83,$FF,$7F,$00,$0F,$00,$00,$08,$00,$00,$00,$00,$00,$1E,$5E,$00,$00,$CF,$07,$9F,$FF,$FF,$00,$03 ;
 $5760 DEFB $00,$1E,$3E,$C8,$C1,$00,$00,$00,$F0,$03,$E0,$00,$00,$06,$00,$10,$00,$00,$00,$00,$00,$00,$30,$00,$00,$00,$3F,$FF,$80,$00,$06,$03 ;
 $5780 DEFB $00,$00,$00,$80,$08,$00,$00,$00,$00,$E0,$00,$00,$06,$00,$00,$08,$00,$00,$00,$00,$04,$41,$44,$00,$08,$00,$F7,$39,$DE,$89,$9C,$F3 ;
 $57A0 DEFB $00,$00,$00,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $68,$70,$70,$70,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$7A,$7A,$7A,$7A,$7A,$7A,$7A,$7A,$7A ; {Attributes.
 $5820 DEFB $68,$70,$70,$70,$68,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$68,$28,$7A,$7A,$7A,$7A,$7A,$7A,$7A,$7A,$7A ;
 $5840 DEFB $68,$70,$70,$70,$68,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$68,$28,$7A,$7A,$7A,$7A,$7A,$7A,$7A,$7A,$7A ;
 $5860 DEFB $68,$70,$70,$70,$68,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$68,$28,$7A,$7A,$7A,$7A,$7A,$7A,$7A,$7A,$7A ;
 $5880 DEFB $68,$68,$70,$68,$68,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$68,$28,$78,$78,$78,$78,$78,$78,$78,$78,$78 ;
 $58A0 DEFB $68,$68,$68,$68,$68,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$68,$28,$78,$78,$78,$78,$78,$78,$78,$78,$78 ;
 $58C0 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$69,$68,$28,$28,$28,$28,$28,$28,$29,$29,$29,$68 ;
 $58E0 DEFB $68,$68,$68,$68,$68,$68,$68,$68,$68,$69,$69,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$70,$68,$68,$68,$68,$68,$68 ;
 $5900 DEFB $69,$69,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$38,$38,$38,$68,$68,$68,$68,$68,$70,$70,$70,$68,$68,$68,$68,$68 ;
 $5920 DEFB $69,$69,$68,$68,$68,$50,$50,$50,$68,$68,$68,$60,$60,$60,$68,$68,$38,$38,$38,$38,$68,$68,$68,$68,$70,$70,$70,$68,$68,$68,$68,$68 ;
 $5940 DEFB $6B,$6B,$68,$68,$68,$50,$50,$50,$50,$68,$68,$60,$60,$60,$68,$38,$38,$38,$38,$38,$68,$68,$68,$68,$70,$70,$70,$68,$68,$68,$68,$68 ;
 $5960 DEFB $6B,$6B,$68,$68,$68,$50,$50,$50,$50,$68,$60,$60,$60,$60,$68,$68,$38,$38,$38,$68,$68,$69,$69,$68,$68,$70,$70,$68,$69,$68,$68,$68 ;
 $5980 DEFB $68,$68,$38,$68,$68,$50,$50,$50,$68,$68,$68,$60,$60,$60,$68,$68,$68,$38,$38,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$6F,$68 ;
 $59A0 DEFB $68,$38,$38,$38,$68,$68,$50,$68,$68,$68,$68,$60,$60,$60,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$6F,$68 ;
 $59C0 DEFB $68,$38,$38,$38,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$6A,$68,$68,$68,$68,$68,$30,$30,$30,$68,$68,$60,$60,$60,$68,$68,$68 ;
 $59E0 DEFB $68,$38,$38,$38,$68,$6F,$68,$60,$60,$60,$60,$68,$68,$68,$6A,$6A,$68,$68,$68,$68,$30,$30,$30,$30,$68,$60,$60,$60,$60,$60,$68,$68 ;
 $5A00 DEFB $6B,$68,$68,$68,$68,$6F,$68,$60,$60,$60,$60,$68,$68,$68,$68,$68,$68,$68,$68,$68,$30,$30,$30,$30,$60,$60,$60,$60,$60,$60,$68,$68 ;
 $5A20 DEFB $6B,$68,$68,$68,$68,$6F,$68,$60,$60,$60,$60,$68,$68,$68,$68,$68,$68,$68,$68,$6F,$30,$30,$30,$30,$60,$60,$60,$60,$60,$60,$68,$68 ;
 $5A40 DEFB $68,$30,$30,$30,$68,$68,$68,$60,$60,$60,$60,$68,$6F,$68,$68,$68,$68,$68,$68,$6F,$68,$30,$30,$68,$68,$60,$60,$60,$60,$68,$68,$68 ;
 $5A60 DEFB $68,$30,$30,$30,$30,$68,$6A,$68,$60,$60,$68,$68,$6F,$6E,$68,$68,$68,$68,$6E,$68,$68,$68,$68,$68,$68,$68,$60,$60,$68,$68,$6F,$68 ;
 $5A80 DEFB $68,$68,$68,$68,$68,$68,$6A,$68,$68,$68,$68,$68,$6A,$6E,$68,$68,$68,$68,$6F,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5AA0 DEFB $68,$68,$6E,$68,$68,$68,$68,$68,$68,$68,$68,$68,$6A,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68 ;
 $5AC0 DEFB $01,$01,$01,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$01,$01,$01 ;
 $5AE0 DEFB $01,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$00,$00,$01 ; }

; Graphics Data: Level 01 (Ronald Reagan)
;
; Compressed graphics data for level 1.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$5B00,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-01) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-01-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_01
b$5B00 DEFB $C9,$C9,$C9,$C9,$C9,$C9,$4C,$06
 $5B08 DEFB $C9,$48,$0D,$C9,$43,$14,$C9,$40
 $5B10 DEFB $1A,$C9,$3C,$20,$C9,$39,$24,$C9
 $5B18 DEFB $36,$28,$C9,$34,$2C,$C9,$32,$2F
 $5B20 DEFB $C9,$30,$15,$46,$1C,$C9,$2E,$12
 $5B28 DEFB $41,$21,$C9,$2C,$0C,$3A,$05,$40
 $5B30 DEFB $03,$45,$0B,$51,$12,$CA,$00,$05
 $5B38 DEFB $1F,$FF,$DD,$7B,$ED,$7B,$BF,$F0
 $5B40 DEFB $00,$07,$00,$00,$CA,$00,$05,$3F
 $5B48 DEFB $FF,$FF,$5F,$EF,$DA,$FF,$F8,$00
 $5B50 DEFB $07,$00,$00,$CA,$00,$05,$7F,$FF
 $5B58 DEFB $DB,$EB,$FB,$FE,$FF,$F8,$00,$07
 $5B60 DEFB $00,$00,$CA,$00,$05,$FF,$FF,$FA
 $5B68 DEFB $BB,$DB,$AB,$FF,$FC,$00,$07,$00
 $5B70 DEFB $00,$C9,$27,$15,$3D,$06,$44,$08
 $5B78 DEFB $4D,$08,$56,$01,$58,$01,$5A,$0C
 $5B80 DEFB $CA,$00,$04,$03,$FF,$FF,$DE,$FB
 $5B88 DEFB $DF,$76,$BF,$FC,$00,$07,$00,$00
 $5B90 DEFB $CA,$00,$04,$03,$FF,$FF,$ED,$AF
 $5B98 DEFB $DF,$57,$BF,$FE,$00,$07,$00,$00
 $5BA0 DEFB $C9,$25,$12,$39,$06,$40,$01,$42
 $5BA8 DEFB $03,$46,$0D,$54,$13,$C9,$25,$0E
 $5BB0 DEFB $34,$06,$3B,$04,$41,$09,$4B,$04
 $5BB8 DEFB $50,$08,$59,$0E,$C9,$24,$11,$36
 $5BC0 DEFB $05,$41,$03,$45,$07,$4F,$03,$53
 $5BC8 DEFB $15,$C9,$24,$11,$36,$01,$49,$03
 $5BD0 DEFB $4D,$08,$56,$01,$58,$10,$C9,$23
 $5BD8 DEFB $16,$4C,$01,$4F,$02,$52,$04,$57
 $5BE0 DEFB $11,$C9,$23,$0F,$35,$03,$51,$02
 $5BE8 DEFB $54,$01,$56,$13,$C9,$23,$0E,$33
 $5BF0 DEFB $03,$58,$11,$C9,$23,$0D,$31,$04
 $5BF8 DEFB $5A,$0F,$C9,$22,$13,$5A,$01,$5C
 $5C00 DEFB $0D,$C9,$22,$13,$5B,$01,$5D,$0B
 $5C08 DEFB $C9,$22,$0E,$32,$04,$5A,$01,$5C
 $5C10 DEFB $0C,$C9,$22,$13,$5B,$01,$5D,$0B
 $5C18 DEFB $C9,$22,$15,$4B,$02,$4E,$05,$5C
 $5C20 DEFB $01,$5E,$0A,$C9,$22,$14,$54,$02
 $5C28 DEFB $5B,$01,$5D,$0B,$C9,$22,$10,$33
 $5C30 DEFB $02,$5C,$01,$5E,$09,$C9,$22,$12
 $5C38 DEFB $5B,$01,$5D,$0A,$C9,$22,$12,$38
 $5C40 DEFB $01,$44,$02,$4D,$03,$5C,$01,$5F
 $5C48 DEFB $08,$C9,$22,$11,$47,$02,$5B,$01
 $5C50 DEFB $5D,$0A,$C9,$22,$10,$37,$01,$55
 $5C58 DEFB $02,$5A,$01,$5C,$01,$5E,$09,$C9
 $5C60 DEFB $22,$0F,$37,$01,$5B,$01,$5D,$0A
 $5C68 DEFB $C9,$22,$0D,$37,$01,$5A,$01,$5C
 $5C70 DEFB $01,$5E,$08,$C9,$22,$0E,$36,$01
 $5C78 DEFB $5B,$01,$5D,$01,$5F,$07,$CA,$00
 $5C80 DEFB $04,$3F,$FE,$02,$03,$6B,$00,$02
 $5C88 DEFB $0B,$FC,$00,$07,$00,$00,$CB,$00
 $5C90 DEFB $00,$00,$00,$3F,$FC,$00,$1D,$D7
 $5C98 DEFB $84,$00,$15,$FC,$00,$00,$00,$00
 $5CA0 DEFB $00,$00,$00,$CA,$00,$04,$3F,$F0
 $5CA8 DEFB $04,$26,$6F,$04,$00,$01,$BB,$FC
 $5CB0 DEFB $00,$07,$00,$00,$C9,$21,$0C,$35
 $5CB8 DEFB $01,$39,$01,$3B,$01,$4D,$01,$56
 $5CC0 DEFB $0F,$C9,$1F,$0C,$35,$01,$4C,$01
 $5CC8 DEFB $55,$01,$57,$0E,$CB,$00,$00,$00
 $5CD0 DEFB $01,$BF,$D0,$08,$00,$E0,$88,$0E
 $5CD8 DEFB $07,$F8,$00,$00,$00,$00,$00,$00
 $5CE0 DEFB $00,$CA,$00,$03,$03,$1F,$F0,$08
 $5CE8 DEFB $07,$F8,$50,$70,$03,$F8,$00,$07
 $5CF0 DEFB $00,$00,$CB,$00,$00,$00,$02,$6F
 $5CF8 DEFB $E0,$02,$1E,$7C,$00,$61,$F1,$F8
 $5D00 DEFB $00,$00,$00,$00,$00,$00,$00,$CA
 $5D08 DEFB $00,$03,$06,$E7,$F0,$01,$3F,$FA
 $5D10 DEFB $40,$66,$7B,$F8,$00,$07,$00,$00
 $5D18 DEFB $CA,$00,$03,$07,$93,$F8,$0C,$30
 $5D20 DEFB $07,$80,$6F,$FF,$F8,$00,$07,$00
 $5D28 DEFB $00,$C9,$1D,$04,$27,$05,$39,$02
 $5D30 DEFB $3C,$01,$3E,$01,$48,$01,$51,$04
 $5D38 DEFB $59,$0B,$CB,$00,$00,$00,$07,$A1
 $5D40 DEFB $F0,$00,$41,$5D,$00,$30,$2F,$F0
 $5D48 DEFB $00,$00,$00,$00,$00,$00,$00,$CB
 $5D50 DEFB $00,$00,$00,$07,$61,$E0,$30,$02
 $5D58 DEFB $E0,$00,$34,$5B,$F0,$00,$00,$00
 $5D60 DEFB $00,$00,$00,$00,$C9,$1D,$03,$21
 $5D68 DEFB $01,$28,$03,$37,$01,$52,$03,$56
 $5D70 DEFB $02,$5D,$07,$CA,$00,$03,$07,$46
 $5D78 DEFB $C0,$02,$00,$03,$10,$FB,$F0,$00
 $5D80 DEFB $07,$00,$00,$C9,$1E,$02,$21,$01
 $5D88 DEFB $25,$02,$53,$02,$5E,$06,$C9,$1E
 $5D90 DEFB $02,$21,$01,$24,$02,$29,$01,$53
 $5D98 DEFB $01,$5E,$06,$C9,$1E,$01,$21,$02
 $5DA0 DEFB $24,$02,$29,$01,$34,$01,$54,$02
 $5DA8 DEFB $5E,$06,$C9,$1E,$01,$21,$01,$24
 $5DB0 DEFB $02,$48,$02,$54,$02,$5D,$06,$C9
 $5DB8 DEFB $1F,$01,$21,$02,$24,$02,$47,$02
 $5DC0 DEFB $53,$01,$55,$01,$5D,$06,$C9,$1F
 $5DC8 DEFB $01,$21,$02,$24,$02,$30,$01,$46
 $5DD0 DEFB $02,$55,$02,$5E,$04,$C9,$20,$01
 $5DD8 DEFB $22,$01,$2F,$01,$45,$03,$54,$01
 $5DE0 DEFB $56,$01,$5D,$05,$CA,$00,$04,$B2
 $5DE8 DEFB $01,$00,$02,$0A,$00,$01,$0F,$0B
 $5DF0 DEFB $C0,$00,$07,$00,$00,$CA,$00,$04
 $5DF8 DEFB $92,$00,$03,$1A,$60,$13,$0F,$C0
 $5E00 DEFB $00,$07,$00,$00,$CA,$00,$04,$51
 $5E08 DEFB $40,$00,$02,$71,$F8,$0F,$AF,$C0
 $5E10 DEFB $00,$07,$00,$00,$CA,$00,$04,$40
 $5E18 DEFB $40,$00,$02,$E0,$1E,$DF,$97,$C0
 $5E20 DEFB $00,$07,$00,$00,$C9,$21,$02,$28
 $5E28 DEFB $02,$3F,$02,$4C,$01,$4F,$07,$57
 $5E30 DEFB $03,$5B,$07,$CA,$00,$04,$20,$40
 $5E38 DEFB $02,$07,$00,$01,$1F,$FA,$D7,$C0
 $5E40 DEFB $00,$07,$00,$00,$CA,$00,$04,$21
 $5E48 DEFB $00,$02,$0E,$00,$01,$0D,$D5,$EB
 $5E50 DEFB $80,$00,$07,$00,$00,$CA,$00,$04
 $5E58 DEFB $20,$80,$02,$1C,$00,$01,$16,$6A
 $5E60 DEFB $E7,$80,$00,$07,$00,$00,$CA,$00
 $5E68 DEFB $04,$32,$40,$02,$1C,$00,$01,$08
 $5E70 DEFB $15,$7B,$80,$00,$07,$00,$00,$CA
 $5E78 DEFB $00,$04,$32,$40,$02,$38,$00,$01
 $5E80 DEFB $10,$2A,$B7,$80,$00,$07,$00,$00
 $5E88 DEFB $CA,$00,$04,$18,$C1,$02,$30,$00
 $5E90 DEFB $02,$15,$7F,$80,$00,$07,$00,$00
 $5E98 DEFB $CA,$00,$04,$0F,$C1,$02,$37,$FF
 $5EA0 DEFB $80,$2A,$B7,$80,$00,$07,$00,$00
 $5EA8 DEFB $C9,$27,$03,$30,$01,$36,$01,$3B
 $5EB0 DEFB $01,$3E,$1A,$59,$03,$5D,$04,$CA
 $5EB8 DEFB $00,$04,$01,$C0,$82,$11,$CD,$7D
 $5EC0 DEFB $DF,$E7,$00,$08,$00,$00,$CA,$00
 $5EC8 DEFB $04,$01,$E0,$42,$10,$80,$00,$01
 $5ED0 DEFB $5F,$47,$00,$08,$00,$00,$CA,$00
 $5ED8 DEFB $04,$01,$C0,$C1,$10,$60,$00,$01
 $5EE0 DEFB $0E,$CF,$00,$08,$00,$00,$CA,$00
 $5EE8 DEFB $04,$01,$E0,$62,$18,$3D,$21,$FD
 $5EF0 DEFB $8F,$00,$08,$00,$00,$CA,$00,$04
 $5EF8 DEFB $01,$61,$61,$48,$1F,$FF,$EA,$9F
 $5F00 DEFB $00,$08,$00,$00,$CA,$00,$04,$03
 $5F08 DEFB $71,$B2,$C8,$03,$FE,$0D,$9E,$00
 $5F10 DEFB $08,$00,$00,$CA,$00,$04,$03,$F0
 $5F18 DEFB $B1,$48,$00,$02,$1B,$BE,$00,$08
 $5F20 DEFB $00,$00,$CA,$00,$04,$07,$90,$59
 $5F28 DEFB $C0,$00,$02,$36,$3E,$00,$08,$00
 $5F30 DEFB $00,$CA,$00,$04,$0F,$98,$38,$C0
 $5F38 DEFB $00,$01,$01,$EC,$BC,$00,$08,$00
 $5F40 DEFB $00,$CA,$00,$04,$1F,$4C,$18,$60
 $5F48 DEFB $00,$02,$55,$BC,$00,$08,$00,$00
 $5F50 DEFB $CA,$00,$04,$3F,$42,$0C,$60,$00
 $5F58 DEFB $02,$AD,$78,$00,$08,$00,$00,$CA
 $5F60 DEFB $00,$04,$7F,$22,$0C,$20,$01,$C1
 $5F68 DEFB $59,$70,$00,$08,$00,$00,$CA,$00
 $5F70 DEFB $03,$01,$FF,$A1,$06,$20,$00,$02
 $5F78 DEFB $B9,$F0,$00,$08,$00,$00,$CA,$00
 $5F80 DEFB $03,$03,$FF,$90,$83,$11,$00,$01
 $5F88 DEFB $03,$F1,$70,$00,$08,$00,$00,$C9
 $5F90 DEFB $1D,$0C,$2B,$02,$36,$03,$3B,$01
 $5F98 DEFB $4F,$05,$56,$01,$58,$06,$CA,$00
 $5FA0 DEFB $03,$0F,$FF,$CA,$01,$88,$00,$01
 $5FA8 DEFB $3E,$73,$FF,$00,$08,$00,$00,$C9
 $5FB0 DEFB $1B,$0F,$2D,$01,$2F,$01,$37,$03
 $5FB8 DEFB $3C,$01,$52,$01,$56,$0C,$C9,$1A
 $5FC0 DEFB $10,$2E,$01,$32,$01,$38,$03,$3C
 $5FC8 DEFB $02,$45,$01,$51,$01,$56,$0E,$C9
 $5FD0 DEFB $18,$13,$2F,$01,$32,$02,$38,$04
 $5FD8 DEFB $3D,$01,$46,$02,$53,$01,$55,$11
 $5FE0 DEFB $C9,$17,$14,$30,$01,$33,$02,$39
 $5FE8 DEFB $05,$3F,$01,$47,$01,$52,$01,$55
 $5FF0 DEFB $13,$C9,$15,$17,$30,$02,$3A,$05
 $5FF8 DEFB $40,$01,$54,$16,$C9,$14,$18,$31
 $6000 DEFB $02,$3B,$06,$42,$01,$53,$1A,$C9
 $6008 DEFB $12,$1B,$32,$02,$3C,$07,$4D,$01
 $6010 DEFB $4F,$01,$51,$1E,$C9,$10,$1D,$33
 $6018 DEFB $02,$36,$01,$3D,$07,$45,$01,$4A
 $6020 DEFB $01,$4C,$01,$4E,$07,$56,$1B,$C9
 $6028 DEFB $0E,$1F,$34,$02,$37,$01,$39,$01
 $6030 DEFB $3D,$09,$47,$01,$49,$01,$4B,$0A
 $6038 DEFB $56,$1D,$C9,$0C,$22,$35,$02,$3A
 $6040 DEFB $01,$3E,$17,$56,$1E,$C9,$0A,$24
 $6048 DEFB $36,$02,$3A,$01,$3F,$15,$56,$1F
 $6050 DEFB $C9,$08,$26,$37,$02,$3B,$01,$40
 $6058 DEFB $14,$55,$21,$C9,$06,$29,$38,$02
 $6060 DEFB $40,$03,$44,$01,$46,$04,$4B,$01
 $6068 DEFB $4D,$07,$55,$21,$C9,$03,$2C,$39
 $6070 DEFB $03,$41,$03,$45,$01,$47,$01,$4A
 $6078 DEFB $01,$4D,$01,$4F,$04,$55,$22,$C9
 $6080 DEFB $01,$2F,$3A,$03,$42,$02,$4C,$01
 $6088 DEFB $4E,$05,$55,$22,$C9,$00,$30,$3C
 $6090 DEFB $03,$4D,$05,$55,$23,$C9,$00,$31
 $6098 DEFB $3D,$03,$4C,$01,$4E,$04,$55,$23
 $60A0 DEFB $C9,$00,$31,$3E,$03,$49,$01,$4B
 $60A8 DEFB $01,$4D,$04,$56,$23,$C9,$00,$32
 $60B0 DEFB $40,$03,$49,$01,$4B,$05,$56,$23
 $60B8 DEFB $C9,$00,$32,$41,$03,$48,$01,$4A
 $60C0 DEFB $01,$4C,$03,$56,$23,$C9,$00,$33
 $60C8 DEFB $42,$03,$47,$01,$49,$01,$4B,$03
 $60D0 DEFB $56,$24,$C9,$00,$33,$40,$01,$43
 $60D8 DEFB $03,$4C,$01,$56,$24,$C9,$00,$34
 $60E0 DEFB $41,$01,$45,$02,$4A,$04,$56,$24
 $60E8 DEFB $C9,$00,$35,$46,$0A,$56,$24,$C9
 $60F0 DEFB $00,$35,$47,$0A,$56,$24,$C9,$00
 $60F8 DEFB $36,$47,$0B,$56,$24,$C9,$00,$37
 $6100 DEFB $47,$0C,$57,$24,$C9,$00,$37,$46
 $6108 DEFB $0E,$57,$24,$C9,$00,$38,$46,$0F
 $6110 DEFB $57,$24,$C9,$00,$39,$45,$10,$57
 $6118 DEFB $24,$C9,$00,$39,$45,$10,$57,$24
 $6120 DEFB $C9,$50,$14,$50,$08,$30,$03,$50
 $6128 DEFB $09,$50,$06,$30,$06,$50,$08,$38
 $6130 DEFB $06,$30,$06,$38,$08,$38,$05,$30
 $6138 DEFB $07,$38,$08,$38,$05,$30,$07,$38
 $6140 DEFB $08,$50,$04,$30,$08,$50,$08,$50
 $6148 DEFB $04,$30,$08,$50,$08,$50,$04,$30
 $6150 DEFB $08,$50,$08,$38,$04,$30,$08,$38
 $6158 DEFB $08,$38,$05,$30,$07,$38,$08,$38
 $6160 DEFB $05,$30,$06,$38,$09,$50,$04,$38
 $6168 DEFB $02,$30,$05,$50,$09,$50,$04,$38
 $6170 DEFB $03,$30,$03,$38,$04,$50,$06,$38
 $6178 DEFB $08,$30,$02,$38,$04,$50,$06,$38
 $6180 DEFB $14,$00

; Graphics Data: Level 02 (Margaret Thatcher)
;
; Compressed graphics data for level 2.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$6182,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-02) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-02-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_02
b$6182 DEFB $C9,$11,$09,$38,$21,$C9,$12,$09
 $618A DEFB $38,$21,$C9,$13,$09,$37,$0C,$45
 $6192 DEFB $01,$4D,$01,$4F,$0B,$C9,$14,$09
 $619A DEFB $36,$08,$42,$02,$49,$02,$52,$09
 $61A2 DEFB $C9,$15,$09,$34,$06,$3B,$01,$44
 $61AA DEFB $0B,$55,$08,$C9,$16,$09,$33,$06
 $61B2 DEFB $3A,$01,$40,$08,$4C,$06,$56,$08
 $61BA DEFB $C9,$17,$09,$32,$07,$41,$02,$50
 $61C2 DEFB $04,$57,$08,$C9,$18,$09,$31,$07
 $61CA DEFB $3A,$02,$53,$03,$58,$07,$C9,$19
 $61D2 DEFB $09,$30,$04,$35,$02,$38,$02,$44
 $61DA DEFB $03,$55,$02,$5B,$06,$C9,$1A,$09
 $61E2 DEFB $2F,$04,$34,$01,$37,$02,$45,$05
 $61EA DEFB $57,$01,$5C,$05,$C9,$1B,$09,$2E
 $61F2 DEFB $04,$35,$03,$3C,$03,$48,$04,$58
 $61FA DEFB $01,$5B,$01,$5D,$04,$C9,$1C,$09
 $6202 DEFB $2D,$05,$34,$03,$3A,$03,$4A,$03
 $620A DEFB $5C,$01,$5E,$03,$C9,$1D,$09,$2C
 $6212 DEFB $05,$33,$02,$39,$02,$4C,$02,$5C
 $621A DEFB $01,$5F,$03,$CB,$00,$00,$00,$03
 $6222 DEFB $FE,$1F,$B1,$C0,$03,$86,$00,$8B
 $622A DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $6232 DEFB $C9,$1F,$09,$2B,$08,$36,$02,$48
 $623A DEFB $03,$4E,$02,$58,$01,$5C,$07,$CB
 $6242 DEFB $00,$00,$00,$00,$FF,$3E,$46,$00
 $624A DEFB $08,$71,$00,$8B,$60,$00,$00,$00
 $6252 DEFB $00,$00,$00,$00,$CB,$00,$00,$00
 $625A DEFB $00,$7F,$3E,$C4,$00,$06,$31,$00
 $6262 DEFB $8B,$7F,$00,$00,$00,$00,$00,$00
 $626A DEFB $00,$CB,$00,$00,$00,$00,$3F,$78
 $6272 DEFB $88,$00,$03,$18,$00,$92,$7F,$80
 $627A DEFB $00,$00,$00,$00,$00,$00,$CB,$00
 $6282 DEFB $00,$00,$00,$1F,$79,$10,$00,$01
 $628A DEFB $84,$00,$92,$7F,$80,$00,$00,$00
 $6292 DEFB $00,$00,$00,$CA,$00,$04,$0F,$79
 $629A DEFB $00,$03,$C0,$00,$01,$A4,$FF,$C0
 $62A2 DEFB $00,$06,$00,$00,$CB,$00,$00,$00
 $62AA DEFB $00,$07,$70,$20,$00,$E0,$C9,$01
 $62B2 DEFB $44,$FF,$C0,$00,$00,$00,$00,$00
 $62BA DEFB $00,$CA,$00,$04,$03,$F0,$C0,$43
 $62C2 DEFB $F0,$5B,$82,$69,$3F,$E0,$00,$06
 $62CA DEFB $00,$00,$CA,$00,$04,$01,$F1,$88
 $62D2 DEFB $CF,$FC,$DF,$CA,$F9,$7F,$E0,$00
 $62DA DEFB $06,$00,$00,$CA,$00,$05,$F0,$91
 $62E2 DEFB $9E,$F9,$7F,$D4,$FD,$B7,$F8,$00
 $62EA DEFB $06,$00,$00,$CA,$00,$05,$F5,$33
 $62F2 DEFB $3D,$FE,$FF,$ED,$FB,$72,$FC,$00
 $62FA DEFB $06,$00,$00,$CA,$00,$05,$EA,$27
 $6302 DEFB $6F,$FD,$DF,$FB,$FE,$B1,$7E,$00
 $630A DEFB $06,$00,$00,$CA,$00,$05,$F6,$66
 $6312 DEFB $DF,$FA,$FB,$ED,$7F,$E2,$BE,$00
 $631A DEFB $06,$00,$00,$CA,$00,$05,$EA,$4E
 $6322 DEFB $EF,$FF,$D6,$FF,$DB,$E1,$7E,$00
 $632A DEFB $06,$00,$00,$CA,$00,$05,$F6,$4D
 $6332 DEFB $DF,$CF,$FB,$FF,$EF,$C2,$7F,$00
 $633A DEFB $06,$00,$00,$CA,$00,$05,$FD,$1C
 $6342 DEFB $FE,$01,$FE,$00,$01,$FF,$81,$7F
 $634A DEFB $00,$06,$00,$00,$C9,$28,$08,$32
 $6352 DEFB $04,$37,$06,$4A,$03,$5B,$05,$69
 $635A DEFB $01,$6B,$05,$C9,$28,$08,$31,$01
 $6362 DEFB $33,$02,$38,$04,$5D,$04,$6B,$05
 $636A DEFB $C9,$27,$08,$31,$01,$33,$03,$37
 $6372 DEFB $04,$5D,$03,$62,$01,$6C,$05,$9F
 $637A DEFB $01,$CB,$00,$00,$00,$00,$01,$FE
 $6382 DEFB $D9,$D0,$00,$00,$00,$03,$CC,$1F
 $638A DEFB $80,$00,$00,$00,$00,$03,$C9,$28
 $6392 DEFB $07,$30,$02,$33,$02,$37,$04,$5E
 $639A DEFB $06,$6A,$07,$9D,$03,$CB,$00,$00
 $63A2 DEFB $00,$00,$0F,$FF,$9B,$80,$00,$00
 $63AA DEFB $00,$02,$D0,$27,$80,$00,$00,$00
 $63B2 DEFB $00,$0F,$CB,$00,$00,$00,$00,$3F
 $63BA DEFB $FF,$11,$C0,$00,$00,$00,$01,$E8
 $63C2 DEFB $4B,$80,$00,$00,$00,$00,$1F,$CB
 $63CA DEFB $00,$00,$00,$00,$7F,$3F,$1B,$80
 $63D2 DEFB $00,$00,$00,$02,$FE,$C3,$C0,$00
 $63DA DEFB $00,$00,$00,$3F,$CB,$00,$00,$00
 $63E2 DEFB $00,$FF,$9E,$11,$40,$00,$00,$00
 $63EA DEFB $01,$F7,$21,$C0,$00,$00,$00,$00
 $63F2 DEFB $7F,$CB,$00,$00,$00,$01,$FF,$CE
 $63FA DEFB $1B,$80,$00,$00,$00,$01,$7A,$43
 $6402 DEFB $C0,$00,$00,$00,$00,$FF,$CB,$00
 $640A DEFB $00,$00,$01,$E7,$5C,$13,$00,$00
 $6412 DEFB $00,$00,$00,$FB,$01,$C0,$00,$00
 $641A DEFB $00,$01,$FF,$CB,$00,$00,$00,$01
 $6422 DEFB $4D,$8C,$13,$80,$00,$00,$00,$00
 $642A DEFB $75,$03,$80,$00,$00,$00,$03,$FE
 $6432 DEFB $CB,$00,$00,$00,$03,$CF,$94,$11
 $643A DEFB $00,$00,$00,$00,$00,$FB,$87,$80
 $6442 DEFB $00,$00,$00,$07,$FC,$CB,$00,$00
 $644A DEFB $00,$03,$0B,$8C,$03,$80,$00,$00
 $6452 DEFB $00,$00,$BE,$1B,$80,$00,$00,$00
 $645A DEFB $0F,$F8,$CB,$00,$00,$00,$03,$8B
 $6462 DEFB $18,$8B,$00,$00,$00,$00,$00,$7F
 $646A DEFB $13,$80,$00,$00,$00,$1F,$F0,$CA
 $6472 DEFB $00,$03,$03,$0F,$59,$0B,$00,$05
 $647A DEFB $3E,$03,$00,$04,$3F,$E0,$00,$00
 $6482 DEFB $CB,$00,$00,$00,$01,$86,$E2,$0B
 $648A DEFB $00,$3C,$00,$0F,$C0,$77,$8F,$00
 $6492 DEFB $00,$00,$00,$7F,$C0,$CB,$00,$00
 $649A DEFB $00,$01,$83,$CE,$0A,$01,$DE,$00
 $64A2 DEFB $3C,$30,$39,$FF,$00,$00,$00,$00
 $64AA DEFB $FF,$80,$CB,$00,$00,$00,$01,$C1
 $64B2 DEFB $1C,$3B,$06,$2F,$80,$E8,$08,$3E
 $64BA DEFB $FF,$80,$00,$00,$00,$00,$00,$CB
 $64C2 DEFB $00,$00,$00,$01,$C4,$38,$5E,$08
 $64CA DEFB $53,$80,$F5,$04,$3E,$1F,$C0,$00
 $64D2 DEFB $00,$00,$00,$00,$CB,$00,$00,$00
 $64DA DEFB $00,$F6,$10,$7F,$11,$7A,$C1,$FF
 $64E2 DEFB $42,$3F,$09,$E0,$00,$00,$00,$00
 $64EA DEFB $00,$CB,$00,$00,$00,$00,$F8,$00
 $64F2 DEFB $FE,$22,$EF,$C1,$A7,$F4,$1D,$01
 $64FA DEFB $E0,$00,$00,$00,$00,$00,$CB,$00
 $6502 DEFB $00,$00,$00,$FA,$A2,$7C,$01,$E6
 $650A DEFB $E0,$67,$9E,$1B,$00,$F0,$00,$00
 $6512 DEFB $00,$00,$00,$CB,$00,$00,$00,$00
 $651A DEFB $7F,$5C,$FC,$06,$C8,$E0,$13,$3D
 $6522 DEFB $1F,$00,$F0,$00,$00,$00,$00,$00
 $652A DEFB $CB,$00,$00,$00,$00,$6F,$F7,$FC
 $6532 DEFB $8C,$71,$A2,$0F,$86,$0F,$80,$F0
 $653A DEFB $00,$00,$00,$00,$00,$CB,$00,$00
 $6542 DEFB $00,$00,$17,$FE,$F8,$5F,$E1,$62
 $654A DEFB $00,$02,$0E,$E1,$F8,$00,$00,$00
 $6552 DEFB $00,$00,$CB,$00,$00,$00,$00,$01
 $655A DEFB $F5,$78,$B8,$00,$A2,$00,$00,$0D
 $6562 DEFB $1F,$F8,$00,$00,$00,$00,$00,$C9
 $656A DEFB $27,$04,$2C,$01,$31,$04,$3A,$01
 $6572 DEFB $49,$02,$64,$03,$68,$01,$6E,$07
 $657A DEFB $CB,$00,$00,$00,$00,$01,$F4,$F8
 $6582 DEFB $00,$00,$A0,$00,$00,$1B,$86,$F8
 $658A DEFB $00,$00,$00,$00,$00,$C9,$28,$03
 $6592 DEFB $2C,$01,$31,$05,$49,$02,$63,$03
 $659A DEFB $67,$02,$6D,$08,$CA,$00,$05,$F4
 $65A2 DEFB $F4,$00,$02,$A0,$00,$02,$2F,$AF
 $65AA DEFB $F8,$00,$05,$00,$00,$CB,$00,$00
 $65B2 DEFB $00,$00,$00,$EA,$72,$00,$01,$E0
 $65BA DEFB $00,$00,$2F,$DF,$F0,$00,$00,$00
 $65C2 DEFB $00,$00,$CB,$00,$00,$00,$00,$00
 $65CA DEFB $FD,$72,$00,$03,$C0,$80,$00,$4D
 $65D2 DEFB $E7,$F0,$00,$00,$00,$00,$00,$CB
 $65DA DEFB $00,$00,$00,$00,$00,$F6,$FA,$80
 $65E2 DEFB $03,$40,$20,$00,$4E,$BF,$E0,$00
 $65EA DEFB $00,$00,$00,$00,$CB,$00,$00,$00
 $65F2 DEFB $00,$00,$3F,$B9,$40,$06,$00,$20
 $65FA DEFB $02,$9F,$FF,$C0,$00,$00,$00,$00
 $6602 DEFB $00,$CA,$00,$05,$1F,$79,$40,$05
 $660A DEFB $C0,$E8,$05,$9E,$FF,$80,$00,$05
 $6612 DEFB $00,$00,$CA,$00,$05,$0F,$99,$60
 $661A DEFB $08,$E1,$C8,$0A,$9F,$FF,$00,$06
 $6622 DEFB $00,$00,$CA,$00,$05,$07,$BF,$E0
 $662A DEFB $30,$1E,$05,$54,$BF,$FF,$00,$06
 $6632 DEFB $00,$00,$CA,$00,$05,$07,$59,$D0
 $663A DEFB $E0,$0C,$02,$EC,$C7,$FE,$00,$06
 $6642 DEFB $00,$00,$CA,$00,$05,$03,$D0,$ED
 $664A DEFB $C0,$00,$01,$03,$98,$87,$F8,$00
 $6652 DEFB $06,$00,$00,$CA,$00,$05,$01,$F0
 $665A DEFB $B2,$C3,$E3,$E1,$10,$CF,$90,$00
 $6662 DEFB $06,$00,$00,$CA,$00,$06,$E9,$A5
 $666A DEFB $4F,$FF,$F9,$20,$BF,$80,$00,$06
 $6672 DEFB $00,$00,$CA,$00,$06,$7F,$92,$CE
 $667A DEFB $4E,$39,$00,$01,$7E,$00,$07,$00
 $6682 DEFB $00,$CA,$00,$06,$7F,$81,$47,$C0
 $668A DEFB $F1,$00,$01,$BE,$00,$07,$00,$00
 $6692 DEFB $C9,$32,$08,$3E,$01,$41,$02,$46
 $669A DEFB $0D,$57,$01,$60,$06,$CA,$00,$06
 $66A2 DEFB $0F,$C1,$21,$AF,$C2,$01,$F8,$00
 $66AA DEFB $07,$00,$00,$C9,$38,$03,$48,$03
 $66B2 DEFB $4D,$01,$4F,$02,$5F,$07,$C9,$38
 $66BA DEFB $03,$43,$01,$4A,$05,$5E,$0C,$C9
 $66C2 DEFB $38,$04,$43,$01,$46,$01,$5D,$11
 $66CA DEFB $C9,$36,$07,$43,$01,$47,$01,$5D
 $66D2 DEFB $14,$C9,$33,$0A,$3E,$01,$40,$01
 $66DA DEFB $44,$01,$5C,$01,$5E,$16,$C9,$30
 $66E2 DEFB $0E,$3F,$01,$44,$01,$55,$01,$5B
 $66EA DEFB $01,$5D,$1B,$C9,$2D,$0E,$3C,$03
 $66F2 DEFB $40,$01,$44,$01,$55,$01,$5A,$01
 $66FA DEFB $5C,$01,$5E,$1D,$C9,$2A,$12,$3D
 $6702 DEFB $03,$45,$01,$54,$02,$58,$02,$5B
 $670A DEFB $01,$5D,$21,$C9,$27,$14,$3C,$05
 $6712 DEFB $43,$01,$45,$01,$54,$01,$56,$03
 $671A DEFB $5A,$01,$5C,$26,$C9,$24,$17,$3C
 $6722 DEFB $01,$3E,$01,$40,$03,$45,$02,$53
 $672A DEFB $05,$5B,$02,$5E,$27,$C9,$21,$1B
 $6732 DEFB $3D,$02,$42,$05,$52,$04,$5A,$01
 $673A DEFB $5C,$02,$5F,$29,$C9,$1E,$1E,$3E
 $6742 DEFB $02,$45,$03,$51,$02,$59,$01,$5B
 $674A DEFB $02,$5E,$2C,$C9,$1B,$21,$3D,$01
 $6752 DEFB $3F,$02,$47,$04,$4F,$02,$5A,$01
 $675A DEFB $5E,$2D,$90,$09,$C9,$18,$24,$3E
 $6762 DEFB $01,$40,$02,$49,$06,$59,$01,$5E
 $676A DEFB $2D,$91,$09,$C9,$15,$1F,$36,$06
 $6772 DEFB $40,$03,$58,$02,$5E,$2E,$92,$09
 $677A DEFB $C9,$13,$1F,$33,$01,$35,$01,$37
 $6782 DEFB $05,$3F,$01,$41,$03,$56,$03,$5E
 $678A DEFB $2E,$93,$09,$CB,$00,$00,$3F,$FF
 $6792 DEFB $FF,$FF,$A0,$F0,$B8,$00,$06,$03
 $679A DEFB $FF,$57,$FF,$FF,$FF,$F0,$0F,$F8
 $67A2 DEFB $CB,$00,$00,$3F,$FF,$FF,$FF,$81
 $67AA DEFB $F0,$5C,$00,$0C,$03,$FE,$CB,$FF
 $67B2 DEFB $FF,$FF,$F8,$07,$FC,$CB,$00,$00
 $67BA DEFB $7F,$FF,$FF,$FF,$00,$F0,$A6,$00
 $67C2 DEFB $39,$03,$FF,$41,$FF,$FF,$FF,$F8
 $67CA DEFB $03,$FE,$CB,$00,$00,$7F,$FF,$FF
 $67D2 DEFB $FF,$01,$F0,$53,$00,$E2,$07,$FE
 $67DA DEFB $80,$FF,$FF,$FF,$F8,$01,$FF,$CB
 $67E2 DEFB $00,$00,$7F,$FF,$FF,$FF,$A9,$F8
 $67EA DEFB $01,$F3,$C0,$07,$FE,$06,$FF,$FF
 $67F2 DEFB $FF,$FC,$00,$FF,$C9,$10,$1F,$31
 $67FA DEFB $01,$33,$01,$36,$07,$49,$08,$5D
 $6802 DEFB $0A,$6C,$01,$70,$1E,$99,$07,$CB
 $680A DEFB $00,$00,$FF,$FF,$FF,$FE,$2F,$F8
 $6812 DEFB $00,$1E,$00,$07,$FF,$54,$FF,$FF
 $681A DEFB $FF,$FC,$00,$3F,$C9,$10,$1E,$30
 $6822 DEFB $01,$32,$0B,$4D,$01,$5D,$0C,$6A
 $682A DEFB $02,$6E,$01,$71,$1D,$9B,$05,$C9
 $6832 DEFB $10,$1D,$31,$0C,$4C,$04,$5D,$0E
 $683A DEFB $6D,$01,$72,$1D,$9C,$04,$C9,$10
 $6842 DEFB $1C,$31,$0D,$4B,$06,$5C,$11,$6F
 $684A DEFB $01,$73,$1C,$9D,$03,$C9,$10,$1B
 $6852 DEFB $2E,$01,$30,$0E,$4A,$08,$5C,$12
 $685A DEFB $74,$1B,$9E,$02,$C9,$0F,$1B,$2D
 $6862 DEFB $01,$2F,$0F,$49,$09,$5B,$14,$71
 $686A DEFB $01,$74,$1B,$9F,$01,$C9,$0F,$1A
 $6872 DEFB $2E,$10,$48,$0B,$5B,$15,$72,$01
 $687A DEFB $75,$1A,$C9,$0F,$1A,$2D,$12,$48
 $6882 DEFB $0A,$53,$01,$5A,$01,$5C,$15,$76
 $688A DEFB $19,$C9,$0F,$19,$2B,$01,$2D,$13
 $6892 DEFB $47,$02,$4A,$08,$53,$02,$5A,$01
 $689A DEFB $5C,$15,$77,$19,$C9,$0F,$18,$2C
 $68A2 DEFB $14,$46,$0B,$54,$01,$59,$01,$5C
 $68AA DEFB $16,$75,$01,$78,$18,$C9,$0F,$17
 $68B2 DEFB $2A,$15,$40,$01,$45,$03,$4A,$07
 $68BA DEFB $55,$01,$5C,$17,$76,$01,$78,$18
 $68C2 DEFB $CB,$00,$01,$FF,$FF,$F8,$6F,$FF
 $68CA DEFB $FE,$CC,$1F,$82,$8F,$FF,$FF,$E0
 $68D2 DEFB $7F,$FF,$FF,$00,$00,$C9,$0E,$17
 $68DA DEFB $28,$01,$2E,$11,$41,$01,$43,$02
 $68E2 DEFB $4B,$05,$56,$02,$5B,$16,$79,$17
 $68EA DEFB $C9,$0E,$16,$27,$02,$2C,$01,$2E
 $68F2 DEFB $11,$42,$02,$4A,$06,$5B,$16,$72
 $68FA DEFB $01,$7A,$16,$C9,$0E,$15,$26,$01
 $6902 DEFB $2C,$13,$4A,$06,$5B,$18,$7A,$16
 $690A DEFB $C9,$0E,$14,$25,$02,$2A,$15,$4A
 $6912 DEFB $06,$5B,$19,$77,$01,$7B,$15,$C9
 $691A DEFB $0E,$13,$23,$01,$25,$02,$29,$01
 $6922 DEFB $2B,$15,$4A,$06,$5B,$19,$76,$01
 $692A DEFB $7B,$16,$C9,$0E,$12,$22,$01,$24
 $6932 DEFB $03,$2A,$16,$49,$07,$5B,$19,$77
 $693A DEFB $02,$7C,$15,$C9,$0E,$12,$23,$04
 $6942 DEFB $29,$01,$2B,$15,$49,$08,$5B,$19
 $694A DEFB $76,$01,$78,$02,$7C,$15,$C9,$0E
 $6952 DEFB $11,$22,$05,$2A,$16,$49,$08,$5B
 $695A DEFB $19,$77,$04,$7C,$15,$C9,$0E,$11
 $6962 DEFB $21,$06,$29,$01,$2B,$15,$49,$08
 $696A DEFB $5A,$1A,$76,$01,$78,$03,$7C,$15
 $6972 DEFB $C9,$0D,$13,$21,$06,$2A,$16,$49
 $697A DEFB $08,$5A,$1A,$77,$04,$7C,$15,$C9
 $6982 DEFB $0D,$13,$21,$06,$29,$01,$2B,$16
 $698A DEFB $49,$08,$5A,$1A,$76,$01,$78,$03
 $6992 DEFB $7C,$15,$C9,$0D,$14,$22,$05,$2A
 $699A DEFB $17,$48,$09,$5A,$1A,$77,$03,$7B
 $69A2 DEFB $16,$C9,$0D,$14,$22,$05,$29,$01
 $69AA DEFB $2B,$16,$48,$0A,$5A,$1A,$76,$01
 $69B2 DEFB $78,$02,$7B,$16,$C9,$0D,$14,$22
 $69BA DEFB $05,$2A,$17,$48,$0A,$5A,$1A,$77
 $69C2 DEFB $03,$7B,$16,$C9,$0D,$14,$22,$05
 $69CA DEFB $29,$01,$2B,$16,$48,$0A,$59,$1B
 $69D2 DEFB $76,$01,$78,$02,$7B,$16,$C9,$0D
 $69DA DEFB $15,$23,$04,$2A,$17,$48,$0A,$59
 $69E2 DEFB $1B,$77,$03,$7B,$16,$C9,$0D,$15
 $69EA DEFB $23,$04,$29,$01,$2B,$16,$48,$0A
 $69F2 DEFB $59,$1B,$76,$01,$78,$01,$7A,$17
 $69FA DEFB $C9,$0D,$15,$23,$04,$2A,$17,$48
 $6A02 DEFB $0A,$59,$1B,$77,$02,$7A,$17,$C9
 $6A0A DEFB $48,$02,$4F,$01,$57,$02,$50,$02
 $6A12 DEFB $30,$04,$48,$02,$78,$01,$50,$03
 $6A1A DEFB $78,$01,$48,$02,$48,$03,$4F,$01
 $6A22 DEFB $57,$01,$50,$01,$30,$06,$48,$01
 $6A2A DEFB $78,$01,$50,$03,$78,$01,$48,$02
 $6A32 DEFB $48,$04,$4F,$01,$30,$08,$78,$01
 $6A3A DEFB $50,$03,$78,$01,$48,$02,$48,$05
 $6A42 DEFB $30,$03,$70,$04,$30,$02,$50,$03
 $6A4A DEFB $78,$01,$48,$02,$48,$05,$30,$02
 $6A52 DEFB $70,$05,$30,$02,$50,$03,$78,$01
 $6A5A DEFB $48,$01,$4F,$01,$48,$04,$30,$03
 $6A62 DEFB $70,$06,$30,$01,$50,$03,$78,$01
 $6A6A DEFB $4F,$01,$57,$01,$78,$04,$30,$03
 $6A72 DEFB $70,$06,$30,$01,$50,$03,$78,$03
 $6A7A DEFB $50,$05,$30,$01,$70,$07,$30,$01
 $6A82 DEFB $50,$06,$50,$06,$30,$01,$70,$06
 $6A8A DEFB $50,$07,$50,$07,$70,$05,$50,$08
 $6A92 DEFB $78,$07,$70,$05,$38,$02,$50,$03
 $6A9A DEFB $78,$03,$48,$04,$38,$03,$78,$01
 $6AA2 DEFB $70,$03,$78,$01,$38,$04,$50,$01
 $6AAA DEFB $78,$01,$4F,$01,$57,$01,$48,$03
 $6AB2 DEFB $38,$02,$30,$01,$38,$01,$78,$05
 $6ABA DEFB $30,$03,$38,$02,$78,$01,$48,$01
 $6AC2 DEFB $4F,$01,$48,$03,$38,$01,$30,$02
 $6ACA DEFB $38,$01,$78,$07,$30,$02,$38,$01
 $6AD2 DEFB $78,$01,$48,$02,$48,$03,$30,$02
 $6ADA DEFB $28,$01,$38,$01,$78,$07,$28,$01
 $6AE2 DEFB $30,$01,$38,$01,$78,$01,$48,$02
 $6AEA DEFB $48,$03,$30,$02,$28,$01,$38,$01
 $6AF2 DEFB $78,$07,$28,$01,$30,$01,$38,$01
 $6AFA DEFB $78,$01,$48,$02,$09

; Graphics Data: Level 03 (Neil Kinnock)
;
; Compressed graphics data for level 3.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$6AFF,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-03) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-03-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_03
b$6AFF DEFB $C9,$C9,$C9,$C9,$C9,$C9,$38,$0F
 $6B07 DEFB $C9,$33,$18,$C9,$2E,$20,$C9,$2A
 $6B0F DEFB $25,$C9,$28,$0F,$38,$03,$3E,$06
 $6B17 DEFB $46,$01,$48,$09,$C9,$27,$08,$33
 $6B1F DEFB $05,$3B,$17,$CA,$00,$04,$07,$F9
 $6B27 DEFB $FA,$A9,$7E,$3F,$C0,$00,$09,$00
 $6B2F DEFB $00,$C9,$24,$07,$2C,$05,$32,$01
 $6B37 DEFB $43,$01,$45,$05,$4D,$04,$C9,$23
 $6B3F DEFB $0B,$46,$01,$48,$02,$4E,$07,$C9
 $6B47 DEFB $22,$0A,$48,$01,$4A,$02,$4D,$0B
 $6B4F DEFB $C9,$20,$0A,$4A,$01,$4C,$03,$50
 $6B57 DEFB $01,$53,$07,$C9,$1F,$0A,$46,$01
 $6B5F DEFB $4C,$01,$4E,$04,$53,$08,$CA,$00
 $6B67 DEFB $03,$01,$DE,$00,$03,$01,$47,$B7
 $6B6F DEFB $F0,$00,$08,$00,$00,$CA,$00,$03
 $6B77 DEFB $03,$9C,$00,$03,$02,$A3,$DB,$F8
 $6B7F DEFB $00,$08,$00,$00,$CA,$00,$03,$07
 $6B87 DEFB $B8,$00,$03,$01,$45,$E5,$FC,$00
 $6B8F DEFB $08,$00,$00,$CA,$00,$03,$0E,$F8
 $6B97 DEFB $00,$04,$A3,$EB,$FE,$00,$08,$00
 $6B9F DEFB $00,$CA,$00,$03,$0D,$F0,$00,$04
 $6BA7 DEFB $52,$F5,$FF,$00,$08,$00,$00,$CA
 $6BAF DEFB $00,$03,$18,$F0,$00,$04,$A9,$7D
 $6BB7 DEFB $7F,$00,$08,$00,$00,$CA,$00,$03
 $6BBF DEFB $3D,$E0,$00,$04,$42,$F5,$FF,$80
 $6BC7 DEFB $00,$07,$00,$00,$CA,$00,$03,$3B
 $6BCF DEFB $C0,$00,$04,$A9,$79,$7F,$80,$00
 $6BD7 DEFB $07,$00,$00,$CA,$00,$03,$77,$80
 $6BDF DEFB $00,$04,$55,$74,$FF,$C0,$00,$07
 $6BE7 DEFB $00,$00,$CA,$00,$03,$77,$00,$05
 $6BEF DEFB $A8,$F5,$7F,$C0,$00,$07,$00,$00
 $6BF7 DEFB $CA,$00,$03,$FF,$00,$05,$51,$74
 $6BFF DEFB $BF,$C0,$00,$07,$00,$00,$CA,$00
 $6C07 DEFB $03,$FE,$00,$05,$A0,$E8,$BF,$E0
 $6C0F DEFB $00,$07,$00,$00,$CA,$00,$03,$FE
 $6C17 DEFB $00,$05,$51,$69,$5F,$E0,$00,$07
 $6C1F DEFB $00,$00,$C9,$18,$06,$4A,$01,$4C
 $6C27 DEFB $01,$51,$02,$57,$01,$59,$0A,$CA
 $6C2F DEFB $00,$03,$EC,$00,$05,$10,$52,$FF
 $6C37 DEFB $E0,$00,$07,$00,$00,$C9,$17,$04
 $6C3F DEFB $1C,$02,$4A,$01,$4C,$01,$51,$02
 $6C47 DEFB $56,$0D,$C9,$17,$03,$1C,$02,$4B
 $6C4F DEFB $01,$50,$04,$55,$0E,$C9,$17,$03
 $6C57 DEFB $1B,$02,$47,$01,$49,$01,$4F,$01
 $6C5F DEFB $51,$13,$C9,$16,$07,$46,$01,$48
 $6C67 DEFB $01,$50,$01,$52,$12,$C9,$16,$07
 $6C6F DEFB $49,$01,$4F,$01,$51,$13,$C9,$16
 $6C77 DEFB $07,$47,$01,$49,$01,$4E,$01,$50
 $6C7F DEFB $14,$C9,$16,$06,$46,$01,$48,$02
 $6C87 DEFB $4D,$01,$4F,$15,$C9,$16,$07,$45
 $6C8F DEFB $01,$47,$01,$4C,$02,$4F,$15,$C9
 $6C97 DEFB $17,$05,$4B,$01,$4D,$17,$C9,$17
 $6C9F DEFB $02,$1A,$02,$4A,$01,$4C,$18,$C9
 $6CA7 DEFB $17,$03,$1B,$01,$49,$01,$4C,$01
 $6CAF DEFB $4E,$17,$C9,$16,$07,$48,$01,$4A
 $6CB7 DEFB $01,$4D,$01,$4F,$16,$C9,$16,$06
 $6CBF DEFB $49,$01,$4B,$01,$4E,$01,$50,$15
 $6CC7 DEFB $C9,$16,$07,$42,$01,$44,$01,$46
 $6CCF DEFB $03,$4A,$01,$4C,$01,$4E,$17,$C9
 $6CD7 DEFB $17,$05,$1D,$01,$3F,$01,$41,$01
 $6CDF DEFB $43,$07,$4B,$1A,$C9,$17,$03,$1B
 $6CE7 DEFB $02,$3E,$01,$40,$0D,$4E,$17,$C9
 $6CEF DEFB $17,$02,$1B,$03,$3C,$01,$3E,$08
 $6CF7 DEFB $47,$1D,$C9,$17,$06,$3B,$01,$3D
 $6CFF DEFB $06,$44,$01,$46,$01,$48,$01,$4A
 $6D07 DEFB $1A,$C9,$16,$01,$18,$03,$1C,$02
 $6D0F DEFB $3C,$06,$45,$01,$47,$07,$4F,$15
 $6D17 DEFB $C9,$18,$02,$1B,$04,$3B,$06,$43
 $6D1F DEFB $0D,$51,$13,$CB,$00,$00,$00,$DC
 $6D27 DEFB $00,$16,$80,$3F,$7F,$EA,$FF,$FF
 $6D2F DEFB $F0,$00,$00,$00,$00,$00,$00,$00
 $6D37 DEFB $CB,$00,$00,$00,$FC,$00,$BF,$A0
 $6D3F DEFB $3E,$CF,$C4,$3F,$FF,$E0,$00,$00
 $6D47 DEFB $00,$00,$00,$00,$00,$CB,$00,$00
 $6D4F DEFB $01,$FE,$01,$6F,$D0,$3F,$C7,$0C
 $6D57 DEFB $2F,$FF,$E0,$00,$00,$00,$00,$00
 $6D5F DEFB $00,$00,$CA,$00,$03,$3E,$0A,$95
 $6D67 DEFB $E0,$1F,$54,$12,$1F,$FF,$E0,$00
 $6D6F DEFB $07,$00,$00,$C9,$1A,$06,$25,$01
 $6D77 DEFB $2A,$0A,$3B,$03,$48,$01,$4A,$01
 $6D7F DEFB $4D,$01,$55,$0D,$CA,$00,$03,$1F
 $6D87 DEFB $01,$7F,$40,$0E,$05,$40,$0F,$FF
 $6D8F DEFB $C0,$00,$07,$00,$00,$C9,$1C,$03
 $6D97 DEFB $26,$01,$28,$07,$30,$01,$3B,$04
 $6D9F DEFB $46,$01,$55,$0C,$C9,$1C,$04,$27
 $6DA7 DEFB $02,$2B,$05,$3C,$04,$54,$0D,$C9
 $6DAF DEFB $1D,$03,$27,$02,$2A,$01,$2C,$01
 $6DB7 DEFB $32,$01,$3B,$05,$55,$0C,$C9,$1D
 $6DBF DEFB $03,$30,$01,$3C,$04,$54,$0C,$C9
 $6DC7 DEFB $1E,$03,$2F,$01,$31,$01,$37,$01
 $6DCF DEFB $3D,$04,$53,$01,$55,$0B,$CA,$00
 $6DD7 DEFB $03,$01,$80,$2A,$A2,$0F,$80,$00
 $6DDF DEFB $01,$0F,$FE,$00,$08,$00,$00,$C9
 $6DE7 DEFB $1F,$02,$2B,$01,$2D,$01,$37,$01
 $6DEF DEFB $3D,$03,$41,$02,$53,$0C,$C9,$1F
 $6DF7 DEFB $03,$36,$01,$3C,$05,$42,$02,$52
 $6DFF DEFB $01,$54,$0B,$C9,$20,$02,$37,$01
 $6E07 DEFB $3D,$03,$41,$03,$45,$03,$53,$0C
 $6E0F DEFB $C9,$21,$02,$3E,$04,$43,$02,$46
 $6E17 DEFB $04,$52,$0D,$C9,$21,$02,$34,$01
 $6E1F DEFB $3D,$03,$42,$03,$47,$07,$50,$01
 $6E27 DEFB $52,$0E,$C9,$22,$02,$32,$02,$3E
 $6E2F DEFB $02,$41,$01,$43,$04,$49,$07,$51
 $6E37 DEFB $0F,$CA,$00,$04,$30,$00,$01,$60
 $6E3F DEFB $05,$BB,$83,$FB,$FF,$C0,$00,$07
 $6E47 DEFB $00,$00,$C9,$22,$02,$2F,$03,$3E
 $6E4F DEFB $08,$47,$04,$50,$05,$57,$0F,$CA
 $6E57 DEFB $00,$04,$10,$02,$84,$01,$FA,$B4
 $6E5F DEFB $B1,$FF,$FF,$E0,$00,$06,$00,$00
 $6E67 DEFB $CA,$00,$04,$1D,$03,$02,$02,$FD
 $6E6F DEFB $5E,$BB,$FF,$FF,$FF,$00,$06,$00
 $6E77 DEFB $00,$CB,$00,$00,$00,$00,$1A,$05
 $6E7F DEFB $00,$01,$EA,$FE,$31,$FF,$FF,$FF
 $6E87 DEFB $F0,$00,$00,$00,$00,$00,$CB,$00
 $6E8F DEFB $00,$00,$00,$19,$02,$00,$2A,$D5
 $6E97 DEFB $FC,$BB,$FF,$FF,$FF,$FE,$00,$00
 $6E9F DEFB $00,$00,$00,$C9,$23,$03,$2D,$02
 $6EA7 DEFB $3B,$01,$3D,$04,$42,$01,$44,$0A
 $6EAF DEFB $52,$02,$55,$01,$57,$22,$C9,$24
 $6EB7 DEFB $03,$28,$01,$2D,$01,$3D,$01,$41
 $6EBF DEFB $0A,$4C,$02,$50,$01,$52,$03,$56
 $6EC7 DEFB $25,$CB,$00,$00,$00,$00,$0D,$4E
 $6ECF DEFB $00,$03,$C9,$DC,$BB,$FF,$FF,$FF
 $6ED7 DEFB $FF,$FE,$00,$00,$00,$00,$CB,$00
 $6EDF DEFB $00,$00,$00,$0E,$D6,$00,$7F,$E5
 $6EE7 DEFB $A8,$B7,$FF,$FF,$FF,$FF,$FF,$F8
 $6EEF DEFB $00,$00,$00,$CB,$00,$00,$00,$00
 $6EF7 DEFB $06,$EC,$7F,$BB,$E7,$19,$BF,$FF
 $6EFF DEFB $FF,$FF,$FF,$8F,$FF,$80,$00,$00
 $6F07 DEFB $CB,$00,$00,$00,$00,$06,$56,$1C
 $6F0F DEFB $91,$FE,$31,$3F,$FF,$FF,$FF,$FF
 $6F17 DEFB $00,$FF,$F8,$00,$00,$CB,$00,$00
 $6F1F DEFB $00,$00,$07,$12,$06,$D1,$F8,$71
 $6F27 DEFB $7F,$FF,$FF,$FF,$FF,$00,$03,$FE
 $6F2F DEFB $00,$00,$C9,$22,$07,$2C,$01,$37
 $6F37 DEFB $05,$3E,$04,$49,$01,$51,$26,$89
 $6F3F DEFB $09,$C9,$1F,$0B,$2C,$01,$39,$06
 $6F47 DEFB $48,$01,$4C,$01,$4F,$01,$51,$26
 $6F4F DEFB $8A,$0A,$CB,$00,$00,$00,$0F,$D5
 $6F57 DEFB $C0,$00,$00,$01,$39,$FF,$F7,$FF
 $6F5F DEFB $FF,$FE,$00,$00,$53,$FE,$00,$CB
 $6F67 DEFB $00,$00,$00,$7C,$FF,$60,$00,$00
 $6F6F DEFB $00,$31,$FF,$FF,$FF,$FF,$FC,$00
 $6F77 DEFB $00,$D4,$9F,$80,$CB,$00,$00,$07
 $6F7F DEFB $E3,$D5,$30,$00,$00,$00,$63,$FF
 $6F87 DEFB $EF,$FF,$FF,$FC,$00,$01,$7F,$C7
 $6F8F DEFB $C0,$CB,$00,$00,$3F,$83,$30,$08
 $6F97 DEFB $00,$00,$01,$81,$FF,$D7,$FF,$FF
 $6F9F DEFB $F8,$00,$01,$A8,$8F,$F0,$CB,$00
 $6FA7 DEFB $00,$FC,$06,$90,$04,$00,$00,$00
 $6FAF DEFB $03,$FF,$AF,$FF,$FF,$F0,$00,$02
 $6FB7 DEFB $01,$1C,$7C,$CB,$00,$03,$F0,$02
 $6FBF DEFB $50,$07,$00,$00,$00,$17,$FF,$5F
 $6FC7 DEFB $FF,$FF,$E0,$00,$03,$00,$18,$3E
 $6FCF DEFB $CB,$00,$0F,$C0,$01,$A0,$0C,$C0
 $6FD7 DEFB $00,$00,$37,$FE,$AF,$FF,$FF,$E0
 $6FDF DEFB $00,$02,$00,$30,$FE,$CB,$00,$3F
 $6FE7 DEFB $00,$00,$60,$08,$30,$00,$00,$2F
 $6FEF DEFB $FD,$5F,$FF,$FF,$C0,$00,$03,$00
 $6FF7 DEFB $61,$FF,$CB,$00,$78,$00,$00,$00
 $6FFF DEFB $08,$58,$00,$00,$37,$FA,$BF,$FF
 $7007 DEFB $FF,$C0,$00,$00,$00,$C1,$FF,$CB
 $700F DEFB $01,$E3,$00,$00,$00,$10,$6E,$00
 $7017 DEFB $00,$1F,$FD,$5F,$FF,$FF,$80,$00
 $701F DEFB $00,$00,$C3,$FF,$CB,$03,$CE,$00
 $7027 DEFB $00,$00,$11,$87,$00,$00,$3F,$FA
 $702F DEFB $AF,$FF,$FF,$80,$00,$00,$01,$83
 $7037 DEFB $FF,$CB,$07,$72,$00,$00,$00,$20
 $703F DEFB $87,$80,$00,$7F,$F5,$5F,$FF,$FF
 $7047 DEFB $80,$00,$00,$01,$83,$FF,$CB,$06
 $704F DEFB $90,$00,$00,$00,$20,$03,$E0,$04
 $7057 DEFB $FF,$EA,$BF,$FF,$FF,$00,$00,$00
 $705F DEFB $03,$07,$FF,$CB,$0D,$00,$00,$00
 $7067 DEFB $00,$40,$03,$30,$AB,$FF,$95,$7F
 $706F DEFB $FF,$FF,$00,$00,$00,$03,$03,$FC
 $7077 DEFB $CB,$0F,$C0,$00,$00,$00,$40,$03
 $707F DEFB $BD,$5F,$FF,$AA,$BF,$FF,$FE,$00
 $7087 DEFB $00,$00,$03,$07,$F0,$CB,$1D,$00
 $708F DEFB $00,$00,$00,$40,$03,$4F,$FF,$FE
 $7097 DEFB $55,$7F,$FF,$FE,$00,$00,$00,$06
 $709F DEFB $07,$C0,$CB,$1F,$C0,$00,$00,$00
 $70A7 DEFB $80,$03,$2B,$07,$FE,$AA,$FF,$FF
 $70AF DEFB $E3,$00,$00,$00,$06,$07,$80,$CB
 $70B7 DEFB $3D,$00,$00,$00,$00,$80,$03,$05
 $70BF DEFB $C3,$F9,$55,$7F,$FF,$83,$00,$00
 $70C7 DEFB $00,$06,$0F,$00,$CB,$3C,$C0,$00
 $70CF DEFB $00,$01,$00,$01,$81,$60,$62,$AA
 $70D7 DEFB $FF,$F9,$01,$00,$00,$00,$04,$07
 $70DF DEFB $00,$CB,$3C,$80,$00,$00,$01,$00
 $70E7 DEFB $01,$80,$60,$C0,$55,$7F,$C0,$01
 $70EF DEFB $00,$00,$00,$0C,$06,$00,$CB,$3C
 $70F7 DEFB $A0,$00,$00,$01,$00,$01,$80,$33
 $70FF DEFB $80,$AA,$FF,$00,$00,$80,$00,$00
 $7107 DEFB $0C,$06,$00,$CB,$64,$C0,$00,$00
 $710F DEFB $02,$00,$01,$80,$0F,$00,$55,$FC
 $7117 DEFB $00,$00,$80,$00,$00,$08,$0C,$00
 $711F DEFB $CB,$64,$00,$00,$00,$02,$00,$01
 $7127 DEFB $80,$1F,$00,$2B,$F0,$00,$00,$40
 $712F DEFB $00,$00,$08,$08,$00,$CB,$64,$00
 $7137 DEFB $00,$00,$02,$00,$01,$80,$3F,$80
 $713F DEFB $55,$C0,$00,$00,$40,$00,$00,$18
 $7147 DEFB $00,$00,$CB,$62,$00,$00,$00,$04
 $714F DEFB $00,$01,$80,$7F,$E0,$2B,$C0,$00
 $7157 DEFB $00,$20,$00,$00,$10,$00,$00,$C9
 $715F DEFB $01,$02,$06,$01,$25,$01,$37,$02
 $7167 DEFB $40,$0C,$57,$03,$72,$01,$8B,$01
 $716F DEFB $C9,$01,$02,$06,$01,$25,$01,$37
 $7177 DEFB $02,$40,$0D,$56,$03,$71,$02,$C9
 $717F DEFB $01,$02,$06,$01,$24,$01,$37,$02
 $7187 DEFB $3F,$0F,$56,$03,$70,$02,$C9,$01
 $718F DEFB $02,$06,$01,$24,$01,$37,$02,$3F
 $7197 DEFB $01,$41,$0E,$56,$03,$6F,$01,$C9
 $719F DEFB $01,$02,$06,$01,$24,$01,$37,$03
 $71A7 DEFB $3E,$02,$42,$0E,$56,$03,$6E,$01
 $71AF DEFB $CB,$62,$00,$00,$00,$04,$00,$00
 $71B7 DEFB $C6,$BF,$FF,$83,$80,$00,$04,$00
 $71BF DEFB $00,$00,$00,$00,$00,$CB,$32,$00
 $71C7 DEFB $00,$00,$06,$00,$00,$C6,$1F,$FC
 $71CF DEFB $43,$80,$00,$08,$00,$00,$00,$00
 $71D7 DEFB $00,$00,$CB,$31,$00,$00,$00,$02
 $71DF DEFB $00,$00,$ED,$1F,$FC,$37,$80,$00
 $71E7 DEFB $10,$00,$00,$00,$00,$00,$00,$C9
 $71EF DEFB $02,$02,$07,$01,$27,$01,$38,$06
 $71F7 DEFB $44,$09,$54,$05,$6A,$02,$C9,$02
 $71FF DEFB $02,$07,$01,$27,$02,$38,$02,$3B
 $7207 DEFB $02,$3E,$01,$44,$09,$55,$05,$6A
 $720F DEFB $02,$C9,$02,$02,$08,$01,$27,$01
 $7217 DEFB $38,$06,$45,$08,$57,$03,$6B,$02
 $721F DEFB $C9,$01,$02,$08,$01,$26,$01,$38
 $7227 DEFB $02,$3B,$02,$45,$08,$58,$03,$6C
 $722F DEFB $01,$C9,$01,$02,$08,$01,$38,$03
 $7237 DEFB $3C,$01,$46,$07,$57,$03,$6D,$01
 $723F DEFB $8A,$01,$C9,$01,$03,$08,$01,$24
 $7247 DEFB $01,$39,$01,$46,$07,$58,$03,$6D
 $724F DEFB $01,$8A,$01,$C9,$01,$02,$04,$01
 $7257 DEFB $09,$01,$23,$01,$39,$01,$47,$07
 $725F DEFB $59,$03,$6E,$01,$8A,$01,$C9,$01
 $7267 DEFB $02,$04,$02,$09,$01,$22,$01,$39
 $726F DEFB $01,$46,$08,$5A,$03,$6F,$01,$8A
 $7277 DEFB $01,$C9,$01,$02,$05,$02,$0A,$01
 $727F DEFB $39,$01,$46,$08,$58,$03,$5D,$02
 $7287 DEFB $70,$01,$8B,$02,$C9,$01,$02,$07
 $728F DEFB $01,$0A,$01,$39,$01,$46,$08,$57
 $7297 DEFB $03,$70,$01,$8B,$02,$C9,$60,$14
 $729F DEFB $60,$05,$30,$05,$60,$0A,$60,$04
 $72A7 DEFB $30,$07,$60,$09,$60,$03,$30,$09
 $72AF DEFB $60,$08,$60,$03,$30,$08,$60,$09
 $72B7 DEFB $60,$03,$30,$08,$60,$09,$60,$03
 $72BF DEFB $30,$08,$60,$09,$60,$04,$30,$07
 $72C7 DEFB $60,$09,$60,$04,$30,$07,$60,$09
 $72CF DEFB $60,$05,$30,$06,$78,$01,$60,$08
 $72D7 DEFB $60,$05,$30,$06,$28,$03,$38,$03
 $72DF DEFB $60,$03,$60,$02,$38,$04,$30,$04
 $72E7 DEFB $28,$03,$38,$06,$60,$01,$60,$01
 $72EF DEFB $38,$06,$30,$02,$28,$03,$38,$08
 $72F7 DEFB $38,$07,$28,$04,$38,$09,$38,$07
 $72FF DEFB $28,$04,$38,$09,$38,$07,$28,$04
 $7307 DEFB $38,$09,$00

; Graphics Data: Level 04 (Clive Sinclair)
;
; Compressed graphics data for level 4.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$730A,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-04) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-04-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_04
b$730A DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$C9
 $7312 DEFB $C9,$08,$90,$C9,$08,$90,$C9,$08
 $731A DEFB $40,$51,$47,$C9,$08,$3D,$54,$44
 $7322 DEFB $C9,$08,$3A,$57,$41,$C9,$08,$38
 $732A DEFB $59,$3F,$C9,$08,$36,$5A,$3E,$C9
 $7332 DEFB $08,$35,$5C,$3C,$C9,$39,$02,$5D
 $733A DEFB $02,$C9,$37,$03,$5F,$01,$C9,$36
 $7342 DEFB $04,$5F,$02,$C9,$35,$04,$60,$02
 $734A DEFB $C9,$34,$05,$61,$03,$C9,$33,$05
 $7352 DEFB $39,$01,$61,$04,$C9,$33,$06,$62
 $735A DEFB $04,$C9,$32,$05,$38,$02,$62,$05
 $7362 DEFB $C9,$32,$06,$39,$01,$63,$04,$C9
 $736A DEFB $31,$06,$38,$01,$3A,$01,$63,$05
 $7372 DEFB $C9,$31,$05,$37,$01,$39,$02,$64
 $737A DEFB $04,$C9,$31,$05,$37,$01,$39,$02
 $7382 DEFB $64,$04,$C9,$30,$05,$36,$01,$38
 $738A DEFB $01,$3A,$01,$65,$03,$C9,$30,$06
 $7392 DEFB $37,$01,$39,$01,$3B,$01,$65,$04
 $739A DEFB $C9,$30,$05,$36,$01,$38,$02,$3B
 $73A2 DEFB $01,$65,$04,$C9,$30,$07,$38,$01
 $73AA DEFB $3A,$01,$65,$04,$C9,$30,$06,$37
 $73B2 DEFB $01,$39,$01,$3B,$01,$65,$04,$C9
 $73BA DEFB $30,$07,$38,$01,$3A,$02,$65,$04
 $73C2 DEFB $C9,$30,$06,$37,$01,$39,$01,$3B
 $73CA DEFB $01,$66,$04,$C9,$30,$05,$36,$03
 $73D2 DEFB $3A,$02,$66,$04,$C9,$30,$06,$37
 $73DA DEFB $01,$39,$01,$3B,$01,$66,$04,$C9
 $73E2 DEFB $31,$04,$36,$01,$38,$01,$3A,$01
 $73EA DEFB $66,$04,$C9,$31,$06,$38,$01,$3A
 $73F2 DEFB $01,$66,$04,$C9,$31,$05,$37,$03
 $73FA DEFB $3C,$01,$66,$04,$CA,$00,$06,$7F
 $7402 DEFB $75,$9F,$FF,$3F,$90,$03,$A0,$00
 $740A DEFB $06,$00,$00,$CA,$00,$05,$03,$7E
 $7412 DEFB $E8,$0B,$80,$30,$03,$03,$F0,$00
 $741A DEFB $06,$00,$00,$CA,$00,$05,$07,$FE
 $7422 DEFB $C0,$5F,$C0,$8A,$00,$01,$86,$F0
 $742A DEFB $00,$06,$00,$00,$CA,$00,$05,$07
 $7432 DEFB $FF,$A0,$17,$C0,$18,$00,$01,$45
 $743A DEFB $F0,$00,$06,$00,$00,$CA,$00,$05
 $7442 DEFB $0F,$FE,$E0,$0B,$E1,$04,$00,$01
 $744A DEFB $05,$70,$00,$06,$00,$00,$CA,$00
 $7452 DEFB $05,$0F,$FF,$81,$E5,$FF,$13,$C0
 $745A DEFB $46,$F0,$00,$06,$00,$00,$CA,$00
 $7462 DEFB $05,$0F,$FF,$D7,$F9,$E3,$0F,$F0
 $746A DEFB $4F,$70,$00,$06,$00,$00,$CA,$00
 $7472 DEFB $05,$0F,$FF,$8D,$ED,$C1,$1B,$D8
 $747A DEFB $34,$F0,$00,$06,$00,$00,$CA,$00
 $7482 DEFB $05,$07,$FF,$C6,$D9,$C1,$0D,$90
 $748A DEFB $47,$70,$00,$06,$00,$00,$C9,$2D
 $7492 DEFB $0C,$42,$01,$47,$03,$56,$01,$61
 $749A DEFB $01,$65,$07,$C9,$2E,$0C,$46,$01
 $74A2 DEFB $48,$02,$50,$01,$64,$08,$C9,$2E
 $74AA DEFB $0B,$3A,$01,$47,$03,$50,$01,$54
 $74B2 DEFB $01,$61,$01,$64,$07,$C9,$2E,$0C
 $74BA DEFB $47,$03,$51,$01,$56,$01,$61,$01
 $74C2 DEFB $64,$02,$67,$04,$C9,$2F,$0A,$3A
 $74CA DEFB $01,$46,$04,$51,$01,$64,$02,$67
 $74D2 DEFB $04,$CA,$00,$05,$01,$FF,$60,$0F
 $74DA DEFB $C0,$10,$00,$01,$8A,$E0,$00,$06
 $74E2 DEFB $00,$00,$CA,$00,$06,$FF,$B8,$37
 $74EA DEFB $C0,$0C,$01,$0C,$E0,$00,$06,$00
 $74F2 DEFB $00,$CA,$00,$06,$FF,$E3,$8B,$C0
 $74FA DEFB $01,$F0,$1D,$C0,$00,$06,$00,$00
 $7502 DEFB $C9,$31,$07,$39,$01,$3B,$01,$45
 $750A DEFB $05,$63,$02,$66,$04,$C9,$31,$08
 $7512 DEFB $3A,$01,$3C,$01,$46,$04,$63,$03
 $751A DEFB $67,$03,$C9,$32,$08,$3B,$01,$45
 $7522 DEFB $04,$62,$07,$C9,$32,$07,$3A,$02
 $752A DEFB $45,$04,$62,$03,$66,$02,$C9,$33
 $7532 DEFB $07,$3B,$01,$45,$04,$61,$07,$C9
 $753A DEFB $35,$04,$3A,$01,$3C,$01,$45,$03
 $7542 DEFB $49,$01,$62,$05,$C9,$36,$06,$45
 $754A DEFB $04,$4F,$02,$61,$04,$C9,$36,$03
 $7552 DEFB $3A,$01,$3C,$01,$44,$06,$4E,$04
 $755A DEFB $60,$04,$C9,$36,$04,$3B,$01,$45
 $7562 DEFB $06,$4C,$02,$50,$02,$61,$03,$C9
 $756A DEFB $36,$05,$3C,$01,$44,$0A,$60,$04
 $7572 DEFB $C9,$37,$03,$3B,$01,$44,$06,$4C
 $757A DEFB $01,$4F,$03,$60,$04,$CA,$00,$06
 $7582 DEFB $01,$E8,$5F,$6B,$E8,$01,$F0,$00
 $758A DEFB $07,$00,$00,$C9,$37,$06,$40,$0D
 $7592 DEFB $4E,$01,$51,$06,$60,$03,$CA,$00
 $759A DEFB $07,$F5,$FF,$52,$BF,$81,$E0,$00
 $75A2 DEFB $07,$00,$00,$CA,$00,$07,$FD,$FD
 $75AA DEFB $FB,$7E,$C0,$E0,$00,$07,$00,$00
 $75B2 DEFB $CA,$00,$07,$EB,$CF,$FF,$F9,$E1
 $75BA DEFB $C0,$00,$07,$00,$00,$CA,$00,$07
 $75C2 DEFB $76,$A0,$1C,$02,$E3,$C0,$00,$07
 $75CA DEFB $00,$00,$C9,$39,$08,$58,$02,$5F
 $75D2 DEFB $03,$CA,$00,$07,$3F,$01,$E8,$E1
 $75DA DEFB $E3,$C0,$00,$07,$00,$00,$CA,$00
 $75E2 DEFB $07,$3F,$40,$BF,$62,$DB,$FC,$00
 $75EA DEFB $07,$00,$00,$CA,$00,$07,$7F,$69
 $75F2 DEFB $4B,$51,$7F,$FF,$C0,$00,$06,$00
 $75FA DEFB $00,$CA,$00,$06,$01,$FF,$DB,$4A
 $7602 DEFB $AD,$3F,$FF,$FC,$00,$06,$00,$00
 $760A DEFB $CA,$00,$06,$0F,$FF,$EE,$D2,$9B
 $7612 DEFB $FF,$FF,$FF,$80,$00,$05,$00,$00
 $761A DEFB $C9,$32,$14,$47,$06,$4E,$02,$51
 $7622 DEFB $23,$C9,$30,$13,$44,$07,$4C,$01
 $762A DEFB $4E,$02,$51,$27,$C9,$2D,$18,$46
 $7632 DEFB $03,$4A,$01,$4F,$01,$52,$01,$54
 $763A DEFB $27,$C9,$2A,$11,$3C,$04,$41,$07
 $7642 DEFB $53,$01,$55,$09,$5F,$1F,$C9,$27
 $764A DEFB $14,$3D,$03,$41,$05,$47,$02,$4A
 $7652 DEFB $03,$4E,$01,$51,$01,$53,$0B,$5F
 $765A DEFB $23,$C9,$24,$17,$3E,$04,$43,$09
 $7662 DEFB $4D,$04,$52,$0B,$5F,$26,$C9,$21
 $766A DEFB $1A,$3E,$1F,$5F,$29,$C9,$1E,$1E
 $7672 DEFB $3F,$06,$46,$10,$57,$05,$5E,$2C
 $767A DEFB $C9,$1B,$21,$40,$07,$48,$0C,$56
 $7682 DEFB $05,$5E,$2D,$C9,$18,$24,$41,$12
 $768A DEFB $54,$06,$5E,$2D,$C9,$15,$27,$42
 $7692 DEFB $13,$56,$01,$58,$02,$5E,$2E,$C9
 $769A DEFB $13,$29,$42,$0F,$52,$02,$55,$01
 $76A2 DEFB $57,$02,$5E,$2E,$C9,$12,$2A,$43
 $76AA DEFB $06,$4A,$01,$4C,$01,$4E,$01,$50
 $76B2 DEFB $01,$54,$03,$5E,$2E,$C9,$12,$2A
 $76BA DEFB $44,$04,$49,$01,$4B,$01,$4D,$01
 $76C2 DEFB $53,$03,$5E,$2F,$C9,$11,$2B,$45
 $76CA DEFB $04,$52,$03,$57,$01,$5E,$2F,$C9
 $76D2 DEFB $11,$2B,$46,$03,$50,$03,$56,$01
 $76DA DEFB $5D,$30,$C9,$11,$2C,$48,$03,$4C
 $76E2 DEFB $01,$4E,$04,$5D,$31,$C9,$10,$2D
 $76EA DEFB $4A,$07,$5D,$31,$C9,$10,$2D,$4C
 $76F2 DEFB $03,$5D,$31,$C9,$10,$2D,$4D,$01
 $76FA DEFB $5D,$31,$C9,$10,$2D,$4C,$04,$5D
 $7702 DEFB $32,$C9,$10,$2E,$4B,$06,$5D,$32
 $770A DEFB $C9,$10,$2E,$4A,$08,$5C,$33,$C9
 $7712 DEFB $0F,$2F,$49,$09,$5C,$33,$C9,$0F
 $771A DEFB $2F,$48,$0B,$5C,$33,$C9,$0F,$2F
 $7722 DEFB $48,$0A,$53,$01,$5C,$33,$C9,$0F
 $772A DEFB $30,$47,$02,$4A,$08,$53,$02,$5C
 $7732 DEFB $34,$C9,$0F,$31,$46,$01,$48,$09
 $773A DEFB $54,$01,$5C,$34,$C9,$0F,$30,$45
 $7742 DEFB $01,$47,$01,$4A,$07,$5C,$34,$C9
 $774A DEFB $0F,$30,$40,$01,$4B,$06,$56,$01
 $7752 DEFB $5C,$34,$C9,$0E,$31,$41,$01,$4B
 $775A DEFB $05,$57,$01,$5C,$34,$C9,$0E,$31
 $7762 DEFB $4A,$06,$5C,$34,$C9,$0E,$31,$4A
 $776A DEFB $06,$5C,$34,$C9,$0E,$31,$4A,$06
 $7772 DEFB $5C,$34,$C9,$0E,$32,$4A,$06,$5C
 $777A DEFB $35,$C9,$0E,$32,$49,$07,$5B,$36
 $7782 DEFB $C9,$0E,$32,$49,$08,$5B,$36,$C9
 $778A DEFB $0E,$32,$49,$08,$5B,$36,$C9,$0E
 $7792 DEFB $32,$49,$08,$5B,$36,$C9,$0D,$33
 $779A DEFB $49,$08,$5B,$36,$C9,$C9,$C9,$C9
 $77A2 DEFB $C9,$C9,$C9,$C9,$C9,$17,$14,$17
 $77AA DEFB $01,$30,$12,$17,$01,$17,$01,$60
 $77B2 DEFB $06,$30,$05,$60,$07,$17,$01,$17
 $77BA DEFB $01,$60,$05,$30,$07,$60,$06,$17
 $77C2 DEFB $01,$17,$01,$60,$05,$30,$07,$60
 $77CA DEFB $06,$17,$01,$17,$01,$60,$05,$30
 $77D2 DEFB $07,$60,$06,$17,$01,$17,$01,$60
 $77DA DEFB $05,$30,$07,$60,$06,$17,$01,$17
 $77E2 DEFB $01,$60,$06,$30,$06,$60,$06,$17
 $77EA DEFB $01,$17,$01,$60,$06,$30,$05,$60
 $77F2 DEFB $07,$17,$01,$17,$01,$60,$06,$30
 $77FA DEFB $05,$60,$07,$17,$01,$17,$01,$60
 $7802 DEFB $06,$38,$01,$30,$03,$38,$02,$60
 $780A DEFB $06,$17,$01,$17,$01,$60,$06,$38
 $7812 DEFB $02,$30,$02,$38,$03,$60,$05,$17
 $781A DEFB $01,$17,$01,$60,$06,$38,$07,$60
 $7822 DEFB $05,$17,$01,$17,$01,$60,$06,$38
 $782A DEFB $07,$60,$05,$17,$01,$17,$01,$60
 $7832 DEFB $06,$38,$07,$60,$05,$17,$01,$17
 $783A DEFB $14,$00

; Graphics Data: Level 05 (Alan Sugar)
;
; Compressed graphics data for level 5.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$783C,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-05) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-05-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_05
b$783C DEFB $C9,$C9,$38,$02,$3D,$05,$45,$09
 $7844 DEFB $C9,$36,$1B,$C9,$34,$1E,$C9,$31
 $784C DEFB $22,$C9,$30,$26,$C9,$2E,$2B,$C9
 $7854 DEFB $2B,$30,$C9,$2A,$32,$C9,$2A,$33
 $785C DEFB $C9,$28,$36,$C9,$27,$39,$C9,$27
 $7864 DEFB $3B,$C9,$25,$3E,$C9,$24,$40,$C9
 $786C DEFB $23,$41,$C9,$23,$43,$C9,$22,$44
 $7874 DEFB $C9,$21,$46,$C9,$20,$48,$C9,$1F
 $787C DEFB $4A,$C9,$1F,$4A,$C9,$1F,$4A,$C9
 $7884 DEFB $1E,$4B,$C9,$1E,$2A,$4A,$1F,$C9
 $788C DEFB $1E,$25,$4D,$01,$4F,$01,$51,$02
 $7894 DEFB $54,$16,$C9,$1E,$11,$33,$02,$3A
 $789C DEFB $01,$3C,$04,$53,$01,$55,$16,$C9
 $78A4 DEFB $1E,$0F,$54,$01,$56,$15,$C9,$1D
 $78AC DEFB $0F,$56,$16,$C9,$1D,$0F,$57,$16
 $78B4 DEFB $C9,$1C,$0F,$58,$16,$C9,$1C,$0E
 $78BC DEFB $58,$16,$C9,$1B,$0F,$59,$15,$C9
 $78C4 DEFB $1B,$0E,$59,$15,$C9,$1A,$0F,$5A
 $78CC DEFB $14,$C9,$19,$10,$5A,$15,$C9,$19
 $78D4 DEFB $10,$5A,$15,$C9,$19,$10,$5B,$14
 $78DC DEFB $C9,$19,$10,$5B,$14,$C9,$1A,$0F
 $78E4 DEFB $5B,$14,$C9,$1A,$0F,$5C,$14,$C9
 $78EC DEFB $1A,$0F,$5D,$13,$C9,$1A,$0F,$4F
 $78F4 DEFB $01,$51,$01,$5C,$14,$C9,$19,$10
 $78FC DEFB $4A,$01,$4C,$02,$4F,$02,$52,$01
 $7904 DEFB $5C,$14,$C9,$19,$10,$2E,$01,$30
 $790C DEFB $01,$49,$05,$4F,$03,$54,$01,$5C
 $7914 DEFB $14,$CB,$00,$00,$00,$7F,$FF,$85
 $791C DEFB $5A,$00,$01,$BA,$30,$07,$FF,$FF
 $7924 DEFB $80,$00,$00,$00,$00,$00,$C9,$19
 $792C DEFB $10,$2D,$02,$30,$02,$33,$04,$38
 $7934 DEFB $01,$46,$05,$55,$01,$5D,$14,$CB
 $793C DEFB $00,$00,$00,$FF,$FF,$0A,$15,$80
 $7944 DEFB $05,$00,$00,$03,$FF,$FF,$80,$00
 $794C DEFB $00,$00,$00,$00,$C9,$18,$10,$2C
 $7954 DEFB $02,$36,$01,$38,$02,$45,$02,$4B
 $795C DEFB $04,$5F,$12,$C9,$18,$10,$33,$03
 $7964 DEFB $45,$01,$49,$09,$5F,$12,$C9,$19
 $796C DEFB $0F,$30,$08,$47,$02,$4C,$04,$52
 $7974 DEFB $03,$5E,$13,$C9,$19,$0F,$2E,$03
 $797C DEFB $33,$04,$38,$02,$47,$01,$4D,$02
 $7984 DEFB $51,$02,$5F,$12,$C9,$1A,$0E,$31
 $798C DEFB $01,$34,$02,$39,$01,$5E,$13,$C9
 $7994 DEFB $19,$0F,$37,$01,$5E,$01,$60,$11
 $799C DEFB $C9,$19,$0F,$35,$01,$5D,$01,$5F
 $79A4 DEFB $11,$C9,$18,$10,$5E,$01,$60,$10
 $79AC DEFB $C9,$19,$0F,$5E,$01,$60,$10,$C9
 $79B4 DEFB $19,$0F,$5F,$11,$C9,$19,$0F,$5E
 $79BC DEFB $01,$60,$10,$C9,$19,$0F,$5C,$01
 $79C4 DEFB $5E,$12,$C9,$19,$0F,$5D,$01,$5F
 $79CC DEFB $11,$C9,$19,$0F,$5C,$01,$5E,$12
 $79D4 DEFB $C9,$1A,$0E,$47,$01,$5B,$14,$C9
 $79DC DEFB $1A,$0F,$48,$01,$5A,$15,$C9,$1B
 $79E4 DEFB $0E,$48,$01,$59,$01,$5B,$06,$62
 $79EC DEFB $0C,$C9,$1C,$0D,$39,$01,$47,$02
 $79F4 DEFB $4C,$01,$5A,$13,$C9,$1D,$0C,$3A
 $79FC DEFB $04,$3F,$01,$41,$01,$43,$04,$4D
 $7A04 DEFB $01,$5A,$08,$64,$09,$C9,$1E,$0B
 $7A0C DEFB $3E,$02,$41,$02,$4E,$01,$59,$01
 $7A14 DEFB $5B,$06,$62,$0B,$C9,$20,$09,$3C
 $7A1C DEFB $02,$3F,$02,$42,$02,$45,$01,$58
 $7A24 DEFB $01,$5A,$08,$64,$09,$CB,$00,$00
 $7A2C DEFB $00,$00,$7F,$C0,$00,$6A,$AA,$00
 $7A34 DEFB $00,$5F,$BF,$F0,$00,$00,$00,$00
 $7A3C DEFB $00,$00,$CB,$00,$00,$00,$00,$1F
 $7A44 DEFB $C0,$00,$B7,$76,$AA,$00,$7F,$FF
 $7A4C DEFB $F0,$00,$00,$00,$00,$00,$00,$CB
 $7A54 DEFB $00,$00,$00,$00,$1F,$E0,$03,$6D
 $7A5C DEFB $2D,$6D,$00,$BF,$FF,$E0,$00,$00
 $7A64 DEFB $00,$00,$00,$00,$CA,$00,$04,$0F
 $7A6C DEFB $D0,$05,$D9,$B6,$DB,$42,$FF,$FF
 $7A74 DEFB $C0,$00,$06,$00,$00,$CA,$00,$04
 $7A7C DEFB $0F,$E0,$1B,$52,$15,$FF,$41,$FF
 $7A84 DEFB $FF,$C0,$00,$06,$00,$00,$CA,$00
 $7A8C DEFB $04,$07,$F0,$36,$FF,$7F,$E5,$D7
 $7A94 DEFB $FF,$FF,$80,$00,$06,$00,$00,$CA
 $7A9C DEFB $00,$04,$07,$F4,$38,$C3,$F0,$03
 $7AA4 DEFB $A7,$FF,$FF,$80,$00,$06,$00,$00
 $7AAC DEFB $C9,$25,$08,$2E,$01,$30,$02,$33
 $7AB4 DEFB $02,$4F,$02,$52,$01,$54,$15,$C9
 $7ABC DEFB $26,$08,$2F,$01,$32,$02,$35,$01
 $7AC4 DEFB $4E,$01,$50,$02,$53,$16,$C9,$27
 $7ACC DEFB $09,$31,$03,$3B,$01,$47,$01,$4F
 $7AD4 DEFB $19,$CA,$00,$05,$FF,$B0,$06,$8D
 $7ADC DEFB $03,$7F,$FF,$FF,$00,$07,$00,$00
 $7AE4 DEFB $CA,$00,$05,$7F,$D0,$0B,$5C,$06
 $7AEC DEFB $FF,$FF,$FE,$00,$07,$00,$00,$C9
 $7AF4 DEFB $2A,$0B,$3D,$01,$3F,$02,$42,$01
 $7AFC DEFB $44,$01,$4D,$18,$C9,$2C,$09,$36
 $7B04 DEFB $01,$3C,$08,$4B,$02,$4E,$15,$C9
 $7B0C DEFB $2D,$0A,$3D,$03,$42,$01,$44,$01
 $7B14 DEFB $4A,$01,$4C,$14,$C9,$2E,$09,$38
 $7B1C DEFB $01,$47,$01,$49,$01,$4B,$12,$5F
 $7B24 DEFB $02,$CA,$00,$06,$FF,$D0,$0A,$BF
 $7B2C DEFB $FF,$F1,$C0,$00,$07,$00,$00,$C9
 $7B34 DEFB $30,$09,$3A,$03,$3E,$01,$40,$02
 $7B3C DEFB $43,$18,$5F,$04,$C9,$30,$0A,$3B
 $7B44 DEFB $01,$3D,$06,$44,$01,$46,$14,$5F
 $7B4C DEFB $05,$C9,$32,$0A,$3E,$05,$45,$14
 $7B54 DEFB $5F,$06,$C9,$34,$0F,$44,$14,$5E
 $7B5C DEFB $08,$C9,$34,$23,$5E,$09,$C9,$33
 $7B64 DEFB $23,$5E,$0B,$C9,$33,$21,$5D,$0F
 $7B6C DEFB $C9,$32,$21,$5D,$13,$C9,$31,$20
 $7B74 DEFB $5C,$18,$C9,$2F,$06,$36,$19,$5C
 $7B7C DEFB $1C,$C9,$2C,$09,$38,$15,$5B,$20
 $7B84 DEFB $C9,$28,$0C,$39,$13,$5B,$23,$C9
 $7B8C DEFB $24,$10,$3B,$0F,$5A,$27,$C9,$1F
 $7B94 DEFB $14,$3C,$0C,$5A,$2A,$C9,$1B,$18
 $7B9C DEFB $3E,$08,$59,$2E,$C9,$16,$1C,$3D
 $7BA4 DEFB $07,$59,$31,$C9,$12,$20,$3B,$08
 $7BAC DEFB $58,$35,$C9,$0F,$22,$3A,$0A,$58
 $7BB4 DEFB $37,$C9,$0C,$25,$3A,$0B,$57,$39
 $7BBC DEFB $C9,$0B,$26,$39,$0D,$57,$39,$C9
 $7BC4 DEFB $0B,$25,$38,$01,$3C,$0A,$56,$3A
 $7BCC DEFB $C9,$0A,$26,$37,$01,$3C,$0B,$56
 $7BD4 DEFB $3B,$C9,$0A,$26,$37,$01,$3D,$0B
 $7BDC DEFB $55,$3C,$C9,$09,$27,$36,$01,$3D
 $7BE4 DEFB $0C,$55,$3C,$C9,$09,$26,$36,$01
 $7BEC DEFB $3E,$09,$48,$01,$54,$3D,$C9,$09
 $7BF4 DEFB $26,$35,$01,$3E,$09,$49,$01,$54
 $7BFC DEFB $3E,$C9,$09,$26,$3E,$08,$49,$01
 $7C04 DEFB $54,$16,$6D,$25,$C9,$08,$27,$35
 $7C0C DEFB $01,$3E,$08,$53,$17,$70,$22,$C9
 $7C14 DEFB $08,$27,$34,$01,$3E,$08,$53,$17
 $7C1C DEFB $73,$1F,$C9,$08,$27,$3E,$07,$52
 $7C24 DEFB $17,$74,$1E,$C9,$08,$26,$3E,$07
 $7C2C DEFB $52,$17,$6C,$02,$74,$1F,$C9,$08
 $7C34 DEFB $26,$3D,$08,$51,$18,$6B,$05,$74
 $7C3C DEFB $1F,$C9,$07,$27,$3D,$08,$51,$18
 $7C44 DEFB $6E,$03,$74,$1F,$C9,$07,$27,$3C
 $7C4C DEFB $09,$51,$18,$74,$1F,$C9,$07,$27
 $7C54 DEFB $3C,$0A,$50,$19,$6E,$01,$74,$1F
 $7C5C DEFB $C9,$07,$27,$3B,$0B,$50,$1A,$6E
 $7C64 DEFB $02,$74,$1F,$C9,$07,$27,$3B,$0B
 $7C6C DEFB $50,$1A,$6D,$03,$75,$1E,$C9,$07
 $7C74 DEFB $27,$3B,$0B,$4F,$1A,$6D,$01,$75
 $7C7C DEFB $1E,$C9,$07,$27,$3A,$0D,$4F,$1C
 $7C84 DEFB $75,$1E,$C9,$07,$27,$3A,$0D,$4F
 $7C8C DEFB $1F,$70,$01,$73,$01,$75,$1E,$C9
 $7C94 DEFB $07,$27,$3A,$0D,$4E,$25,$75,$1E
 $7C9C DEFB $C9,$07,$27,$3A,$0D,$4E,$45,$C9
 $7CA4 DEFB $50,$14,$50,$14,$50,$14,$50,$05
 $7CAC DEFB $30,$08,$50,$07,$50,$05,$30,$08
 $7CB4 DEFB $50,$07,$50,$05,$30,$08,$50,$07
 $7CBC DEFB $50,$05,$30,$08,$50,$07,$50,$05
 $7CC4 DEFB $30,$08,$50,$07,$50,$05,$30,$08
 $7CCC DEFB $50,$07,$50,$05,$30,$08,$50,$07
 $7CD4 DEFB $50,$06,$30,$05,$38,$01,$50,$08
 $7CDC DEFB $50,$07,$30,$03,$38,$02,$50,$08
 $7CE4 DEFB $50,$06,$38,$06,$50,$08,$50,$05
 $7CEC DEFB $38,$0A,$50,$05,$50,$05,$38,$0B
 $7CF4 DEFB $50,$04,$50,$05,$38,$0B,$50,$04
 $7CFC DEFB $00

; Graphics Data: Level 06 (Humphrey Bogart)
;
; Compressed graphics data for level 6.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$7CFD,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-06) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-06-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_06
b$7CFD DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$33
 $7D05 DEFB $06,$C9,$2F,$0D,$C9,$2B,$14,$C9
 $7D0D DEFB $28,$07,$30,$12,$C9,$24,$07,$2C
 $7D15 DEFB $01,$2E,$16,$C9,$22,$08,$2B,$01
 $7D1D DEFB $2D,$19,$C9,$21,$26,$C9,$20,$28
 $7D25 DEFB $C9,$1F,$2A,$C9,$1E,$2D,$C9,$1D
 $7D2D DEFB $2F,$C9,$1D,$30,$C9,$1C,$32,$C9
 $7D35 DEFB $1C,$33,$C9,$1C,$1D,$3B,$01,$3F
 $7D3D DEFB $10,$C9,$1B,$1B,$40,$10,$C9,$1B
 $7D45 DEFB $17,$42,$0F,$C9,$1B,$14,$42,$0F
 $7D4D DEFB $C9,$1B,$12,$43,$0F,$C9,$1A,$11
 $7D55 DEFB $44,$0F,$C9,$1A,$06,$22,$06,$45
 $7D5D DEFB $0E,$C9,$1A,$05,$23,$03,$47,$0D
 $7D65 DEFB $C9,$1A,$03,$48,$0C,$C9,$1A,$03
 $7D6D DEFB $49,$0C,$C9,$1A,$02,$49,$0C,$C9
 $7D75 DEFB $1A,$02,$49,$0C,$C9,$1B,$01,$49
 $7D7D DEFB $0C,$C9,$1B,$01,$48,$0D,$C9,$1B
 $7D85 DEFB $01,$48,$0E,$C9,$1B,$02,$48,$0E
 $7D8D DEFB $C9,$1B,$02,$48,$0E,$C9,$1B,$02
 $7D95 DEFB $48,$0D,$C9,$1B,$02,$1E,$01,$46
 $7D9D DEFB $0F,$C9,$1B,$03,$45,$10,$C9,$1B
 $7DA5 DEFB $03,$1F,$01,$21,$01,$2F,$02,$37
 $7DAD DEFB $02,$45,$10,$C9,$1B,$06,$26,$01
 $7DB5 DEFB $3A,$01,$3D,$01,$46,$0F,$C9,$1C
 $7DBD DEFB $02,$1F,$01,$25,$01,$47,$10,$C9
 $7DC5 DEFB $1C,$03,$22,$02,$48,$10,$C9,$1C
 $7DCD DEFB $03,$20,$02,$35,$05,$48,$0B,$56
 $7DD5 DEFB $03,$C9,$1C,$04,$32,$0B,$48,$0A
 $7DDD DEFB $55,$04,$C9,$1C,$03,$30,$0F,$49
 $7DE5 DEFB $08,$57,$03,$C9,$1C,$02,$28,$01
 $7DED DEFB $2F,$0B,$3E,$02,$4A,$07,$57,$03
 $7DF5 DEFB $C9,$1D,$02,$23,$06,$2F,$06,$4B
 $7DFD DEFB $06,$58,$02,$C9,$1D,$02,$21,$07
 $7E05 DEFB $2F,$02,$32,$01,$3A,$02,$4B,$05
 $7E0D DEFB $59,$02,$C9,$1D,$02,$20,$09,$2F
 $7E15 DEFB $02,$38,$05,$3E,$01,$4B,$05,$59
 $7E1D DEFB $02,$CA,$00,$03,$06,$F7,$C0,$01
 $7E25 DEFB $7D,$80,$1F,$18,$60,$00,$08,$00
 $7E2D DEFB $00,$C9,$1D,$04,$25,$05,$35,$02
 $7E35 DEFB $3A,$03,$4B,$04,$52,$04,$58,$03
 $7E3D DEFB $C9,$1D,$02,$23,$08,$34,$03,$4B
 $7E45 DEFB $03,$53,$03,$58,$03,$C9,$1D,$03
 $7E4D DEFB $21,$0A,$3B,$01,$4D,$01,$55,$01
 $7E55 DEFB $58,$02,$C9,$1D,$05,$24,$07,$55
 $7E5D DEFB $01,$58,$02,$C9,$1D,$06,$28,$03
 $7E65 DEFB $36,$01,$54,$01,$58,$02,$C9,$1D
 $7E6D DEFB $03,$21,$02,$24,$01,$28,$03,$51
 $7E75 DEFB $03,$58,$02,$C9,$1D,$02,$29,$02
 $7E7D DEFB $51,$01,$58,$02,$C9,$1D,$02,$28
 $7E85 DEFB $02,$57,$02,$C9,$1D,$02,$28,$02
 $7E8D DEFB $57,$02,$C9,$1D,$02,$28,$02,$56
 $7E95 DEFB $02,$C9,$1E,$02,$28,$02,$56,$02
 $7E9D DEFB $C9,$1E,$02,$28,$02,$55,$02,$C9
 $7EA5 DEFB $1E,$02,$27,$02,$50,$02,$54,$03
 $7EAD DEFB $C9,$1F,$02,$27,$02,$50,$06,$C9
 $7EB5 DEFB $1F,$02,$27,$02,$33,$01,$50,$05
 $7EBD DEFB $C9,$1F,$02,$27,$01,$34,$01,$50
 $7EC5 DEFB $05,$C9,$20,$02,$26,$02,$34,$01
 $7ECD DEFB $50,$05,$C9,$20,$02,$26,$02,$30
 $7ED5 DEFB $02,$3A,$01,$51,$04,$C9,$21,$02
 $7EDD DEFB $26,$03,$2F,$04,$3B,$01,$51,$04
 $7EE5 DEFB $C9,$21,$02,$26,$06,$2D,$02,$50
 $7EED DEFB $05,$C9,$22,$02,$26,$07,$50,$02
 $7EF5 DEFB $53,$03,$C9,$22,$02,$26,$07,$2E
 $7EFD DEFB $02,$4F,$01,$53,$03,$C9,$23,$02
 $7F05 DEFB $26,$07,$2F,$02,$4E,$02,$54,$03
 $7F0D DEFB $C9,$23,$09,$2F,$02,$4F,$02,$54
 $7F15 DEFB $04,$C9,$24,$08,$30,$01,$3C,$02
 $7F1D DEFB $4E,$02,$53,$06,$C9,$25,$07,$39
 $7F25 DEFB $04,$4E,$01,$53,$02,$56,$03,$C9
 $7F2D DEFB $25,$06,$2C,$03,$32,$09,$52,$02
 $7F35 DEFB $58,$02,$C9,$26,$13,$52,$02,$58
 $7F3D DEFB $03,$C9,$26,$0E,$51,$02,$59,$03
 $7F45 DEFB $C9,$26,$0A,$4F,$03,$59,$03,$C9
 $7F4D DEFB $27,$07,$4E,$03,$58,$05,$C9,$27
 $7F55 DEFB $08,$4D,$03,$58,$06,$C9,$28,$08
 $7F5D DEFB $34,$01,$38,$01,$4C,$03,$57,$08
 $7F65 DEFB $C9,$29,$09,$33,$04,$4B,$03,$57
 $7F6D DEFB $09,$C9,$29,$10,$48,$01,$4A,$03
 $7F75 DEFB $56,$0A,$C9,$2A,$09,$45,$01,$47
 $7F7D DEFB $05,$55,$0C,$C9,$2A,$08,$45,$06
 $7F85 DEFB $54,$0E,$C9,$2B,$06,$44,$06,$53
 $7F8D DEFB $10,$C9,$2C,$05,$42,$06,$52,$12
 $7F95 DEFB $C9,$2D,$05,$41,$06,$51,$15,$C9
 $7F9D DEFB $2E,$04,$3E,$07,$51,$16,$C9,$2F
 $7FA5 DEFB $04,$36,$03,$3B,$08,$50,$19,$C9
 $7FAD DEFB $30,$04,$35,$0D,$4F,$1C,$C9,$31
 $7FB5 DEFB $10,$4F,$1E,$C9,$32,$0D,$4E,$20
 $7FBD DEFB $C9,$31,$0D,$4D,$23,$C9,$2F,$05
 $7FC5 DEFB $35,$08,$4C,$26,$C9,$2D,$07,$36
 $7FCD DEFB $05,$4C,$28,$C9,$2A,$09,$37,$01
 $7FD5 DEFB $4B,$2B,$C9,$27,$0C,$36,$03,$4A
 $7FDD DEFB $2E,$C9,$25,$0E,$35,$05,$49,$32
 $7FE5 DEFB $C9,$23,$0F,$35,$05,$49,$34,$C9
 $7FED DEFB $21,$11,$34,$07,$48,$38,$C9,$1F
 $7FF5 DEFB $13,$34,$07,$47,$3B,$C9,$1D,$15
 $7FFD DEFB $33,$08,$47,$3D,$C9,$1C,$16,$33
 $8005 DEFB $08,$46,$40,$C9,$1B,$16,$33,$08
 $800D DEFB $45,$43,$C9,$1B,$16,$33,$09,$44
 $8015 DEFB $45,$C9,$1A,$17,$33,$07,$3C,$01
 $801D DEFB $43,$47,$C9,$1A,$16,$34,$06,$3D
 $8025 DEFB $01,$43,$48,$C9,$19,$17,$33,$06
 $802D DEFB $3D,$01,$42,$4A,$C9,$19,$16,$33
 $8035 DEFB $06,$3E,$01,$41,$4D,$C9,$19,$16
 $803D DEFB $33,$07,$3F,$50,$C9,$19,$16,$33
 $8045 DEFB $07,$3F,$51,$C9,$18,$17,$32,$08
 $804D DEFB $40,$51,$C9,$18,$17,$32,$08,$40
 $8055 DEFB $52,$C9,$18,$16,$31,$09,$40,$52
 $805D DEFB $C9,$17,$17,$31,$09,$3F,$54,$C9
 $8065 DEFB $17,$17,$30,$0A,$3F,$56,$C9,$17
 $806D DEFB $17,$30,$0A,$3E,$58,$C9,$17,$16
 $8075 DEFB $30,$0A,$3E,$59,$C9,$17,$16,$2F
 $807D DEFB $0B,$3D,$5A,$C9,$16,$17,$2F,$0B
 $8085 DEFB $3D,$5B,$C9,$16,$17,$2F,$0A,$3C
 $808D DEFB $5C,$C9,$16,$17,$2E,$0B,$3C,$5D
 $8095 DEFB $C9,$16,$17,$2E,$0B,$3B,$5E,$C9
 $809D DEFB $38,$14,$38,$14,$38,$14,$38,$14
 $80A5 DEFB $38,$14,$38,$02,$78,$02,$38,$07
 $80AD DEFB $78,$06,$38,$03,$38,$02,$78,$02
 $80B5 DEFB $38,$07,$78,$06,$38,$03,$38,$02
 $80BD DEFB $78,$02,$38,$07,$78,$06,$38,$03
 $80C5 DEFB $38,$02,$78,$02,$38,$06,$78,$07
 $80CD DEFB $38,$03,$38,$02,$78,$03,$38,$06
 $80D5 DEFB $78,$06,$38,$03,$38,$02,$78,$03
 $80DD DEFB $38,$06,$78,$06,$38,$03,$38,$02
 $80E5 DEFB $78,$04,$38,$05,$78,$06,$38,$03
 $80ED DEFB $38,$02,$78,$04,$38,$04,$78,$07
 $80F5 DEFB $38,$03,$38,$02,$78,$04,$38,$04
 $80FD DEFB $78,$07,$38,$03,$38,$14,$38,$14
 $8105 DEFB $00

; Graphics Data: Level 07 (Charles And Diana)
;
; Compressed graphics data for level 7.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$8106,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-07) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-07-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_07
b$8106 DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$1C
 $810E DEFB $09,$C9,$18,$10,$C9,$16,$16,$C9
 $8116 DEFB $14,$1A,$C9,$12,$1E,$C9,$10,$22
 $811E DEFB $C9,$0F,$25,$6E,$08,$C9,$0E,$28
 $8126 DEFB $68,$0F,$7C,$02,$C9,$0C,$2C,$65
 $812E DEFB $14,$7B,$05,$C9,$0B,$2E,$63,$1F
 $8136 DEFB $C9,$0A,$30,$60,$09,$70,$14,$C9
 $813E DEFB $09,$33,$5E,$04,$74,$06,$7E,$09
 $8146 DEFB $C9,$09,$34,$5D,$03,$77,$03,$7D
 $814E DEFB $0D,$C9,$08,$36,$5B,$04,$70,$02
 $8156 DEFB $77,$04,$7E,$0E,$C9,$07,$37,$5A
 $815E DEFB $06,$6E,$06,$78,$04,$7D,$11,$C9
 $8166 DEFB $07,$38,$5A,$07,$69,$0D,$78,$07
 $816E DEFB $82,$0D,$C9,$07,$39,$59,$05,$67
 $8176 DEFB $0F,$79,$04,$81,$0F,$C9,$06,$3A
 $817E DEFB $58,$05,$65,$13,$79,$05,$8A,$08
 $8186 DEFB $C9,$06,$13,$21,$20,$56,$08,$66
 $818E DEFB $18,$8B,$07,$C9,$05,$12,$24,$1D
 $8196 DEFB $56,$09,$65,$19,$8E,$05,$C9,$05
 $819E DEFB $10,$25,$03,$2D,$02,$30,$11,$55
 $81A6 DEFB $06,$5C,$03,$65,$19,$8F,$04,$C9
 $81AE DEFB $05,$0F,$30,$01,$32,$0F,$54,$04
 $81B6 DEFB $59,$02,$5D,$03,$63,$1B,$87,$02
 $81BE DEFB $8F,$04,$C9,$04,$0F,$31,$01,$33
 $81C6 DEFB $0F,$54,$04,$59,$02,$5E,$02,$62
 $81CE DEFB $1C,$89,$05,$8F,$04,$C9,$04,$0F
 $81D6 DEFB $33,$01,$35,$01,$37,$0B,$53,$04
 $81DE DEFB $59,$02,$5E,$02,$64,$1C,$8B,$09
 $81E6 DEFB $CB,$1F,$FF,$C0,$00,$00,$00,$2A
 $81EE DEFB $FF,$C0,$00,$3E,$61,$9F,$FF,$FF
 $81F6 DEFB $FF,$80,$07,$F8,$00,$CB,$1F,$FF
 $81FE DEFB $C0,$00,$00,$00,$15,$7F,$C0,$00
 $8206 DEFB $3D,$B0,$87,$FF,$FF,$FF,$E3,$00
 $820E DEFB $FC,$00,$CB,$1F,$FF,$80,$00,$00
 $8216 DEFB $00,$0A,$FF,$C0,$00,$7F,$30,$87
 $821E DEFB $FF,$FF,$FF,$E3,$C0,$7E,$00,$CB
 $8226 DEFB $3F,$FE,$C0,$00,$00,$00,$15,$FF
 $822E DEFB $E0,$00,$7E,$30,$4F,$FF,$FF,$FF
 $8236 DEFB $E1,$F0,$3F,$00,$C9,$02,$0F,$34
 $823E DEFB $01,$36,$01,$38,$0B,$50,$06,$5A
 $8246 DEFB $02,$64,$20,$89,$05,$92,$06,$CB
 $824E DEFB $3F,$FF,$00,$00,$00,$00,$15,$7F
 $8256 DEFB $E0,$00,$E0,$3C,$07,$FF,$FF,$FF
 $825E DEFB $F0,$0F,$3F,$00,$CB,$3F,$FE,$80
 $8266 DEFB $00,$00,$00,$0A,$BF,$E0,$01,$80
 $826E DEFB $9E,$01,$FF,$FF,$FF,$F0,$03,$DF
 $8276 DEFB $80,$CB,$3F,$FD,$00,$00,$00,$00
 $827E DEFB $15,$7F,$E0,$01,$81,$98,$00,$3F
 $8286 DEFB $FF,$FF,$F0,$1B,$FF,$80,$CB,$FF
 $828E DEFB $FD,$00,$00,$00,$00,$0A,$BF,$E0
 $8296 DEFB $03,$03,$9C,$00,$0F,$FF,$FF,$F0
 $829E DEFB $1F,$FF,$80,$CB,$FF,$FA,$00,$00
 $82A6 DEFB $00,$00,$05,$7F,$E0,$03,$03,$8F
 $82AE DEFB $00,$1F,$FF,$FF,$FC,$0F,$FF,$80
 $82B6 DEFB $CB,$BF,$FE,$00,$00,$00,$00,$0A
 $82BE DEFB $FF,$E0,$06,$03,$0F,$C3,$BF,$FF
 $82C6 DEFB $FF,$FF,$07,$FF,$C0,$CB,$1F,$FD
 $82CE DEFB $00,$00,$00,$00,$05,$7F,$E0,$0F
 $82D6 DEFB $01,$8E,$00,$FF,$FF,$FF,$C7,$01
 $82DE DEFB $FF,$C0,$CB,$5F,$FC,$00,$00,$00
 $82E6 DEFB $00,$02,$FF,$E0,$1F,$C1,$C3,$00
 $82EE DEFB $3F,$E0,$FF,$87,$00,$FF,$C0,$CB
 $82F6 DEFB $2F,$FA,$00,$00,$00,$00,$05,$7F
 $82FE DEFB $C0,$1F,$80,$C3,$01,$FF,$00,$7C
 $8306 DEFB $0B,$80,$3F,$E0,$CB,$07,$F8,$00
 $830E DEFB $5D,$40,$00,$02,$BF,$C0,$3F,$00
 $8316 DEFB $C1,$C7,$F8,$00,$3C,$BD,$C0,$1F
 $831E DEFB $E0,$CB,$17,$F4,$02,$BF,$B0,$00
 $8326 DEFB $05,$7F,$C0,$3A,$00,$20,$7F,$80
 $832E DEFB $00,$FE,$3C,$E0,$0F,$F0,$CB,$0B
 $8336 DEFB $F8,$05,$7F,$F8,$00,$2F,$BF,$C0
 $833E DEFB $3C,$00,$00,$1F,$F8,$0F,$FE,$1E
 $8346 DEFB $70,$07,$F8,$CB,$03,$F0,$0A,$25
 $834E DEFB $74,$03,$57,$FF,$C0,$7F,$3C,$00
 $8356 DEFB $03,$C0,$1F,$FF,$07,$1C,$03,$FC
 $835E DEFB $CB,$01,$F8,$00,$00,$08,$15,$FF
 $8366 DEFB $FF,$E0,$FF,$FF,$00,$00,$00,$7F
 $836E DEFB $FF,$03,$0F,$80,$FC,$CB,$01,$F0
 $8376 DEFB $00,$1E,$00,$2F,$FF,$FF,$F3,$FF
 $837E DEFB $FF,$80,$00,$01,$FF,$57,$03,$87
 $8386 DEFB $C0,$7C,$CB,$31,$D0,$00,$7F,$80
 $838E DEFB $1F,$AF,$FF,$F7,$CF,$07,$C3,$C0
 $8396 DEFB $07,$FE,$AF,$81,$80,$FC,$3E,$CB
 $839E DEFB $78,$E0,$01,$BD,$C0,$7E,$17,$FF
 $83A6 DEFB $FF,$80,$01,$EF,$E0,$15,$D5,$57
 $83AE DEFB $80,$C0,$24,$1E,$CB,$64,$E0,$00
 $83B6 DEFB $3F,$60,$7C,$FF,$FF,$FF,$00,$00
 $83BE DEFB $FF,$00,$27,$AA,$8B,$E0,$60,$00
 $83C6 DEFB $1F,$CB,$5A,$F0,$00,$00,$E0,$FB
 $83CE DEFB $FF,$FF,$FF,$00,$00,$38,$00,$1D
 $83D6 DEFB $50,$07,$F8,$30,$00,$7F,$CB,$2C
 $83DE DEFB $E0,$00,$00,$40,$FE,$FF,$FF,$FE
 $83E6 DEFB $00,$00,$00,$00,$7E,$00,$01,$FC
 $83EE DEFB $30,$01,$FF,$CB,$30,$E0,$00,$02
 $83F6 DEFB $80,$FB,$FF,$FF,$FC,$00,$00,$03
 $83FE DEFB $03,$FC,$00,$02,$FE,$18,$07,$FF
 $8406 DEFB $CB,$A8,$C0,$00,$01,$00,$FC,$17
 $840E DEFB $FF,$F0,$00,$00,$0E,$3F,$F0,$00
 $8416 DEFB $01,$7F,$0C,$0F,$FF,$CB,$18,$C0
 $841E DEFB $00,$02,$00,$FA,$2D,$FF,$F0,$00
 $8426 DEFB $00,$1C,$FF,$E0,$00,$00,$BF,$0C
 $842E DEFB $07,$FF,$CB,$8C,$C0,$00,$00,$00
 $8436 DEFB $7D,$0B,$FF,$E0,$00,$00,$7F,$FF
 $843E DEFB $80,$00,$00,$7F,$86,$07,$F9,$CB
 $8446 DEFB $8C,$40,$00,$00,$00,$7A,$01,$7F
 $844E DEFB $E0,$00,$03,$FF,$FF,$00,$00,$00
 $8456 DEFB $BF,$C3,$0F,$F1,$CB,$46,$00,$00
 $845E DEFB $00,$00,$7C,$00,$BF,$F0,$00,$3F
 $8466 DEFB $FF,$FC,$00,$00,$00,$5F,$C3,$1F
 $846E DEFB $F1,$CB,$44,$00,$00,$00,$00,$7B
 $8476 DEFB $00,$7F,$F0,$00,$FF,$FF,$F0,$00
 $847E DEFB $00,$00,$BF,$E3,$9F,$F3,$CB,$A2
 $8486 DEFB $00,$00,$00,$00,$7D,$00,$BF,$E0
 $848E DEFB $63,$FD,$FF,$80,$00,$00,$01,$5F
 $8496 DEFB $E1,$DF,$B3,$CB,$A2,$00,$00,$00
 $849E DEFB $00,$3A,$80,$7F,$E1,$E3,$CB,$C0
 $84A6 DEFB $00,$00,$00,$0A,$FF,$E1,$FF,$33
 $84AE DEFB $CB,$80,$00,$00,$00,$00,$3D,$00
 $84B6 DEFB $BF,$C7,$C0,$07,$80,$00,$00,$00
 $84BE DEFB $5F,$7F,$E1,$FE,$F7,$CB,$C0,$00
 $84C6 DEFB $00,$00,$00,$3E,$81,$7F,$CF,$00
 $84CE DEFB $1F,$80,$00,$00,$00,$FD,$3F,$F0
 $84D6 DEFB $FF,$F7,$CB,$48,$00,$00,$00,$40
 $84DE DEFB $3D,$00,$BF,$CE,$00,$F7,$85,$E8
 $84E6 DEFB $00,$01,$F0,$1F,$F8,$7F,$F7,$CB
 $84EE DEFB $65,$00,$00,$10,$A0,$3E,$81,$7F
 $84F6 DEFB $C0,$07,$C7,$17,$FE,$00,$03,$E8
 $84FE DEFB $17,$F8,$3F,$FF,$CB,$31,$80,$00
 $8506 DEFB $60,$40,$3F,$02,$FF,$C1,$07,$07
 $850E DEFB $28,$12,$00,$0F,$C7,$8B,$F8,$3F
 $8516 DEFB $FF,$CB,$3F,$00,$01,$40,$00,$1F
 $851E DEFB $01,$7F,$E3,$80,$07,$80,$00,$00
 $8526 DEFB $1F,$9F,$EB,$FC,$3F,$FF,$CB,$1F
 $852E DEFB $00,$02,$80,$C5,$1E,$02,$FF,$E1
 $8536 DEFB $80,$03,$80,$3E,$00,$1F,$57,$FD
 $853E DEFB $FC,$0F,$9F,$CB,$0D,$00,$01,$00
 $8546 DEFB $36,$3E,$05,$FF,$F0,$0C,$13,$80
 $854E DEFB $FF,$80,$3F,$8F,$FE,$FE,$03,$1F
 $8556 DEFB $CB,$01,$00,$04,$00,$03,$FF,$02
 $855E DEFB $FF,$70,$1C,$63,$83,$DF,$C0,$3E
 $8566 DEFB $67,$EA,$BF,$08,$3F,$CB,$01,$00
 $856E DEFB $02,$00,$01,$DF,$85,$FE,$60,$04
 $8576 DEFB $C3,$07,$3E,$40,$3E,$1E,$55,$7F
 $857E DEFB $0C,$77,$CB,$01,$00,$0C,$00,$0A
 $8586 DEFB $3F,$C2,$F8,$C0,$01,$83,$03,$1D
 $858E DEFB $80,$7E,$00,$26,$FF,$87,$E7,$CB
 $8596 DEFB $01,$80,$08,$00,$04,$57,$E1,$F0
 $859E DEFB $80,$00,$43,$00,$E3,$00,$7E,$01
 $85A6 DEFB $41,$7F,$C1,$8F,$CB,$01,$80,$04
 $85AE DEFB $00,$0A,$2A,$E3,$E0,$80,$00,$C3
 $85B6 DEFB $00,$19,$00,$7E,$00,$02,$FF,$E0
 $85BE DEFB $0F,$CB,$01,$80,$0A,$78,$04,$55
 $85C6 DEFB $71,$E0,$80,$01,$03,$00,$02,$00
 $85CE DEFB $7F,$00,$01,$7F,$E0,$1F,$CB,$01
 $85D6 DEFB $40,$06,$3F,$C2,$AA,$B3,$C0,$80
 $85DE DEFB $00,$07,$00,$00,$00,$7E,$80,$02
 $85E6 DEFB $FF,$F8,$FF,$CB,$01,$40,$04,$1C
 $85EE DEFB $7F,$FF,$73,$C0,$40,$00,$07,$80
 $85F6 DEFB $00,$00,$7F,$00,$05,$7F,$FF,$FF
 $85FE DEFB $CB,$01,$60,$02,$0E,$01,$3E,$63
 $8606 DEFB $C0,$73,$81,$03,$80,$00,$00,$FE
 $860E DEFB $80,$0B,$FF,$FF,$FF,$CB,$01,$20
 $8616 DEFB $02,$03,$90,$5D,$77,$80,$3F,$F0
 $861E DEFB $83,$80,$00,$00,$7F,$00,$05,$FF
 $8626 DEFB $FF,$FF,$CB,$01,$20,$00,$00,$F0
 $862E DEFB $FA,$E7,$80,$3C,$E1,$87,$C0,$00
 $8636 DEFB $00,$FF,$00,$0B,$FF,$FF,$FF,$CB
 $863E DEFB $03,$10,$00,$00,$0F,$D5,$C7,$00
 $8646 DEFB $3E,$01,$C6,$C0,$00,$00,$7F,$00
 $864E DEFB $17,$FF,$FF,$FF,$CB,$03,$10,$00
 $8656 DEFB $00,$00,$3E,$CF,$00,$1F,$01,$EE
 $865E DEFB $C0,$00,$00,$3F,$80,$0B,$FF,$FF
 $8666 DEFB $FF,$CB,$03,$08,$00,$00,$00,$55
 $866E DEFB $9E,$00,$1B,$01,$DE,$60,$00,$00
 $8676 DEFB $5F,$C0,$17,$FF,$FF,$FF,$CB,$03
 $867E DEFB $08,$00,$00,$00,$2F,$9E,$00,$0D
 $8686 DEFB $81,$EF,$E0,$00,$00,$3F,$E0,$2B
 $868E DEFB $FF,$FF,$FF,$CB,$03,$04,$00,$00
 $8696 DEFB $00,$55,$3C,$00,$0D,$80,$E7,$60
 $869E DEFB $00,$80,$5F,$D8,$15,$FF,$FF,$FF
 $86A6 DEFB $CB,$03,$80,$00,$00,$00,$2B,$7C
 $86AE DEFB $00,$06,$A0,$F3,$60,$01,$00,$BF
 $86B6 DEFB $BC,$2A,$FF,$FF,$FF,$CB,$07,$80
 $86BE DEFB $00,$00,$00,$1E,$78,$00,$06,$30
 $86C6 DEFB $7F,$60,$02,$00,$7D,$6E,$15,$FF
 $86CE DEFB $FF,$FF,$CB,$07,$80,$00,$00,$00
 $86D6 DEFB $2A,$F0,$00,$01,$9E,$7F,$30,$06
 $86DE DEFB $08,$AA,$BB,$0A,$FF,$FF,$FF,$CB
 $86E6 DEFB $0D,$C0,$00,$00,$00,$1F,$F0,$00
 $86EE DEFB $01,$9F,$FE,$30,$04,$00,$45,$57
 $86F6 DEFB $95,$7F,$FF,$FF,$CB,$1C,$C0,$00
 $86FE DEFB $00,$00,$2F,$E0,$00,$00,$CF,$7E
 $8706 DEFB $90,$04,$00,$00,$2A,$8A,$FF,$FF
 $870E DEFB $FF,$CB,$38,$60,$00,$00,$00,$57
 $8716 DEFB $C0,$00,$00,$F1,$BF,$30,$00,$00
 $871E DEFB $01,$55,$95,$7F,$FF,$FF,$CB,$78
 $8726 DEFB $B0,$00,$00,$00,$2F,$80,$00,$00
 $872E DEFB $79,$8F,$F8,$00,$00,$3F,$FE,$DA
 $8736 DEFB $FF,$FF,$FF,$CB,$F8,$58,$10,$00
 $873E DEFB $20,$3F,$00,$00,$00,$3E,$03,$F8
 $8746 DEFB $08,$1F,$FF,$FE,$DD,$FF,$FF,$FF
 $874E DEFB $CB,$F0,$0C,$08,$00,$40,$5E,$00
 $8756 DEFB $00,$00,$1F,$07,$F8,$08,$FF,$F9
 $875E DEFB $2E,$CA,$FF,$FF,$FE,$CB,$F0,$06
 $8766 DEFB $02,$00,$A0,$BC,$00,$00,$00,$07
 $876E DEFB $07,$F8,$09,$C1,$00,$1C,$DD,$FF
 $8776 DEFB $FF,$FC,$CB,$F8,$03,$01,$00,$41
 $877E DEFB $7C,$00,$00,$00,$03,$03,$FC,$00
 $8786 DEFB $E0,$00,$79,$CA,$FF,$FF,$F8,$CB
 $878E DEFB $F8,$01,$C0,$70,$03,$FC,$00,$00
 $8796 DEFB $00,$03,$C3,$FC,$00,$7E,$0F,$F5
 $879E DEFB $D9,$FF,$FF,$F8,$CB,$F8,$00,$E0
 $87A6 DEFB $0F,$4C,$FE,$00,$00,$00,$01,$E1
 $87AE DEFB $FE,$00,$3F,$FD,$65,$9B,$FF,$FF
 $87B6 DEFB $E0,$CB,$FC,$00,$78,$01,$F0,$FF
 $87BE DEFB $00,$00,$00,$00,$F9,$FE,$00,$1A
 $87C6 DEFB $83,$89,$B5,$FF,$FF,$80,$CB,$FC
 $87CE DEFB $00,$BC,$08,$00,$FF,$80,$00,$00
 $87D6 DEFB $00,$F8,$DF,$00,$03,$F7,$11,$FB
 $87DE DEFB $FF,$FF,$00,$CB,$FE,$00,$4E,$04
 $87E6 DEFB $00,$7F,$C0,$00,$00,$00,$7E,$6F
 $87EE DEFB $80,$00,$7C,$01,$B3,$FF,$FC,$00
 $87F6 DEFB $C9,$00,$07,$16,$02,$1E,$01,$29
 $87FE DEFB $0A,$52,$06,$5D,$04,$7E,$02,$81
 $8806 DEFB $03,$85,$0F,$C9,$00,$08,$17,$02
 $880E DEFB $29,$0C,$54,$04,$5A,$01,$5E,$04
 $8816 DEFB $7E,$02,$81,$02,$84,$0F,$C9,$00
 $881E DEFB $08,$18,$03,$1F,$01,$28,$0E,$55
 $8826 DEFB $04,$5A,$02,$5F,$04,$7D,$02,$80
 $882E DEFB $11,$CB,$FF,$80,$00,$F0,$80,$FF
 $8836 DEFB $FF,$00,$00,$00,$03,$D8,$F0,$00
 $883E DEFB $00,$0A,$FF,$FF,$00,$00,$C9,$00
 $8846 DEFB $0A,$19,$05,$21,$01,$28,$12,$57
 $884E DEFB $08,$61,$04,$7B,$01,$7D,$13,$C9
 $8856 DEFB $00,$0A,$1A,$05,$27,$16,$57,$0F
 $885E DEFB $7A,$01,$7C,$15,$C9,$00,$0B,$1C
 $8866 DEFB $05,$26,$19,$58,$0F,$79,$01,$7B
 $886E DEFB $01,$7D,$14,$C9,$00,$0C,$1E,$04
 $8876 DEFB $25,$04,$2A,$17,$59,$0F,$78,$01
 $887E DEFB $7A,$01,$7C,$16,$C9,$00,$0D,$20
 $8886 DEFB $07,$2A,$1A,$5D,$09,$69,$01,$78
 $888E DEFB $1C,$C9,$00,$0E,$21,$07,$2A,$1C
 $8896 DEFB $63,$04,$6B,$02,$77,$1E,$C9,$00
 $889E DEFB $0F,$22,$07,$2A,$1F,$63,$03,$6E
 $88A6 DEFB $03,$73,$01,$75,$22,$C9,$00,$0F
 $88AE DEFB $21,$02,$25,$27,$64,$03,$72,$04
 $88B6 DEFB $7B,$1D,$C9,$00,$10,$21,$01,$29
 $88BE DEFB $25,$63,$04,$7B,$1E,$C9,$00,$11
 $88C6 DEFB $20,$01,$2A,$26,$63,$05,$7C,$1F
 $88CE DEFB $C9,$00,$12,$1F,$02,$2B,$26,$63
 $88D6 DEFB $06,$7C,$21,$C9,$00,$13,$1E,$03
 $88DE DEFB $2C,$27,$63,$09,$7D,$22,$C9,$00
 $88E6 DEFB $13,$1C,$06,$2C,$27,$62,$0B,$7C
 $88EE DEFB $24,$C9,$00,$14,$1B,$07,$2D,$27
 $88F6 DEFB $62,$0C,$7D,$23,$C9,$00,$15,$1A
 $88FE DEFB $06,$21,$03,$2D,$28,$61,$0F,$7D
 $8906 DEFB $23,$C9,$00,$15,$19,$07,$23,$02
 $890E DEFB $2E,$27,$5F,$13,$7D,$23,$C9,$00
 $8916 DEFB $16,$18,$02,$1B,$05,$24,$02,$2F
 $891E DEFB $27,$5E,$16,$7C,$24,$C9,$00,$19
 $8926 DEFB $1D,$03,$24,$02,$2F,$27,$5D,$18
 $892E DEFB $7C,$24,$C9,$00,$18,$1E,$02,$25
 $8936 DEFB $02,$30,$26,$5B,$1B,$7B,$25,$C9
 $893E DEFB $00,$19,$20,$02,$25,$02,$31,$25
 $8946 DEFB $59,$1D,$7B,$25,$C9,$68,$14,$68
 $894E DEFB $14,$68,$02,$30,$05,$68,$05,$30
 $8956 DEFB $05,$68,$03,$68,$01,$30,$07,$68
 $895E DEFB $03,$30,$07,$68,$02,$68,$01,$30
 $8966 DEFB $07,$68,$02,$30,$09,$68,$01,$30
 $896E DEFB $08,$68,$02,$30,$09,$68,$01,$30
 $8976 DEFB $08,$68,$01,$30,$05,$70,$02,$30
 $897E DEFB $04,$30,$0C,$70,$05,$30,$03,$30
 $8986 DEFB $0B,$70,$06,$30,$03,$68,$01,$30
 $898E DEFB $06,$68,$01,$30,$03,$70,$07,$30
 $8996 DEFB $02,$68,$01,$30,$06,$68,$02,$30
 $899E DEFB $02,$70,$07,$30,$02,$68,$01,$30
 $89A6 DEFB $05,$68,$03,$30,$02,$70,$07,$68
 $89AE DEFB $02,$68,$02,$30,$03,$68,$05,$30
 $89B6 DEFB $01,$70,$07,$68,$02,$68,$03,$30
 $89BE DEFB $03,$68,$05,$30,$01,$70,$06,$68
 $89C6 DEFB $02,$68,$0D,$70,$05,$68,$02,$68
 $89CE DEFB $0D,$70,$07,$00

; Graphics Data: Level 08 (Fergie And Andrew)
;
; Compressed graphics data for level 8.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$89D2,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-08) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-08-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_08
b$89D2 DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$C9
 $89DA DEFB $C9,$C9,$C9,$C9,$25,$03,$C9,$22
 $89E2 DEFB $09,$C9,$20,$0E,$C9,$1F,$11,$71
 $89EA DEFB $06,$C9,$1D,$15,$6D,$0E,$C9,$1A
 $89F2 DEFB $07,$25,$06,$2E,$06,$6A,$15,$C9
 $89FA DEFB $19,$06,$22,$06,$2A,$04,$31,$05
 $8A02 DEFB $68,$1A,$C9,$18,$04,$21,$02,$2D
 $8A0A DEFB $02,$32,$05,$66,$1E,$C9,$18,$04
 $8A12 DEFB $2F,$01,$34,$03,$65,$20,$C9,$17
 $8A1A DEFB $02,$1A,$01,$22,$01,$35,$03,$64
 $8A22 DEFB $22,$C9,$16,$02,$22,$02,$25,$05
 $8A2A DEFB $2B,$01,$36,$03,$63,$24,$C9,$15
 $8A32 DEFB $03,$19,$01,$20,$09,$2A,$04,$37
 $8A3A DEFB $03,$63,$25,$C9,$14,$04,$19,$01
 $8A42 DEFB $20,$08,$29,$02,$2D,$02,$37,$03
 $8A4A DEFB $62,$14,$79,$10,$C9,$14,$03,$18
 $8A52 DEFB $02,$1D,$0C,$2F,$02,$37,$04,$62
 $8A5A DEFB $13,$7A,$0F,$C9,$13,$06,$1B,$0B
 $8A62 DEFB $28,$02,$2F,$02,$38,$04,$62,$11
 $8A6A DEFB $7A,$10,$C9,$13,$05,$1B,$0A,$29
 $8A72 DEFB $02,$30,$02,$38,$04,$62,$10,$7B
 $8A7A DEFB $10,$C9,$13,$05,$1A,$03,$20,$06
 $8A82 DEFB $2A,$02,$31,$02,$38,$04,$61,$0F
 $8A8A DEFB $7A,$02,$7E,$0D,$CB,$00,$00,$1F
 $8A92 DEFB $33,$CC,$F8,$30,$F8,$00,$00,$00
 $8A9A DEFB $00,$76,$08,$00,$21,$FF,$F0,$00
 $8AA2 DEFB $00,$C9,$13,$04,$19,$03,$1E,$03
 $8AAA DEFB $25,$0A,$33,$01,$39,$04,$61,$03
 $8AB2 DEFB $80,$0C,$C9,$13,$03,$18,$08,$26
 $8ABA DEFB $04,$2C,$03,$38,$01,$3A,$03,$61
 $8AC2 DEFB $02,$81,$0B,$C9,$12,$04,$18,$02
 $8ACA DEFB $1B,$05,$28,$03,$2E,$03,$39,$01
 $8AD2 DEFB $3C,$02,$61,$02,$81,$0C,$C9,$12
 $8ADA DEFB $04,$18,$02,$1B,$04,$29,$04,$2F
 $8AE2 DEFB $07,$3D,$02,$61,$02,$81,$0C,$C9
 $8AEA DEFB $12,$03,$17,$02,$1A,$04,$2A,$0A
 $8AF2 DEFB $35,$02,$3D,$02,$61,$02,$82,$0B
 $8AFA DEFB $C9,$12,$03,$17,$07,$2C,$08,$36
 $8B02 DEFB $02,$3D,$02,$60,$02,$82,$0B,$C9
 $8B0A DEFB $12,$03,$17,$01,$19,$04,$2E,$08
 $8B12 DEFB $37,$01,$3E,$02,$60,$02,$66,$03
 $8B1A DEFB $81,$0C,$C9,$12,$02,$16,$01,$19
 $8B22 DEFB $03,$33,$04,$3E,$02,$60,$02,$64
 $8B2A DEFB $06,$72,$04,$81,$0C,$C9,$11,$03
 $8B32 DEFB $16,$06,$34,$03,$3E,$02,$60,$05
 $8B3A DEFB $66,$05,$71,$07,$81,$0B,$CB,$00
 $8B42 DEFB $00,$73,$60,$00,$00,$07,$01,$00
 $8B4A DEFB $00,$00,$00,$67,$E0,$71,$80,$7F
 $8B52 DEFB $F0,$00,$00,$CB,$00,$00,$66,$60
 $8B5A DEFB $00,$00,$03,$01,$00,$00,$00,$00
 $8B62 DEFB $5F,$F0,$7C,$40,$3F,$F0,$00,$00
 $8B6A DEFB $CB,$00,$00,$E6,$60,$00,$00,$01
 $8B72 DEFB $81,$00,$00,$00,$00,$61,$F8,$61
 $8B7A DEFB $00,$7F,$F0,$00,$00,$CB,$00,$00
 $8B82 DEFB $E6,$C0,$78,$01,$E0,$C1,$00,$00
 $8B8A DEFB $00,$00,$F8,$F3,$78,$80,$7E,$E0
 $8B92 DEFB $00,$00,$CB,$00,$00,$67,$C1,$1C
 $8B9A DEFB $06,$30,$C3,$00,$00,$00,$00,$FD
 $8BA2 DEFB $A1,$3C,$C0,$7C,$60,$00,$00,$CB
 $8BAA DEFB $00,$00,$63,$C2,$0C,$0C,$08,$C3
 $8BB2 DEFB $00,$00,$00,$00,$FE,$60,$3D,$00
 $8BBA DEFB $7B,$B0,$00,$00,$CB,$00,$00,$E3
 $8BC2 DEFB $80,$70,$04,$00,$C3,$80,$00,$00
 $8BCA DEFB $01,$B8,$64,$1C,$00,$70,$F0,$00
 $8BD2 DEFB $00,$CB,$00,$00,$F3,$81,$D8,$01
 $8BDA DEFB $C0,$63,$C0,$00,$00,$01,$80,$C0
 $8BE2 DEFB $00,$00,$70,$78,$00,$00,$CB,$00
 $8BEA DEFB $00,$F1,$80,$E0,$03,$F0,$63,$E0
 $8BF2 DEFB $00,$00,$03,$00,$C8,$00,$00,$6E
 $8BFA DEFB $78,$00,$00,$CB,$00,$00,$71,$80
 $8C02 DEFB $00,$00,$E0,$63,$E0,$00,$00,$03
 $8C0A DEFB $01,$C0,$40,$00,$2F,$38,$00,$00
 $8C12 DEFB $CB,$00,$00,$F9,$80,$00,$00,$00
 $8C1A DEFB $61,$F0,$00,$00,$03,$07,$90,$28
 $8C22 DEFB $00,$02,$70,$00,$00,$CB,$00,$00
 $8C2A DEFB $D9,$80,$00,$00,$00,$41,$F0,$00
 $8C32 DEFB $00,$03,$0D,$A7,$2C,$00,$02,$30
 $8C3A DEFB $00,$00,$CB,$00,$00,$C8,$80,$00
 $8C42 DEFB $00,$00,$41,$F0,$00,$00,$13,$19
 $8C4A DEFB $9F,$CE,$00,$04,$60,$00,$00,$CB
 $8C52 DEFB $00,$00,$C8,$80,$00,$00,$00,$61
 $8C5A DEFB $F0,$00,$00,$03,$38,$FE,$06,$00
 $8C62 DEFB $00,$60,$00,$00,$CB,$00,$00,$C8
 $8C6A DEFB $88,$00,$00,$00,$61,$E0,$00,$00
 $8C72 DEFB $43,$30,$00,$03,$12,$00,$E0,$00
 $8C7A DEFB $00,$CB,$00,$01,$80,$86,$A2,$22
 $8C82 DEFB $00,$61,$E0,$00,$00,$03,$30,$00
 $8C8A DEFB $01,$14,$00,$C0,$00,$00,$CB,$00
 $8C92 DEFB $01,$C6,$81,$40,$02,$00,$51,$E0
 $8C9A DEFB $00,$01,$01,$93,$F3,$C1,$18,$09
 $8CA2 DEFB $80,$00,$00,$CB,$00,$01,$C5,$80
 $8CAA DEFB $40,$01,$30,$59,$F0,$00,$00,$01
 $8CB2 DEFB $81,$9F,$FC,$10,$0F,$00,$00,$00
 $8CBA DEFB $CB,$00,$00,$C5,$80,$40,$01,$00
 $8CC2 DEFB $F0,$F0,$00,$00,$00,$C0,$C0,$18
 $8CCA DEFB $00,$3C,$00,$00,$00,$CB,$00,$00
 $8CD2 DEFB $6C,$80,$81,$E0,$82,$D0,$F0,$00
 $8CDA DEFB $08,$00,$C0,$70,$F0,$00,$58,$00
 $8CE2 DEFB $00,$00,$CB,$00,$00,$FE,$80,$06
 $8CEA DEFB $38,$02,$91,$F0,$00,$50,$00,$C0
 $8CF2 DEFB $1F,$C0,$00,$B8,$00,$00,$00,$CB
 $8CFA DEFB $00,$00,$DF,$83,$18,$0C,$04,$B3
 $8D02 DEFB $F0,$00,$60,$00,$60,$00,$00,$00
 $8D0A DEFB $78,$00,$00,$00,$CB,$00,$00,$DF
 $8D12 DEFB $81,$18,$06,$05,$F7,$F8,$00,$F0
 $8D1A DEFB $00,$60,$68,$00,$00,$B8,$00,$00
 $8D22 DEFB $00,$CB,$00,$00,$DF,$80,$81,$E0
 $8D2A DEFB $00,$8F,$F8,$00,$C0,$00,$60,$56
 $8D32 DEFB $00,$00,$78,$00,$00,$00,$C9,$10
 $8D3A DEFB $02,$14,$06,$37,$01,$3A,$04,$40
 $8D42 DEFB $05,$4F,$01,$62,$02,$6F,$01,$80
 $8D4A DEFB $05,$C9,$10,$02,$14,$07,$26,$01
 $8D52 DEFB $28,$02,$37,$01,$39,$04,$40,$04
 $8D5A DEFB $62,$02,$81,$03,$CB,$00,$00,$C9
 $8D62 DEFB $A0,$05,$00,$03,$70,$F0,$00,$00
 $8D6A DEFB $00,$1A,$00,$00,$00,$F0,$00,$00
 $8D72 DEFB $00,$C9,$0F,$04,$18,$01,$36,$02
 $8D7A DEFB $39,$03,$3F,$06,$63,$02,$67,$01
 $8D82 DEFB $81,$03,$C9,$0F,$04,$15,$02,$18
 $8D8A DEFB $01,$1C,$01,$35,$03,$39,$02,$3E
 $8D92 DEFB $07,$64,$03,$80,$04,$C9,$0E,$04
 $8D9A DEFB $14,$05,$34,$04,$39,$02,$3E,$01
 $8DA2 DEFB $40,$05,$65,$05,$80,$05,$CB,$00
 $8DAA DEFB $0F,$8C,$84,$00,$00,$3F,$42,$F8
 $8DB2 DEFB $00,$00,$00,$03,$FC,$00,$00,$FC
 $8DBA DEFB $00,$00,$00,$CB,$00,$1F,$1C,$82
 $8DC2 DEFB $00,$00,$7F,$04,$FC,$00,$00,$00
 $8DCA DEFB $03,$FA,$00,$01,$CE,$00,$00,$00
 $8DD2 DEFB $CB,$00,$1F,$B9,$80,$80,$00,$9F
 $8DDA DEFB $1C,$FC,$00,$00,$00,$02,$FD,$00
 $8DE2 DEFB $01,$87,$00,$00,$00,$CB,$00,$1F
 $8DEA DEFB $31,$80,$ED,$02,$1F,$0C,$FC,$00
 $8DF2 DEFB $00,$00,$03,$38,$00,$03,$07,$00
 $8DFA DEFB $00,$00,$CB,$00,$0E,$23,$80,$3A
 $8E02 DEFB $B8,$1F,$0C,$FE,$00,$00,$00,$03
 $8E0A DEFB $00,$00,$0E,$07,$80,$00,$00,$CB
 $8E12 DEFB $00,$1E,$8F,$C0,$1F,$E0,$1E,$04
 $8E1A DEFB $FE,$00,$00,$00,$03,$00,$00,$38
 $8E22 DEFB $07,$C0,$00,$00,$C9,$0B,$05,$13
 $8E2A DEFB $07,$25,$03,$33,$06,$3F,$08,$65
 $8E32 DEFB $04,$79,$03,$85,$07,$C9,$0B,$05
 $8E3A DEFB $11,$08,$34,$03,$38,$02,$40,$06
 $8E42 DEFB $64,$02,$68,$02,$78,$02,$84,$09
 $8E4A DEFB $C9,$0C,$0D,$34,$03,$3A,$02,$40
 $8E52 DEFB $05,$63,$03,$69,$02,$77,$02,$84
 $8E5A DEFB $0B,$C9,$0D,$0B,$33,$04,$3B,$02
 $8E62 DEFB $40,$06,$60,$06,$6A,$02,$75,$02
 $8E6A DEFB $82,$0F,$C9,$0B,$0D,$33,$06,$3E
 $8E72 DEFB $01,$40,$06,$5E,$07,$69,$03,$73
 $8E7A DEFB $02,$77,$01,$82,$11,$CB,$00,$FF
 $8E82 DEFB $F5,$80,$00,$00,$1F,$E0,$7C,$00
 $8E8A DEFB $00,$1F,$F8,$2C,$62,$00,$7F,$FF
 $8E92 DEFB $F8,$00,$C9,$08,$0D,$19,$01,$33
 $8E9A DEFB $04,$3A,$02,$42,$04,$58,$0D,$6D
 $8EA2 DEFB $04,$80,$17,$C9,$08,$0D,$33,$04
 $8EAA DEFB $3A,$03,$43,$04,$55,$0F,$6C,$06
 $8EB2 DEFB $80,$18,$C9,$08,$0C,$1B,$01,$33
 $8EBA DEFB $05,$3C,$02,$44,$04,$51,$13,$6B
 $8EC2 DEFB $08,$7F,$19,$C9,$08,$0D,$1C,$01
 $8ECA DEFB $33,$06,$3D,$02,$46,$02,$4D,$17
 $8ED2 DEFB $6A,$01,$6C,$07,$7F,$19,$CB,$00
 $8EDA DEFB $FF,$F0,$03,$00,$00,$3F,$C2,$27
 $8EE2 DEFB $3F,$FF,$FF,$F0,$2F,$F0,$03,$FF
 $8EEA DEFB $FF,$FF,$00,$C9,$08,$0D,$20,$02
 $8EF2 DEFB $30,$0C,$42,$02,$46,$1E,$69,$01
 $8EFA DEFB $6C,$06,$74,$02,$7E,$1A,$CB,$00
 $8F02 DEFB $FF,$F0,$00,$18,$CC,$1F,$FC,$1B
 $8F0A DEFB $FF,$FF,$FF,$F0,$87,$8C,$07,$FF
 $8F12 DEFB $FF,$FF,$00,$C9,$08,$0C,$25,$02
 $8F1A DEFB $34,$0C,$47,$1D,$67,$01,$6D,$04
 $8F22 DEFB $75,$02,$7C,$1C,$C9,$08,$0C,$25
 $8F2A DEFB $01,$34,$0F,$47,$1D,$67,$01,$6E
 $8F32 DEFB $03,$76,$01,$7C,$1C,$C9,$08,$0C
 $8F3A DEFB $24,$03,$34,$11,$48,$1C,$66,$01
 $8F42 DEFB $6E,$03,$77,$01,$7B,$1D,$C9,$08
 $8F4A DEFB $0D,$24,$02,$33,$14,$48,$1C,$65
 $8F52 DEFB $01,$6D,$05,$78,$01,$7A,$1E,$C9
 $8F5A DEFB $08,$0C,$33,$30,$64,$01,$6D,$05
 $8F62 DEFB $79,$1F,$C9,$08,$0D,$33,$30,$6D
 $8F6A DEFB $05,$7A,$1E,$C9,$08,$0D,$34,$2F
 $8F72 DEFB $6C,$06,$79,$1F,$C9,$08,$0D,$33
 $8F7A DEFB $31,$6C,$06,$78,$20,$C9,$08,$0D
 $8F82 DEFB $34,$30,$6C,$06,$78,$20,$C9,$08
 $8F8A DEFB $0D,$32,$32,$6B,$07,$77,$21,$C9
 $8F92 DEFB $08,$0D,$33,$31,$6B,$07,$77,$21
 $8F9A DEFB $C9,$08,$0D,$32,$32,$6A,$07,$76
 $8FA2 DEFB $22,$C9,$08,$0E,$33,$31,$6A,$07
 $8FAA DEFB $76,$22,$C9,$08,$0D,$32,$32,$69
 $8FB2 DEFB $08,$75,$23,$C9,$08,$0E,$32,$32
 $8FBA DEFB $69,$08,$75,$23,$C9,$08,$0E,$31
 $8FC2 DEFB $33,$68,$09,$75,$23,$C9,$08,$0E
 $8FCA DEFB $32,$33,$67,$09,$74,$24,$C9,$08
 $8FD2 DEFB $0E,$31,$34,$67,$09,$74,$24,$C9
 $8FDA DEFB $08,$0F,$30,$35,$66,$0A,$73,$25
 $8FE2 DEFB $C9,$08,$0F,$30,$40,$72,$26,$C9
 $8FEA DEFB $08,$0F,$2F,$41,$71,$27,$C9,$08
 $8FF2 DEFB $0F,$2F,$40,$71,$27,$C9,$08,$0F
 $8FFA DEFB $2E,$41,$70,$28,$C9,$08,$10,$2E
 $9002 DEFB $6A,$C9,$08,$10,$2D,$6B,$C9,$08
 $900A DEFB $10,$2C,$6C,$C9,$08,$11,$2C,$6C
 $9012 DEFB $C9,$08,$10,$21,$01,$2B,$6D,$C9
 $901A DEFB $08,$11,$20,$01,$2A,$6E,$C9,$08
 $9022 DEFB $11,$1F,$01,$21,$01,$29,$6F,$C9
 $902A DEFB $08,$12,$1B,$01,$20,$01,$29,$6F
 $9032 DEFB $C9,$08,$11,$21,$01,$26,$01,$28
 $903A DEFB $70,$C9,$08,$12,$1C,$01,$20,$01
 $9042 DEFB $25,$01,$27,$71,$C9,$C9,$C9,$C9
 $904A DEFB $C9,$C9,$C9,$C9,$C9,$10,$14,$10
 $9052 DEFB $01,$68,$12,$10,$01,$10,$01,$68
 $905A DEFB $02,$30,$04,$68,$07,$30,$02,$68
 $9062 DEFB $03,$10,$01,$10,$01,$68,$02,$30
 $906A DEFB $01,$70,$01,$30,$02,$68,$05,$30
 $9072 DEFB $05,$68,$02,$10,$01,$10,$01,$68
 $907A DEFB $01,$30,$01,$70,$04,$30,$01,$68
 $9082 DEFB $04,$30,$05,$68,$02,$10,$01,$10
 $908A DEFB $01,$68,$01,$30,$01,$70,$04,$30
 $9092 DEFB $01,$68,$04,$30,$05,$68,$02,$10
 $909A DEFB $01,$10,$01,$68,$01,$30,$01,$70
 $90A2 DEFB $04,$30,$01,$68,$04,$30,$05,$68
 $90AA DEFB $02,$10,$01,$10,$01,$68,$01,$30
 $90B2 DEFB $01,$70,$04,$30,$01,$68,$04,$30
 $90BA DEFB $04,$68,$03,$10,$01,$10,$01,$68
 $90C2 DEFB $01,$30,$01,$70,$04,$30,$01,$68
 $90CA DEFB $05,$30,$03,$68,$03,$10,$01,$10
 $90D2 DEFB $01,$68,$01,$30,$01,$70,$04,$30
 $90DA DEFB $01,$68,$05,$30,$02,$68,$04,$10
 $90E2 DEFB $01,$10,$01,$70,$06,$30,$02,$68
 $90EA DEFB $0A,$10,$01,$10,$01,$70,$07,$30
 $90F2 DEFB $01,$68,$0A,$10,$01,$10,$01,$70
 $90FA DEFB $06,$68,$0C,$10,$01,$10,$01,$70
 $9102 DEFB $06,$68,$0C,$10,$01,$10,$01,$70
 $910A DEFB $12,$10,$01,$10,$14,$00

; Graphics Data: Level 09 (Mick Jagger)
;
; Compressed graphics data for level 9.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$9110,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-09) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-09-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_09
b$9110 DEFB $C9,$C9,$C9,$C9,$4B,$03,$C9,$3D
 $9118 DEFB $03,$46,$0B,$C9,$3A,$09,$44,$0F
 $9120 DEFB $C9,$38,$1F,$C9,$36,$23,$C9,$34
 $9128 DEFB $27,$C9,$33,$29,$C9,$32,$2C,$C9
 $9130 DEFB $30,$31,$C9,$2F,$34,$C9,$2E,$36
 $9138 DEFB $C9,$2D,$39,$C9,$2D,$3A,$C9,$2D
 $9140 DEFB $3B,$C9,$2D,$2E,$5E,$0B,$C9,$2C
 $9148 DEFB $30,$62,$08,$C9,$2B,$33,$63,$07
 $9150 DEFB $C9,$2A,$37,$64,$05,$6A,$01,$C9
 $9158 DEFB $29,$40,$C9,$29,$37,$64,$05,$C9
 $9160 DEFB $29,$39,$65,$05,$C9,$29,$41,$C9
 $9168 DEFB $29,$41,$C9,$29,$3B,$65,$05,$C9
 $9170 DEFB $29,$3B,$67,$03,$C9,$29,$3E,$68
 $9178 DEFB $03,$C9,$28,$3E,$67,$04,$C9,$28
 $9180 DEFB $43,$C9,$27,$40,$69,$02,$C9,$27
 $9188 DEFB $44,$C9,$28,$44,$C9,$28,$44,$C9
 $9190 DEFB $28,$44,$C9,$28,$45,$C9,$28,$46
 $9198 DEFB $C9,$29,$45,$C9,$29,$43,$6D,$01
 $91A0 DEFB $C9,$29,$43,$6E,$01,$C9,$29,$44
 $91A8 DEFB $C9,$28,$0B,$34,$3A,$C9,$28,$0A
 $91B0 DEFB $36,$38,$C9,$28,$0A,$37,$36,$C9
 $91B8 DEFB $28,$0A,$39,$35,$C9,$28,$0A,$3C
 $91C0 DEFB $32,$C9,$29,$09,$3E,$25,$64,$03
 $91C8 DEFB $6B,$1C,$C9,$28,$0A,$3F,$23,$65
 $91D0 DEFB $01,$68,$02,$6C,$34,$C9,$28,$09
 $91D8 DEFB $40,$1F,$60,$01,$66,$05,$6D,$33
 $91E0 DEFB $C9,$27,$04,$2C,$05,$32,$01,$42
 $91E8 DEFB $1C,$65,$03,$6A,$01,$6D,$33,$C9
 $91F0 DEFB $25,$0C,$32,$01,$43,$18,$5C,$01
 $91F8 DEFB $64,$04,$6A,$01,$6D,$33,$C9,$24
 $9200 DEFB $0D,$43,$16,$5C,$01,$64,$04,$6A
 $9208 DEFB $01,$6E,$32,$C9,$23,$0E,$44,$14
 $9210 DEFB $63,$03,$69,$02,$6E,$32,$C9,$22
 $9218 DEFB $0A,$2D,$03,$44,$13,$63,$07,$6E
 $9220 DEFB $08,$82,$1E,$C9,$20,$0D,$2E,$02
 $9228 DEFB $45,$08,$63,$06,$6D,$01,$86,$1A
 $9230 DEFB $C9,$1F,$0E,$2E,$02,$35,$01,$45
 $9238 DEFB $04,$53,$05,$59,$01,$64,$02,$6D
 $9240 DEFB $01,$88,$18,$C9,$1E,$10,$34,$01
 $9248 DEFB $40,$01,$45,$03,$50,$0B,$60,$01
 $9250 DEFB $6D,$01,$89,$17,$C9,$1C,$13,$33
 $9258 DEFB $01,$40,$01,$45,$03,$4F,$0C,$61
 $9260 DEFB $01,$6D,$01,$8A,$16,$CB,$00,$00
 $9268 DEFB $00,$1F,$FF,$FF,$20,$01,$46,$03
 $9270 DEFB $F1,$C0,$40,$04,$00,$00,$00,$0F
 $9278 DEFB $FF,$FF,$C9,$1A,$18,$3F,$01,$45
 $9280 DEFB $02,$4E,$02,$51,$02,$56,$04,$61
 $9288 DEFB $02,$6D,$01,$8D,$13,$C9,$19,$19
 $9290 DEFB $3E,$01,$45,$02,$4E,$03,$55,$04
 $9298 DEFB $62,$01,$6C,$01,$8E,$12,$C9,$17
 $92A0 DEFB $1A,$3E,$01,$46,$02,$50,$04,$57
 $92A8 DEFB $01,$62,$02,$6C,$01,$8F,$11,$C9
 $92B0 DEFB $16,$1A,$46,$02,$63,$01,$68,$02
 $92B8 DEFB $6B,$02,$90,$10,$C9,$15,$1B,$3C
 $92C0 DEFB $01,$46,$02,$63,$02,$69,$08,$90
 $92C8 DEFB $10,$C9,$14,$1B,$46,$02,$64,$01
 $92D0 DEFB $6A,$03,$6E,$01,$70,$04,$91,$0F
 $92D8 DEFB $C9,$12,$1C,$46,$02,$65,$01,$6B
 $92E0 DEFB $03,$6F,$01,$71,$04,$91,$0F,$C9
 $92E8 DEFB $11,$1C,$45,$02,$5D,$01,$65,$01
 $92F0 DEFB $6B,$02,$6E,$01,$71,$01,$73,$03
 $92F8 DEFB $92,$0E,$CB,$00,$00,$FF,$FF,$FF
 $9300 DEFB $F0,$00,$00,$1E,$00,$00,$04,$02
 $9308 DEFB $4D,$2E,$00,$00,$00,$3F,$FF,$C9
 $9310 DEFB $0F,$1C,$42,$05,$5C,$01,$69,$01
 $9318 DEFB $6D,$01,$71,$01,$73,$01,$75,$03
 $9320 DEFB $93,$0D,$C9,$0D,$1C,$41,$06,$5C
 $9328 DEFB $01,$68,$01,$6D,$01,$72,$01,$74
 $9330 DEFB $01,$76,$03,$93,$0D,$CB,$00,$0F
 $9338 DEFB $FF,$FF,$FF,$00,$00,$00,$FE,$00
 $9340 DEFB $00,$25,$FE,$02,$15,$C0,$00,$00
 $9348 DEFB $0F,$FF,$C9,$0B,$1C,$3F,$08,$59
 $9350 DEFB $01,$60,$02,$6E,$01,$74,$01,$76
 $9358 DEFB $01,$79,$02,$94,$0C,$C9,$0A,$1B
 $9360 DEFB $3E,$09,$59,$01,$64,$02,$6D,$02
 $9368 DEFB $75,$01,$77,$01,$79,$03,$95,$0B
 $9370 DEFB $C9,$08,$1C,$3E,$0A,$58,$01,$65
 $9378 DEFB $02,$6D,$02,$76,$01,$78,$01,$7A
 $9380 DEFB $03,$95,$0B,$CB,$01,$FF,$FF,$FF
 $9388 DEFB $E0,$00,$00,$07,$FF,$00,$00,$80
 $9390 DEFB $06,$17,$01,$5C,$00,$00,$03,$FF
 $9398 DEFB $C9,$06,$1B,$3C,$0C,$57,$01,$68
 $93A0 DEFB $04,$6D,$04,$78,$01,$7A,$01,$7C
 $93A8 DEFB $03,$96,$0A,$C9,$04,$1B,$3B,$0D
 $93B0 DEFB $57,$01,$65,$06,$6D,$01,$6F,$04
 $93B8 DEFB $7B,$01,$7D,$04,$97,$09,$CB,$1F
 $93C0 DEFB $FF,$FF,$FC,$00,$00,$00,$3F,$FF
 $93C8 DEFB $80,$00,$00,$7F,$E8,$F0,$2A,$C0
 $93D0 DEFB $00,$01,$FF,$CB,$3F,$FF,$FF,$F8
 $93D8 DEFB $00,$00,$00,$7F,$FF,$80,$00,$07
 $93E0 DEFB $FE,$C8,$F8,$15,$70,$00,$00,$FF
 $93E8 DEFB $CB,$7F,$FF,$FF,$E0,$00,$00,$00
 $93F0 DEFB $CF,$FF,$C0,$00,$1F,$FD,$C8,$7A
 $93F8 DEFB $00,$5C,$00,$00,$FF,$CB,$FF,$FF
 $9400 DEFB $FF,$C0,$00,$00,$01,$83,$FF,$E0
 $9408 DEFB $00,$17,$FF,$88,$3D,$00,$26,$00
 $9410 DEFB $00,$3F,$C9,$00,$18,$36,$02,$40
 $9418 DEFB $08,$4A,$03,$60,$07,$6B,$01,$72
 $9420 DEFB $05,$86,$04,$9B,$05,$CB,$FF,$FF
 $9428 DEFB $FE,$00,$00,$00,$07,$00,$7E,$1C
 $9430 DEFB $00,$00,$01,$90,$1F,$00,$04,$E0
 $9438 DEFB $00,$0F,$CB,$FF,$FF,$F8,$00,$00
 $9440 DEFB $00,$0F,$80,$3E,$07,$C0,$00,$06
 $9448 DEFB $10,$1E,$00,$02,$60,$00,$07,$CB
 $9450 DEFB $FF,$FF,$F0,$00,$00,$00,$1F,$80
 $9458 DEFB $1C,$01,$F8,$00,$0C,$30,$1F,$00
 $9460 DEFB $01,$70,$00,$03,$C9,$00,$12,$32
 $9468 DEFB $02,$38,$02,$45,$02,$51,$07,$6A
 $9470 DEFB $01,$74,$03,$89,$03,$9F,$01,$C9
 $9478 DEFB $00,$11,$31,$02,$39,$03,$46,$02
 $9480 DEFB $53,$08,$68,$02,$74,$02,$77,$01
 $9488 DEFB $8A,$02,$CB,$FF,$FF,$00,$00,$00
 $9490 DEFB $00,$C0,$3C,$05,$80,$07,$FE,$03
 $9498 DEFB $80,$2C,$00,$00,$18,$00,$00,$CB
 $94A0 DEFB $FF,$FE,$00,$00,$00,$01,$80,$1E
 $94A8 DEFB $02,$C0,$00,$FF,$9F,$00,$58,$00
 $94B0 DEFB $00,$1E,$00,$00,$C9,$00,$0D,$2F
 $94B8 DEFB $02,$3C,$04,$47,$01,$49,$02,$5B
 $94C0 DEFB $0A,$66,$01,$72,$02,$8B,$04,$C9
 $94C8 DEFB $00,$0C,$2E,$02,$3C,$05,$48,$01
 $94D0 DEFB $4A,$02,$64,$02,$67,$01,$71,$03
 $94D8 DEFB $8C,$02,$C9,$00,$0A,$2D,$02,$3D
 $94E0 DEFB $04,$47,$01,$49,$01,$4B,$03,$63
 $94E8 DEFB $04,$70,$03,$8C,$03,$C9,$00,$08
 $94F0 DEFB $2C,$02,$3E,$04,$48,$01,$4A,$01
 $94F8 DEFB $4C,$03,$63,$02,$6F,$04,$8D,$02
 $9500 DEFB $C9,$00,$07,$2C,$02,$3F,$04,$49
 $9508 DEFB $01,$4B,$01,$4D,$04,$6E,$04,$8D
 $9510 DEFB $02,$C9,$00,$06,$2B,$02,$41,$04
 $9518 DEFB $4A,$01,$4C,$01,$4E,$07,$6D,$05
 $9520 DEFB $8E,$02,$C9,$00,$05,$2A,$02,$43
 $9528 DEFB $03,$50,$09,$6B,$06,$8E,$02,$C9
 $9530 DEFB $00,$04,$29,$02,$45,$02,$51,$02
 $9538 DEFB $55,$01,$57,$01,$59,$03,$69,$07
 $9540 DEFB $8F,$02,$CB,$E0,$00,$00,$00,$00
 $9548 DEFB $60,$00,$00,$03,$00,$3A,$A8,$00
 $9550 DEFB $7E,$00,$00,$00,$01,$81,$00,$C9
 $9558 DEFB $00,$02,$28,$02,$48,$02,$54,$03
 $9560 DEFB $68,$05,$8F,$02,$98,$01,$C9,$00
 $9568 DEFB $01,$27,$02,$4A,$02,$55,$03,$67
 $9570 DEFB $05,$8F,$03,$99,$01,$C9,$26,$02
 $9578 DEFB $4B,$02,$56,$03,$66,$04,$90,$02
 $9580 DEFB $99,$02,$C9,$25,$02,$4C,$01,$58
 $9588 DEFB $02,$65,$04,$90,$03,$9A,$02,$C9
 $9590 DEFB $25,$02,$4D,$01,$59,$03,$64,$03
 $9598 DEFB $90,$03,$9B,$01,$C9,$24,$02,$4E
 $95A0 DEFB $01,$5C,$03,$60,$05,$91,$04,$9C
 $95A8 DEFB $01,$C9,$23,$02,$4E,$02,$5F,$04
 $95B0 DEFB $91,$04,$96,$01,$9D,$01,$C9,$22
 $95B8 DEFB $02,$4F,$01,$90,$01,$93,$03,$C9
 $95C0 DEFB $21,$02,$38,$01,$50,$01,$90,$01
 $95C8 DEFB $93,$04,$C9,$21,$02,$39,$02,$51
 $95D0 DEFB $01,$90,$01,$92,$01,$94,$03,$9F
 $95D8 DEFB $01,$C9,$20,$02,$39,$04,$51,$01
 $95E0 DEFB $8F,$01,$92,$01,$95,$03,$9D,$03
 $95E8 DEFB $C9,$20,$02,$3A,$05,$51,$01,$8E
 $95F0 DEFB $01,$96,$04,$9B,$05,$C9,$1F,$03
 $95F8 DEFB $3A,$06,$52,$01,$8E,$01,$96,$0A
 $9600 DEFB $C9,$1F,$02,$3A,$08,$52,$01,$8D
 $9608 DEFB $01,$91,$02,$96,$02,$99,$06,$C9
 $9610 DEFB $1E,$03,$3B,$09,$52,$01,$8D,$01
 $9618 DEFB $91,$01,$96,$03,$9A,$04,$C9,$1E
 $9620 DEFB $02,$37,$10,$52,$01,$90,$01,$95
 $9628 DEFB $02,$99,$04,$CA,$00,$03,$06,$00
 $9630 DEFB $02,$0F,$FC,$0F,$E0,$60,$00,$07
 $9638 DEFB $86,$B8,$00,$00,$C9,$1D,$02,$32
 $9640 DEFB $09,$47,$0C,$8F,$02,$95,$02,$9A
 $9648 DEFB $02,$C9,$1C,$02,$2E,$0A,$46,$01
 $9650 DEFB $49,$11,$8E,$02,$95,$01,$98,$03
 $9658 DEFB $C9,$1B,$02,$2C,$0C,$48,$18,$8D
 $9660 DEFB $02,$94,$01,$99,$02,$CB,$00,$3C
 $9668 DEFB $00,$10,$00,$F9,$FB,$00,$01,$80
 $9670 DEFB $7F,$F7,$80,$00,$00,$00,$00,$06
 $9678 DEFB $20,$C0,$C9,$00,$10,$22,$02,$25
 $9680 DEFB $05,$37,$02,$50,$03,$5F,$02,$8C
 $9688 DEFB $02,$91,$02,$98,$02,$C9,$00,$0B
 $9690 DEFB $0D,$03,$21,$04,$27,$05,$4F,$01
 $9698 DEFB $5F,$02,$8B,$02,$90,$02,$97,$02
 $96A0 DEFB $CB,$C3,$83,$80,$00,$C0,$18,$00
 $96A8 DEFB $00,$00,$00,$00,$00,$C0,$00,$00
 $96B0 DEFB $00,$00,$30,$81,$80,$C9,$0F,$02
 $96B8 DEFB $1E,$04,$60,$02,$89,$02,$8F,$01
 $96C0 DEFB $96,$02,$C9,$0F,$03,$1C,$04,$61
 $96C8 DEFB $01,$88,$02,$8E,$01,$96,$02,$C9
 $96D0 DEFB $10,$03,$1A,$04,$24,$02,$61,$01
 $96D8 DEFB $88,$01,$8D,$01,$95,$03,$C9,$12
 $96E0 DEFB $04,$18,$07,$25,$02,$61,$02,$87
 $96E8 DEFB $01,$8C,$01,$95,$02,$C9,$13,$10
 $96F0 DEFB $61,$02,$8B,$01,$94,$03,$C9,$10
 $96F8 DEFB $06,$50,$0E,$10,$06,$50,$0E,$10
 $9700 DEFB $0B,$48,$02,$50,$07,$10,$0C,$48
 $9708 DEFB $01,$50,$07,$10,$06,$30,$01,$50
 $9710 DEFB $0D,$10,$06,$30,$07,$50,$07,$10
 $9718 DEFB $05,$30,$0C,$78,$03,$10,$05,$30
 $9720 DEFB $0E,$78,$01,$10,$04,$78,$01,$30
 $9728 DEFB $0E,$78,$01,$10,$03,$30,$0B,$60
 $9730 DEFB $01,$30,$04,$78,$01,$10,$01,$78
 $9738 DEFB $01,$30,$05,$60,$02,$30,$06,$60
 $9740 DEFB $02,$30,$03,$30,$08,$60,$01,$30
 $9748 DEFB $05,$60,$04,$30,$02,$30,$09,$60
 $9750 DEFB $02,$30,$02,$60,$05,$30,$02,$30
 $9758 DEFB $0A,$60,$09,$30,$01,$30,$07,$38
 $9760 DEFB $02,$30,$01,$60,$09,$30,$01,$38
 $9768 DEFB $02,$30,$02,$38,$08,$60,$07,$30
 $9770 DEFB $01,$00

; Graphics Data: Level 10 (Marilyn Monroe)
;
; Compressed graphics data for level 10.
;
; .
;
; This is decompressed using the routine at #R$E004 which writes the
; image to #R$A0E3.
; .
; #PUSHS #SIM(start=$D34E,stop=$D351,ix=$9772,sp=$FFFA)
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($A0E3-$AACF-$01-$A0)@$AAE3-$AC22(level-10) } UDGTABLE#
; .
; And split up into separate tiles for the game:
; #UDGTABLE(default,centre)
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($A0E3+{multiplier})-($A34F+{multiplier})-$01-$A0)@($AAE3+({id}+y*$0F)*$04)-($AB22+({id}+y*$0F)*$04)-$01-$14(#FORMAT(level-10-{id:02}))! |
; !! } '' UDGTABLE# #POPS
@label=GraphicsData_Level_10
b$9772 DEFB $C9,$38,$01,$53,$03,$C9,$37,$01
 $977A DEFB $55,$03,$C9,$36,$01,$55,$04,$C9
 $9782 DEFB $36,$01,$4E,$01,$57,$01,$59,$02
 $978A DEFB $C9,$2F,$02,$35,$01,$4F,$01,$51
 $9792 DEFB $01,$57,$05,$CA,$00,$05,$05,$C8
 $979A DEFB $08,$08,$03,$40,$BC,$00,$08,$00
 $97A2 DEFB $00,$C9,$2C,$01,$2F,$01,$32,$02
 $97AA DEFB $39,$02,$4E,$01,$58,$02,$5B,$04
 $97B2 DEFB $CA,$00,$05,$18,$40,$D0,$01,$00
 $97BA DEFB $01,$40,$37,$00,$08,$00,$00,$CA
 $97C2 DEFB $00,$05,$14,$00,$01,$C0,$00,$01
 $97CA DEFB $80,$C0,$4B,$80,$00,$07,$00,$00
 $97D2 DEFB $C9,$2B,$01,$30,$01,$49,$01,$4D
 $97DA DEFB $01,$4F,$02,$5E,$04,$CA,$00,$05
 $97E2 DEFB $14,$80,$00,$01,$02,$22,$C0,$02
 $97EA DEFB $C0,$00,$07,$00,$00,$CA,$00,$05
 $97F2 DEFB $19,$80,$22,$01,$22,$80,$01,$E0
 $97FA DEFB $00,$07,$00,$00,$CA,$00,$05,$11
 $9802 DEFB $80,$C4,$60,$82,$80,$01,$60,$00
 $980A DEFB $07,$00,$00,$CA,$00,$05,$0B,$05
 $9812 DEFB $03,$F2,$13,$00,$02,$E0,$00,$07
 $981A DEFB $00,$00,$C9,$2A,$06,$36,$01,$3C
 $9822 DEFB $09,$4B,$01,$5F,$02,$62,$02,$CA
 $982A DEFB $00,$04,$04,$7E,$08,$C7,$F8,$50
 $9832 DEFB $10,$00,$01,$30,$00,$07,$00,$00
 $983A DEFB $CA,$00,$04,$06,$FF,$11,$EF,$B1
 $9842 DEFB $40,$20,$00,$01,$50,$00,$07,$00
 $984A DEFB $00,$CA,$00,$04,$06,$F6,$10,$76
 $9852 DEFB $81,$01,$00,$01,$10,$10,$00,$07
 $985A DEFB $00,$00,$CA,$00,$04,$0C,$C3,$09
 $9862 DEFB $E4,$48,$42,$10,$40,$10,$00,$07
 $986A DEFB $00,$00,$CA,$00,$04,$0C,$82,$0B
 $9872 DEFB $E9,$7A,$D5,$6E,$80,$18,$00,$07
 $987A DEFB $00,$00,$CA,$00,$04,$10,$83,$03
 $9882 DEFB $BF,$BB,$00,$01,$03,$68,$0C,$00
 $988A DEFB $07,$00,$00,$CA,$00,$04,$28,$B7
 $9892 DEFB $01,$D8,$5A,$00,$02,$40,$1E,$00
 $989A DEFB $07,$00,$00,$CA,$00,$04,$68,$7F
 $98A2 DEFB $02,$80,$00,$03,$70,$9E,$00,$07
 $98AA DEFB $00,$00,$CA,$00,$04,$64,$FF,$42
 $98B2 DEFB $00,$04,$04,$5F,$00,$07,$00,$00
 $98BA DEFB $CA,$00,$04,$4C,$7F,$E2,$00,$04
 $98C2 DEFB $0C,$2F,$80,$00,$06,$00,$00,$C9
 $98CA DEFB $21,$01,$25,$02,$28,$0B,$36,$01
 $98D2 DEFB $65,$05,$C9,$20,$01,$25,$02,$29
 $98DA DEFB $0A,$36,$01,$5E,$01,$66,$05,$CA
 $98E2 DEFB $00,$04,$83,$7F,$F2,$00,$04,$03
 $98EA DEFB $02,$F0,$00,$06,$00,$00,$CA,$00
 $98F2 DEFB $04,$A1,$FF,$F2,$00,$04,$04,$04
 $98FA DEFB $78,$00,$06,$00,$00,$C9,$1F,$02
 $9902 DEFB $23,$01,$28,$0B,$35,$01,$5E,$01
 $990A DEFB $68,$01,$6A,$05,$C9,$1F,$01,$2B
 $9912 DEFB $09,$35,$01,$67,$01,$6B,$05,$C9
 $991A DEFB $1F,$01,$2A,$01,$2C,$09,$60,$01
 $9922 DEFB $6A,$01,$6D,$04,$CA,$00,$03,$01
 $992A DEFB $01,$5F,$F0,$00,$05,$50,$4F,$C0
 $9932 DEFB $00,$05,$00,$00,$CA,$00,$04,$80
 $993A DEFB $BF,$F0,$00,$05,$2C,$13,$F0,$00
 $9942 DEFB $05,$00,$00,$C9,$21,$01,$28,$02
 $994A DEFB $2B,$07,$54,$06,$61,$01,$63,$02
 $9952 DEFB $6D,$08,$CA,$00,$04,$E0,$3F,$E0
 $995A DEFB $00,$03,$7E,$70,$24,$0A,$FC,$00
 $9962 DEFB $05,$00,$00,$C9,$1F,$01,$24,$01
 $996A DEFB $28,$0A,$4F,$03,$5B,$02,$64,$02
 $9972 DEFB $6F,$02,$72,$05,$CB,$00,$00,$00
 $997A DEFB $01,$53,$FF,$E0,$FE,$00,$03,$00
 $9982 DEFB $04,$2C,$00,$77,$00,$00,$00,$00
 $998A DEFB $00,$CB,$00,$00,$00,$01,$AB,$FF
 $9992 DEFB $C3,$FF,$00,$00,$00,$02,$16,$01
 $999A DEFB $FB,$00,$00,$00,$00,$00,$CB,$00
 $99A2 DEFB $00,$00,$01,$37,$FF,$EF,$0A,$00
 $99AA DEFB $00,$00,$00,$17,$00,$77,$80,$00
 $99B2 DEFB $00,$00,$00,$C9,$1E,$02,$21,$02
 $99BA DEFB $26,$0F,$3D,$05,$63,$01,$65,$02
 $99C2 DEFB $70,$02,$74,$01,$76,$04,$C9,$1E
 $99CA DEFB $01,$20,$14,$3E,$06,$65,$03,$76
 $99D2 DEFB $04,$C9,$1E,$01,$22,$11,$40,$06
 $99DA DEFB $66,$01,$68,$01,$72,$01,$74,$02
 $99E2 DEFB $77,$01,$79,$02,$CB,$00,$00,$00
 $99EA DEFB $03,$71,$FF,$E0,$00,$FC,$00,$14
 $99F2 DEFB $00,$0A,$00,$7D,$F0,$00,$00,$00
 $99FA DEFB $00,$C9,$1E,$01,$21,$13,$41,$06
 $9A02 DEFB $51,$08,$5A,$01,$65,$02,$76,$02
 $9A0A DEFB $79,$03,$CB,$00,$00,$00,$02,$63
 $9A12 DEFB $FF,$F1,$20,$1E,$00,$DF,$F4,$01
 $9A1A DEFB $00,$1A,$78,$00,$00,$00,$00,$CB
 $9A22 DEFB $00,$00,$00,$02,$39,$FF,$F2,$EF
 $9A2A DEFB $8E,$01,$EF,$7E,$01,$00,$05,$78
 $9A32 DEFB $00,$00,$00,$00,$CB,$00,$00,$00
 $9A3A DEFB $04,$7F,$FF,$E7,$FC,$CC,$00,$0F
 $9A42 DEFB $FC,$00,$00,$32,$B8,$00,$00,$00
 $9A4A DEFB $00,$C9,$1D,$01,$22,$12,$35,$08
 $9A52 DEFB $3F,$01,$44,$02,$5A,$02,$66,$01
 $9A5A DEFB $69,$02,$78,$05,$CB,$00,$00,$00
 $9A62 DEFB $04,$0F,$FF,$EF,$B0,$1C,$00,$00
 $9A6A DEFB $00,$03,$3D,$80,$F8,$00,$00,$00
 $9A72 DEFB $00,$CB,$00,$00,$00,$04,$93,$FF
 $9A7A DEFB $FF,$C0,$18,$00,$00,$00,$01,$5F
 $9A82 DEFB $C0,$78,$00,$00,$00,$00,$CB,$00
 $9A8A DEFB $00,$00,$05,$40,$FF,$EE,$00,$18
 $9A92 DEFB $00,$00,$00,$02,$D6,$20,$F8,$00
 $9A9A DEFB $00,$00,$00,$C9,$1E,$02,$24,$01
 $9AA2 DEFB $26,$02,$2A,$0B,$43,$02,$66,$04
 $9AAA DEFB $6C,$03,$79,$03,$C9,$1E,$02,$23
 $9AB2 DEFB $02,$26,$0E,$42,$04,$67,$02,$6B
 $9ABA DEFB $01,$6E,$01,$71,$01,$79,$03,$CB
 $9AC2 DEFB $00,$00,$00,$03,$30,$7F,$F0,$00
 $9ACA DEFB $7E,$18,$00,$00,$03,$94,$80,$F0
 $9AD2 DEFB $00,$00,$00,$00,$CB,$00,$00,$00
 $9ADA DEFB $02,$D9,$FF,$F0,$00,$7F,$3C,$00
 $9AE2 DEFB $00,$01,$B4,$80,$F0,$00,$00,$00
 $9AEA DEFB $00,$CB,$00,$00,$00,$02,$39,$7F
 $9AF2 DEFB $F0,$00,$7F,$04,$00,$00,$03,$52
 $9AFA DEFB $00,$F0,$00,$00,$00,$00,$C9,$1E
 $9B02 DEFB $02,$22,$01,$25,$01,$28,$0D,$41
 $9B0A DEFB $09,$66,$02,$6B,$01,$6D,$01,$77
 $9B12 DEFB $04,$C9,$1F,$01,$21,$02,$2A,$0B
 $9B1A DEFB $42,$05,$66,$02,$6C,$02,$6F,$01
 $9B22 DEFB $77,$01,$79,$02,$C9,$1F,$01,$21
 $9B2A DEFB $04,$2B,$0B,$66,$03,$6B,$02,$79
 $9B32 DEFB $02,$CA,$00,$03,$01,$CF,$1F,$FC
 $9B3A DEFB $00,$05,$02,$99,$04,$60,$00,$04
 $9B42 DEFB $00,$00,$CB,$00,$00,$00,$01,$A9
 $9B4A DEFB $BF,$FE,$00,$01,$8E,$00,$80,$02
 $9B52 DEFB $CA,$18,$E0,$00,$00,$00,$00,$CB
 $9B5A DEFB $00,$00,$00,$01,$8E,$FF,$FF,$00
 $9B62 DEFB $07,$FB,$80,$00,$02,$CE,$31,$E0
 $9B6A DEFB $00,$00,$00,$00,$CB,$00,$00,$00
 $9B72 DEFB $00,$AE,$7F,$FF,$00,$0F,$FF,$E0
 $9B7A DEFB $00,$05,$4D,$FB,$60,$00,$00,$00
 $9B82 DEFB $00,$C9,$20,$03,$25,$01,$27,$01
 $9B8A DEFB $2A,$0F,$43,$11,$66,$01,$6C,$0A
 $9B92 DEFB $79,$01,$C9,$20,$01,$27,$02,$2B
 $9B9A DEFB $0E,$42,$06,$4F,$06,$65,$02,$6C
 $9BA2 DEFB $0B,$78,$02,$C9,$1F,$01,$23,$01
 $9BAA DEFB $26,$02,$2A,$10,$41,$05,$50,$05
 $9BB2 DEFB $6A,$02,$6D,$09,$77,$03,$CB,$00
 $9BBA DEFB $00,$00,$01,$09,$1F,$FF,$C0,$7D
 $9BC2 DEFB $7F,$F8,$00,$00,$1B,$FB,$C0,$00
 $9BCA DEFB $00,$00,$00,$C9,$1F,$01,$25,$02
 $9BD2 DEFB $2A,$11,$41,$13,$65,$03,$6D,$04
 $9BDA DEFB $73,$02,$76,$04,$CB,$00,$00,$00
 $9BE2 DEFB $03,$07,$1F,$FF,$E0,$3F,$8B,$E0
 $9BEA DEFB $00,$04,$0D,$CC,$C0,$00,$00,$00
 $9BF2 DEFB $00,$CB,$00,$00,$00,$03,$8E,$3F
 $9BFA DEFB $FF,$E0,$0F,$FF,$80,$00,$0B,$23
 $9C02 DEFB $09,$80,$00,$00,$00,$00,$C9,$1E
 $9C0A DEFB $02,$23,$04,$29,$13,$63,$07,$6B
 $9C12 DEFB $01,$6D,$01,$73,$02,$76,$03,$C9
 $9C1A DEFB $1F,$01,$21,$05,$27,$15,$63,$0C
 $9C22 DEFB $70,$05,$76,$02,$CA,$00,$03,$01
 $9C2A DEFB $B4,$7F,$FF,$F0,$00,$04,$3F,$DD
 $9C32 DEFB $B6,$00,$05,$00,$00,$C9,$20,$01
 $9C3A DEFB $22,$02,$28,$15,$62,$08,$6B,$02
 $9C42 DEFB $6F,$01,$71,$06,$CA,$00,$04,$79
 $9C4A DEFB $FF,$DF,$F8,$00,$04,$4D,$80,$BC
 $9C52 DEFB $00,$05,$00,$00,$CA,$00,$04,$5F
 $9C5A DEFB $E7,$BF,$FC,$00,$04,$0E,$E4,$58
 $9C62 DEFB $00,$05,$00,$00,$CA,$00,$04,$5F
 $9C6A DEFB $EF,$FF,$FE,$00,$03,$01,$0F,$68
 $9C72 DEFB $B0,$00,$05,$00,$00,$C9,$20,$02
 $9C7A DEFB $25,$07,$2E,$13,$5E,$01,$64,$05
 $9C82 DEFB $6B,$01,$6D,$02,$70,$03,$CB,$00
 $9C8A DEFB $00,$00,$00,$A3,$77,$FF,$FF,$C0
 $9C92 DEFB $00,$00,$0C,$0F,$E4,$E0,$00,$00
 $9C9A DEFB $00,$00,$00,$C9,$21,$03,$25,$01
 $9CA2 DEFB $29,$02,$2D,$16,$5A,$03,$64,$09
 $9CAA DEFB $6F,$03,$C9,$20,$0A,$2C,$02,$2F
 $9CB2 DEFB $15,$58,$04,$64,$0B,$70,$02,$C9
 $9CBA DEFB $22,$07,$2D,$1A,$4A,$06,$54,$07
 $9CC2 DEFB $63,$0B,$6F,$01,$71,$01,$C9,$21
 $9CCA DEFB $03,$25,$01,$2B,$02,$2E,$2C,$63
 $9CD2 DEFB $0D,$71,$01,$C9,$20,$04,$27,$03
 $9CDA DEFB $2B,$03,$2F,$01,$31,$27,$63,$0C
 $9CE2 DEFB $70,$02,$C9,$20,$05,$29,$08,$33
 $9CEA DEFB $23,$63,$0C,$70,$01,$72,$01,$C9
 $9CF2 DEFB $21,$01,$26,$02,$2A,$08,$34,$20
 $9CFA DEFB $63,$0D,$71,$01,$C9,$20,$01,$22
 $9D02 DEFB $02,$25,$03,$2A,$28,$63,$0F,$C9
 $9D0A DEFB $23,$0A,$2F,$21,$63,$02,$67,$0A
 $9D12 DEFB $C9,$25,$04,$2B,$01,$2E,$20,$63
 $9D1A DEFB $01,$68,$08,$C9,$26,$03,$2A,$01
 $9D22 DEFB $2D,$20,$63,$02,$66,$09,$C9,$25
 $9D2A DEFB $03,$2D,$1F,$63,$02,$68,$05,$6E
 $9D32 DEFB $01,$C9,$26,$02,$2A,$01,$2C,$1F
 $9D3A DEFB $62,$02,$65,$08,$C9,$27,$01,$29
 $9D42 DEFB $02,$2C,$1E,$62,$03,$68,$04,$C9
 $9D4A DEFB $27,$02,$2A,$01,$2D,$1C,$62,$02
 $9D52 DEFB $66,$04,$C9,$27,$02,$2A,$01,$2D
 $9D5A DEFB $1A,$62,$03,$67,$02,$C9,$29,$01
 $9D62 DEFB $2B,$1A,$62,$0A,$C9,$2A,$19,$62
 $9D6A DEFB $02,$65,$01,$67,$01,$69,$07,$C9
 $9D72 DEFB $29,$17,$62,$01,$64,$01,$6F,$04
 $9D7A DEFB $C9,$27,$18,$62,$02,$73,$04,$C9
 $9D82 DEFB $25,$18,$62,$01,$75,$05,$C9,$22
 $9D8A DEFB $06,$29,$13,$61,$01,$76,$02,$79
 $9D92 DEFB $04,$C9,$20,$04,$2B,$0F,$61,$01
 $9D9A DEFB $77,$02,$7E,$03,$C9,$1E,$02,$2E
 $9DA2 DEFB $0C,$60,$01,$77,$02,$81,$03,$C9
 $9DAA DEFB $1C,$04,$2F,$0C,$5F,$02,$78,$02
 $9DB2 DEFB $84,$02,$C9,$1A,$02,$1E,$03,$31
 $9DBA DEFB $0B,$5F,$01,$78,$02,$86,$02,$C9
 $9DC2 DEFB $18,$02,$1F,$02,$32,$0A,$5E,$01
 $9DCA DEFB $78,$02,$88,$02,$C9,$16,$02,$20
 $9DD2 DEFB $02,$32,$0C,$5C,$02,$78,$02,$8A
 $9DDA DEFB $01,$C9,$14,$02,$20,$02,$33,$0B
 $9DE2 DEFB $5B,$02,$78,$02,$8B,$02,$C9,$12
 $9DEA DEFB $02,$20,$02,$35,$0A,$5A,$02,$78
 $9DF2 DEFB $02,$8D,$01,$C9,$11,$02,$21,$02
 $9DFA DEFB $39,$07,$58,$02,$78,$02,$8E,$01
 $9E02 DEFB $C9,$11,$01,$21,$02,$3C,$05,$57
 $9E0A DEFB $02,$78,$02,$8E,$02,$C9,$10,$02
 $9E12 DEFB $21,$02,$3E,$05,$55,$03,$78,$02
 $9E1A DEFB $8F,$02,$C9,$0F,$02,$22,$02,$40
 $9E22 DEFB $05,$54,$02,$78,$02,$90,$01,$C9
 $9E2A DEFB $0F,$02,$22,$02,$43,$04,$52,$02
 $9E32 DEFB $78,$02,$90,$01,$C9,$0E,$02,$22
 $9E3A DEFB $02,$46,$04,$50,$03,$78,$02,$90
 $9E42 DEFB $02,$C9,$0E,$02,$22,$02,$49,$04
 $9E4A DEFB $4F,$02,$78,$02,$91,$01,$C9,$0E
 $9E52 DEFB $02,$23,$02,$4B,$04,$78,$02,$91
 $9E5A DEFB $01,$C9,$0D,$02,$23,$02,$4D,$03
 $9E62 DEFB $78,$02,$91,$02,$C9,$0D,$02,$23
 $9E6A DEFB $02,$4C,$01,$4E,$01,$50,$01,$78
 $9E72 DEFB $02,$91,$02,$C9,$0D,$02,$23,$02
 $9E7A DEFB $4B,$02,$4E,$02,$51,$01,$78,$02
 $9E82 DEFB $92,$01,$C9,$0D,$02,$24,$02,$4A
 $9E8A DEFB $02,$4D,$01,$4F,$01,$51,$01,$78
 $9E92 DEFB $02,$92,$01,$C9,$0D,$02,$24,$02
 $9E9A DEFB $4A,$02,$4D,$01,$4F,$01,$51,$01
 $9EA2 DEFB $78,$02,$92,$01,$C9,$0C,$02,$24
 $9EAA DEFB $02,$4A,$03,$4E,$01,$51,$01,$78
 $9EB2 DEFB $02,$92,$01,$C9,$0C,$02,$24,$02
 $9EBA DEFB $4A,$03,$4E,$01,$50,$01,$77,$02
 $9EC2 DEFB $92,$01,$C9,$0C,$02,$24,$02,$4B
 $9ECA DEFB $03,$50,$01,$77,$02,$92,$01,$C9
 $9ED2 DEFB $0C,$03,$24,$02,$4C,$04,$77,$02
 $9EDA DEFB $92,$01,$C9,$0C,$03,$24,$02,$4D
 $9EE2 DEFB $02,$77,$02,$92,$01,$C9,$38,$14
 $9EEA DEFB $38,$14,$38,$14,$38,$14,$38,$01
 $9EF2 DEFB $78,$03,$38,$0A,$78,$02,$38,$03
 $9EFA DEFB $78,$01,$38,$01,$78,$03,$38,$0B
 $9F02 DEFB $78,$01,$38,$03,$78,$01,$38,$01
 $9F0A DEFB $78,$03,$38,$0B,$78,$01,$38,$03
 $9F12 DEFB $78,$01,$38,$01,$78,$03,$38,$0B
 $9F1A DEFB $78,$01,$38,$03,$78,$01,$38,$01
 $9F22 DEFB $78,$03,$38,$0B,$78,$01,$38,$03
 $9F2A DEFB $78,$01,$38,$01,$78,$03,$38,$0A
 $9F32 DEFB $78,$02,$38,$03,$78,$01,$38,$01
 $9F3A DEFB $78,$03,$38,$0A,$78,$02,$38,$03
 $9F42 DEFB $78,$01,$38,$14,$38,$14,$38,$14
 $9F4A DEFB $38,$14,$38,$14,$01,$5F,$C0,$78
 $9F52 DEFB $00,$00,$00,$00,$CB,$00,$00,$00
 $9F5A DEFB $05,$40,$00,$00,$00,$00,$00,$00
 $9F62 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9F6A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9F72 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9F7A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9F82 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9F8A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9F92 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9F9A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FA2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FB2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9FFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A002 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A00A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A012 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A01A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A022 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A02A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A032 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A03A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A042 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A04A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A052 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A05A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A062 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A06A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A072 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A07A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A082 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A08A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A092 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A09A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0A2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A0E2 DEFB $00

; Image Buffer
;
; Holds the image for the current level.
@label=Buffer_Image
g$A0E3 DEFB $00,$00,$00,$F3,$31,$F4,$AB,$37,$AF,$DD,$21,$00,$00,$11,$11,$00,$CD,$56,$05,$37
 $A0F7 DEFB $3E,$FF,$DD,$21,$00,$5B,$11,$5C,$44,$CD,$56,$05,$37,$AF,$DD,$21,$00,$00,$11,$11
 $A10B DEFB $00,$CD,$56,$05,$37,$3E,$FF,$DD,$21,$24,$AC,$11,$E0,$51,$CD,$56,$05,$37,$AF,$DD
 $A11F DEFB $21,$00,$00,$11,$11,$00,$CD,$56,$05,$37,$3E,$FF,$DD,$21,$00,$40,$11,$00,$1B,$CD
 $A133 DEFB $56,$05,$21,$AA,$D1,$E5,$F3,$AF,$DB,$FE,$2F,$E6,$1F,$28,$F9,$CD,$7E,$A2,$A7,$3E
 $A147 DEFB $C7,$DD,$21,$00,$40,$11,$00,$C0,$C3,$CA,$A2,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A15B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F3,$31,$F4,$AB,$AF,$D3,$FE
 $A16F DEFB $21,$00,$40,$01,$00,$18,$36,$00,$54,$1E,$01,$ED,$B0,$36,$07,$01,$FF,$02,$ED,$B0
 $A183 DEFB $CD,$7E,$A2,$37,$3E,$C7,$DD,$21,$00,$40,$11,$00,$C0,$CD,$93,$A1,$14,$08,$15,$F3
 $A197 DEFB $3E,$0F,$D3,$FE,$DB,$FE,$1F,$E6,$20,$F6,$02,$4F,$BF,$C0,$CD,$23,$A2,$30,$FA,$21
 $A1AB DEFB $0A,$00,$10,$FE,$2B,$7C,$B5,$20,$F9,$CD,$1F,$A2,$30,$EB,$06,$9C,$CD,$1F,$A2,$30
 $A1BF DEFB $E4,$3E,$C6,$B8,$30,$E0,$24,$20,$F1,$06,$C9,$CD,$23,$A2,$30,$D5,$78,$FE,$D4,$30
 $A1D3 DEFB $F4,$CD,$23,$A2,$D0,$79,$EE,$03,$4F,$26,$00,$06,$B0,$18,$1F,$08,$20,$07,$30,$0F
 $A1E7 DEFB $DD,$75,$00,$18,$0F,$CB,$11,$AD,$C0,$79,$1F,$4F,$13,$18,$07,$DD,$7E,$00,$AD,$C0
 $A1FB DEFB $DD,$23,$1B,$08,$06,$B2,$2E,$01,$CD,$1F,$A2,$D0,$3E,$CB,$B8,$CB,$15,$06,$B0,$D2
 $A20F DEFB $03,$A2,$7C,$AD,$67,$CD,$44,$A2,$7A,$B3,$20,$C7,$7C,$FE,$01,$C9,$CD,$23,$A2,$D0
 $A223 DEFB $3E,$16,$3D,$20,$FD,$A7,$04,$C8,$3E,$7F,$DB,$FE,$1F,$A9,$E6,$20,$28,$F4,$79,$2F
 $A237 DEFB $4F,$E6,$00,$F6,$08,$D3,$FE,$37,$C9,$01,$E4,$53,$00,$F5,$E5,$7B,$E6,$47,$67,$6F
 $A24B DEFB $22,$E1,$5A,$22,$FD,$5A,$3A,$43,$A2,$BA,$C2,$5B,$A2,$E1,$F1,$C9,$7A,$32,$43,$A2
 $A25F DEFB $2A,$41,$A2,$CB,$26,$D2,$6D,$A2,$24,$CB,$26,$E1,$F1,$C9,$3A,$40,$A2,$3D,$CA,$6A
 $A273 DEFB $A2,$32,$40,$A2,$2B,$22,$41,$A2,$C3,$62,$A2,$21,$E3,$51,$36,$03,$24,$06,$04,$36
 $A287 DEFB $02,$24,$10,$FB,$36,$03,$23,$06,$18,$36,$FF,$23,$10,$FB,$21,$E4,$51,$06,$18,$36
 $A29B DEFB $FF,$23,$10,$FB,$36,$C0,$24,$06,$04,$36,$40,$24,$10,$FB,$36,$C0,$21,$E4,$53,$06
 $A2AF DEFB $17,$36,$FF,$24,$36,$FF,$25,$23,$10,$F7,$36,$FF,$24,$36,$FF,$3E,$18,$32,$40,$A2
 $A2C3 DEFB $21,$FB,$53,$22,$41,$A2,$C9,$21,$39,$A1,$E5,$21,$20,$03,$CB,$7F,$28,$03,$21,$20
 $A2D7 DEFB $03,$08,$13,$DD,$2B,$F3,$3E,$02,$47,$10,$FE,$D3,$FE,$EE,$0F,$06,$A4,$2D,$20,$F5
 $A2EB DEFB $05,$25,$F2,$E0,$A2,$06,$2F,$10,$FE,$D3,$FE,$3E,$0D,$06,$37,$10,$FE,$D3,$FE,$01
 $A2FF DEFB $0E,$3B,$08,$6F,$C3,$0F,$A3,$7A,$B3,$28,$0C,$DD,$6E,$00,$7C,$AD,$67,$3E,$01,$37
 $A313 DEFB $C3,$2D,$A3,$6C,$18,$F4,$79,$CB,$78,$10,$FE,$30,$04,$06,$42,$10,$FE,$D3,$FE,$06
 $A327 DEFB $3E,$20,$EF,$05,$AF,$3C,$CB,$15,$C2,$1C,$A3,$1B,$DD,$23,$06,$31,$3E,$7F,$DB,$FE
 $A33B DEFB $1F,$D0,$CD,$44,$A2,$7A,$3C,$C2,$06,$A3,$06,$3B,$10,$FE,$C9,$00,$00,$00,$00,$00
 $A34F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A363 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A377 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A38B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A39F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A3B3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A3C7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A3DB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A3EF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A403 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A417 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A42B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A43F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A453 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A467 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A47B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A48F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A4A3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A4B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A4CB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A4DF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A4F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A507 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A51B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A52F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A543 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A557 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A56B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A57F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A593 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A5A7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A5BB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A5CF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A5E3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A5F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A60B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A61F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A633 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A647 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A65B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A66F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A683 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A697 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A6AB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A6BF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A6D3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A6E7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A6FB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A70F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A723 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A737 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A74B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A75F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A773 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A787 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A79B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A7AF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A7C3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A7D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A7EB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A7FF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A813 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A827 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A83B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A84F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A863 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A877 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A88B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A89F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A8B3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A8C7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A8DB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A8EF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A903 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A917 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A92B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A93F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A953 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A967 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A97B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A98F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A9A3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A9B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A9CB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A9DF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A9F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AA07 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AA1B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AA2F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AA43 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AA57 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AA6B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AA7F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AA93 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AAA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AABB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AACF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
@label=Buffer_Image_Attributes
 $AAE3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AAF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AB0B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AB1F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AB33 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AB47 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AB5B DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AB6F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AB83 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AB97 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $ABAB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $ABBF DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $ABD3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $ABE7 DEFB $00,$00,$00,$00,$62,$19,$00,$44,$00,$17,$A2,$AA,$D1,$00,$00,$00,$00,$00,$00,$00
 $ABFB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AC0F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AC23 DEFB $00

; Graphics Data: Items 01
;
; .
;
; .
;
; The whole spritesheet:
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($AC24-$B610-$01-$A0)@$B624-$B763(items-01) } UDGTABLE#
; .
; Each individual sprite:
; #UDGTABLE
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($AC24+{multiplier})-($AE90+{multiplier})-$01-$A0)@($B624+({id}+y*$0F)*$04)-($B663+({id}+y*$0F)*$04)-$01-$14(#FORMAT(items-01-{id:02}))! |
; !! } '' UDGTABLE#
@label=GraphicsData_Items_01
b$AC24 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AC38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AC4C DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AC60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$F8,$00,$00,$00,$00,$00
 $AC74 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FE,$00,$00,$00,$00,$00
 $AC88 DEFB $00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$80,$00,$00,$00,$00
 $AC9C DEFB $00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$E0,$00,$1C,$00,$00
 $ACB0 DEFB $00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$7E,$00,$00
 $ACC4 DEFB $00,$00,$40,$00,$01,$BB,$00,$00,$00,$00,$00,$00,$00,$00,$70,$00,$01,$01,$00,$00
 $ACD8 DEFB $00,$00,$40,$00,$00,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$70,$00,$03,$01,$80,$00
 $ACEC DEFB $00,$00,$80,$00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$70,$00,$03,$03,$C0,$00
 $AD00 DEFB $00,$01,$00,$00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$70,$00,$07,$03,$E0,$00
 $AD14 DEFB $00,$01,$00,$00,$00,$10,$00,$00,$00,$7F,$FE,$00,$00,$00,$70,$00,$07,$07,$F0,$00
 $AD28 DEFB $00,$02,$00,$00,$00,$38,$00,$00,$00,$FF,$FF,$00,$00,$00,$70,$00,$07,$0F,$F8,$00
 $AD3C DEFB $00,$02,$00,$00,$20,$38,$00,$00,$01,$FF,$FF,$80,$00,$00,$70,$00,$03,$3F,$FC,$00
 $AD50 DEFB $00,$04,$00,$00,$20,$7C,$00,$00,$03,$FF,$FF,$C0,$00,$00,$70,$00,$01,$FF,$FE,$00
 $AD64 DEFB $00,$04,$00,$00,$20,$7C,$00,$00,$07,$FF,$FF,$E0,$00,$00,$70,$00,$00,$7F,$FF,$00
 $AD78 DEFB $00,$04,$00,$00,$3F,$FF,$C0,$00,$03,$FF,$FF,$C0,$00,$00,$70,$00,$00,$3F,$FF,$80
 $AD8C DEFB $00,$08,$00,$00,$3F,$FF,$F0,$00,$01,$FF,$FF,$80,$00,$00,$70,$00,$00,$1F,$FF,$C0
 $ADA0 DEFB $00,$08,$00,$00,$3F,$FF,$F0,$00,$00,$FF,$FF,$00,$00,$00,$70,$00,$00,$0F,$FF,$E0
 $ADB4 DEFB $00,$08,$00,$00,$20,$7C,$38,$00,$00,$7F,$FE,$00,$00,$00,$70,$00,$00,$07,$FF,$E0
 $ADC8 DEFB $00,$1A,$00,$00,$20,$7C,$18,$00,$00,$3F,$FC,$00,$00,$00,$70,$00,$00,$03,$FF,$E0
 $ADDC DEFB $00,$E8,$80,$00,$20,$38,$18,$00,$00,$1F,$F8,$00,$00,$00,$70,$00,$00,$01,$FF,$C0
 $ADF0 DEFB $01,$B5,$C0,$00,$00,$00,$18,$00,$00,$0F,$F0,$00,$00,$00,$70,$00,$00,$00,$FF,$80
 $AE04 DEFB $01,$FF,$40,$00,$00,$00,$10,$00,$00,$07,$E0,$00,$00,$00,$70,$00,$00,$00,$FF,$C0
 $AE18 DEFB $03,$FF,$E0,$00,$00,$00,$10,$00,$00,$03,$C0,$00,$00,$00,$70,$00,$00,$00,$7E,$E0
 $AE2C DEFB $03,$FF,$20,$00,$00,$00,$18,$00,$00,$01,$80,$00,$00,$00,$70,$00,$00,$00,$18,$70
 $AE40 DEFB $03,$FF,$20,$00,$00,$00,$18,$00,$00,$00,$00,$00,$00,$00,$70,$00,$00,$00,$00,$38
 $AE54 DEFB $01,$F7,$60,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$70,$00,$00,$00,$00,$1C
 $AE68 DEFB $01,$E7,$C0,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$70,$00,$00,$00,$00,$0E
 $AE7C DEFB $00,$FF,$80,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$70,$00,$00,$00,$00,$06
 $AE90 DEFB $00,$3E,$00,$00,$00,$00,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AEA4 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $AEB8 DEFB $00,$00,$00,$00,$01,$FF,$E0,$1C,$00,$02,$00,$00,$00,$01,$80,$00,$00,$00,$00,$00
 $AECC DEFB $00,$00,$00,$00,$07,$FF,$F8,$1C,$00,$01,$00,$00,$00,$03,$C0,$00,$00,$00,$00,$00
 $AEE0 DEFB $00,$00,$00,$00,$0F,$80,$F8,$1C,$00,$07,$00,$00,$00,$03,$C0,$00,$00,$00,$00,$00
 $AEF4 DEFB $00,$00,$00,$00,$0E,$00,$3C,$3C,$00,$02,$00,$00,$00,$07,$E0,$00,$00,$00,$00,$00
 $AF08 DEFB $00,$00,$00,$00,$1E,$00,$3C,$3C,$00,$07,$00,$00,$00,$07,$E0,$00,$00,$00,$00,$00
 $AF1C DEFB $00,$00,$00,$00,$1C,$00,$1C,$7C,$00,$03,$00,$00,$00,$07,$E0,$00,$00,$00,$00,$00
 $AF30 DEFB $00,$00,$00,$00,$1C,$3E,$1C,$FC,$00,$02,$00,$00,$00,$07,$E0,$00,$00,$00,$00,$00
 $AF44 DEFB $00,$00,$00,$00,$1F,$FF,$FF,$FC,$00,$03,$00,$00,$00,$0F,$F0,$00,$00,$00,$00,$00
 $AF58 DEFB $00,$00,$00,$00,$1F,$FF,$FF,$F8,$00,$03,$00,$00,$00,$0F,$F0,$00,$00,$00,$00,$00
 $AF6C DEFB $00,$00,$00,$00,$1F,$FF,$FF,$F8,$00,$01,$80,$00,$00,$0F,$F0,$00,$08,$00,$00,$00
 $AF80 DEFB $00,$00,$00,$00,$1F,$FF,$FF,$F8,$00,$00,$C0,$00,$00,$0F,$F0,$00,$0E,$FF,$80,$08
 $AF94 DEFB $00,$00,$00,$00,$1F,$FF,$FF,$F0,$00,$00,$60,$00,$00,$0F,$F0,$00,$07,$FF,$FF,$FE
 $AFA8 DEFB $00,$7F,$FE,$00,$0F,$15,$17,$F0,$00,$00,$30,$00,$00,$0F,$F0,$00,$1F,$DB,$FF,$FE
 $AFBC DEFB $00,$7F,$FE,$00,$0F,$75,$77,$F0,$00,$00,$18,$00,$00,$0F,$F0,$00,$3F,$E5,$FC,$00
 $AFD0 DEFB $00,$7F,$FE,$00,$0F,$15,$37,$E0,$00,$00,$0C,$00,$00,$0F,$F0,$00,$3F,$FE,$80,$00
 $AFE4 DEFB $00,$7F,$FE,$00,$0F,$75,$77,$E0,$00,$00,$06,$00,$00,$0F,$F0,$00,$7E,$BF,$80,$00
 $AFF8 DEFB $00,$7F,$FF,$80,$0F,$71,$11,$E0,$00,$00,$03,$00,$00,$0F,$F0,$00,$7C,$90,$00,$00
 $B00C DEFB $00,$3F,$FC,$C0,$0F,$FF,$FF,$E0,$00,$00,$01,$80,$00,$0F,$F0,$00,$FE,$10,$00,$00
 $B020 DEFB $00,$3F,$FC,$C0,$07,$FF,$FF,$C0,$00,$00,$00,$C0,$00,$0F,$F0,$00,$FC,$E0,$00,$00
 $B034 DEFB $00,$3F,$FD,$80,$07,$FF,$FF,$C0,$00,$00,$00,$60,$00,$0F,$F0,$00,$FC,$00,$00,$00
 $B048 DEFB $00,$3F,$FF,$00,$07,$FF,$FF,$C0,$00,$00,$00,$30,$00,$0F,$F0,$00,$FC,$00,$00,$00
 $B05C DEFB $00,$3F,$FE,$00,$07,$FF,$FF,$C0,$00,$00,$00,$18,$00,$0F,$F0,$00,$78,$00,$00,$00
 $B070 DEFB $00,$1F,$F8,$00,$07,$FF,$FF,$C0,$00,$00,$00,$0C,$00,$0F,$F0,$00,$00,$00,$00,$00
 $B084 DEFB $38,$1F,$F8,$1C,$07,$FF,$FF,$C0,$00,$00,$00,$06,$00,$0F,$F0,$00,$00,$00,$00,$00
 $B098 DEFB $1F,$FF,$FF,$F8,$07,$FF,$FF,$C0,$00,$00,$00,$00,$00,$0F,$F0,$00,$00,$00,$00,$00
 $B0AC DEFB $07,$FF,$FF,$E0,$07,$FF,$FF,$C0,$00,$00,$00,$00,$00,$0F,$F0,$00,$00,$00,$00,$00
 $B0C0 DEFB $00,$00,$00,$00,$07,$FF,$FF,$C0,$00,$00,$00,$00,$00,$0F,$F0,$00,$00,$00,$00,$00
 $B0D4 DEFB $00,$00,$00,$00,$03,$FF,$FF,$80,$00,$00,$00,$00,$00,$0F,$F0,$00,$00,$00,$00,$00
 $B0E8 DEFB $00,$00,$00,$00,$00,$FF,$FE,$00,$00,$00,$00,$00,$00,$0F,$F0,$00,$00,$00,$00,$00
 $B0FC DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FC,$00,$00,$00,$00,$00
 $B110 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $B124 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $B138 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$55,$54,$00,$00,$00,$00,$00,$00
 $B14C DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$B6,$00,$00,$00,$FF,$FF,$00,$00,$00,$00
 $B160 DEFB $00,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$FC,$00,$55,$54,$FF,$FF,$00,$00,$00,$00
 $B174 DEFB $00,$03,$F0,$00,$00,$00,$00,$00,$00,$00,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $B188 DEFB $00,$0F,$D8,$00,$00,$00,$00,$00,$00,$00,$6C,$00,$55,$54,$00,$00,$00,$00,$00,$00
 $B19C DEFB $00,$3D,$FE,$00,$00,$00,$00,$00,$00,$00,$C4,$00,$00,$00,$FF,$FF,$79,$EF,$BE,$CE
 $B1B0 DEFB $00,$FF,$6F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$55,$54,$FF,$FF,$7D,$EF,$BE,$DF
 $B1C4 DEFB $07,$FD,$D5,$E0,$00,$00,$00,$18,$00,$00,$F8,$00,$00,$00,$00,$00,$7D,$EF,$BE,$DB
 $B1D8 DEFB $1F,$B7,$6F,$F8,$00,$00,$00,$78,$00,$00,$3E,$00,$55,$54,$00,$00,$6D,$8F,$BE,$DB
 $B1EC DEFB $2E,$C5,$FB,$D4,$00,$00,$01,$F8,$00,$00,$07,$00,$00,$00,$FF,$FF,$6D,$8D,$B6,$D8
 $B200 DEFB $3F,$BB,$6C,$B4,$00,$00,$07,$F8,$00,$00,$03,$00,$55,$54,$FF,$FF,$6D,$8D,$B6,$D8
 $B214 DEFB $36,$87,$41,$78,$00,$00,$1F,$F8,$00,$00,$03,$80,$00,$00,$00,$00,$6D,$8D,$B6,$DC
 $B228 DEFB $1C,$02,$C0,$14,$00,$00,$33,$E0,$00,$00,$61,$80,$55,$54,$00,$00,$6D,$8D,$B6,$DC
 $B23C DEFB $00,$06,$80,$00,$00,$00,$47,$80,$00,$00,$F1,$C0,$00,$00,$FF,$FF,$6D,$CD,$B6,$CE
 $B250 DEFB $00,$0B,$A0,$00,$00,$00,$8E,$00,$00,$01,$E1,$C0,$00,$00,$FF,$FF,$6D,$CD,$B6,$CE
 $B264 DEFB $00,$26,$C0,$00,$00,$00,$70,$00,$00,$03,$E1,$C0,$00,$00,$00,$00,$6D,$CD,$B6,$C7
 $B278 DEFB $00,$1C,$70,$00,$00,$00,$00,$00,$00,$07,$D1,$C0,$00,$00,$00,$00,$6D,$CD,$B6,$C7
 $B28C DEFB $00,$66,$CC,$00,$00,$00,$00,$00,$00,$63,$6B,$C0,$FF,$FF,$FF,$FF,$6D,$8D,$B6,$C3
 $B2A0 DEFB $00,$1F,$60,$00,$00,$1E,$00,$00,$00,$E0,$37,$C0,$FF,$FF,$FF,$FF,$6D,$8D,$B6,$C3
 $B2B4 DEFB $00,$04,$C0,$00,$00,$3F,$00,$00,$01,$F0,$1B,$80,$00,$00,$00,$00,$6D,$8D,$B6,$C3
 $B2C8 DEFB $00,$06,$80,$00,$00,$3F,$00,$00,$03,$BC,$1D,$00,$00,$00,$00,$00,$6D,$8D,$B6,$C3
 $B2DC DEFB $00,$03,$C0,$00,$00,$3F,$00,$00,$07,$1F,$FE,$80,$FF,$FF,$FF,$FF,$6D,$8D,$B6,$DB
 $B2F0 DEFB $00,$07,$0C,$00,$00,$3F,$00,$00,$0E,$0F,$FF,$40,$FF,$FF,$FF,$FF,$7D,$ED,$B6,$DB
 $B304 DEFB $00,$0C,$80,$00,$3F,$FF,$FF,$F8,$0C,$03,$F1,$C0,$00,$00,$00,$00,$7D,$ED,$B6,$DF
 $B318 DEFB $1F,$97,$1E,$F8,$3F,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$79,$ED,$B6,$CE
 $B32C DEFB $00,$65,$88,$00,$3F,$FF,$FF,$F8,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00
 $B340 DEFB $00,$88,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00
 $B354 DEFB $00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $B368 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $B37C DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00
 $B390 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00
 $B3A4 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $B3B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C3,$9E,$33,$5E,$00,$20,$40,$00
 $B3CC DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C7,$DF,$7B,$5F,$00,$10,$40,$00
 $B3E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C7,$DB,$7B,$5B,$00,$00,$00,$30
 $B3F4 DEFB $06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C6,$DB,$6B,$5B,$04,$00,$00,$40
 $B408 DEFB $06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C6,$DB,$6B,$5B,$02,$00,$00,$00
 $B41C DEFB $09,$00,$00,$00,$7F,$7E,$FC,$E6,$C3,$9E,$33,$5E,$C6,$DB,$6B,$5B,$00,$06,$D8,$00
 $B430 DEFB $10,$80,$00,$00,$7F,$7E,$FE,$E6,$C7,$DF,$7B,$5F,$C7,$DE,$6B,$5E,$00,$0F,$5A,$00
 $B444 DEFB $20,$40,$00,$00,$1C,$7E,$C6,$E6,$C7,$DB,$7B,$5F,$C7,$DE,$6B,$5E,$00,$1B,$5A,$06
 $B458 DEFB $30,$C0,$03,$C0,$1C,$66,$C6,$E6,$C6,$DB,$6B,$5B,$C6,$DB,$6B,$5F,$00,$32,$DB,$08
 $B46C DEFB $3F,$C0,$04,$20,$1C,$66,$C6,$E6,$C6,$DB,$6B,$59,$C6,$DB,$6B,$5B,$00,$32,$07,$00
 $B480 DEFB $3F,$C0,$08,$10,$1C,$66,$C6,$E6,$C6,$DB,$6B,$59,$C6,$DB,$6B,$5B,$00,$69,$FD,$00
 $B494 DEFB $3F,$C0,$0C,$30,$1C,$66,$C6,$E6,$C6,$DB,$6B,$59,$C6,$DB,$7B,$DB,$00,$10,$1E,$00
 $B4A8 DEFB $3F,$C0,$0B,$D0,$1C,$66,$FE,$E6,$C6,$DB,$6B,$59,$F6,$DF,$7B,$DB,$00,$68,$07,$00
 $B4BC DEFB $3F,$C0,$08,$10,$1C,$66,$FE,$FE,$C7,$DB,$6B,$59,$F6,$DE,$31,$9B,$00,$11,$4F,$80
 $B4D0 DEFB $1F,$80,$08,$10,$1C,$66,$FC,$7C,$C7,$DE,$6B,$5B,$00,$00,$00,$00,$00,$60,$9F,$00
 $B4E4 DEFB $20,$40,$0C,$30,$1C,$66,$F8,$38,$C6,$DE,$6B,$5E,$00,$00,$00,$00,$00,$14,$7E,$00
 $B4F8 DEFB $3F,$C0,$0F,$F0,$1C,$66,$DC,$38,$C6,$DB,$6B,$5E,$78,$E7,$9F,$B6,$00,$29,$FC,$00
 $B50C DEFB $29,$C0,$0F,$F0,$1C,$66,$CC,$38,$C6,$DB,$6B,$5B,$7D,$F6,$DF,$B6,$00,$17,$F8,$00
 $B520 DEFB $3E,$C0,$07,$E0,$1C,$66,$CC,$38,$C6,$DB,$6B,$59,$6D,$B6,$C6,$36,$00,$0B,$F0,$00
 $B534 DEFB $29,$40,$07,$E0,$1C,$66,$CE,$38,$C6,$DB,$6B,$59,$6D,$B6,$C6,$36,$00,$15,$C0,$00
 $B548 DEFB $26,$40,$03,$C0,$1C,$66,$C6,$38,$C6,$DB,$6B,$59,$6D,$B6,$C6,$36,$00,$0B,$E0,$00
 $B55C DEFB $38,$C0,$03,$C0,$1C,$66,$C6,$38,$C6,$DB,$6B,$59,$7D,$F6,$C6,$3E,$00,$17,$C0,$00
 $B570 DEFB $1F,$80,$01,$80,$1C,$7E,$C6,$38,$F6,$DB,$7B,$D9,$79,$F7,$86,$1C,$00,$0B,$E0,$00
 $B584 DEFB $20,$C0,$01,$80,$1C,$7E,$C6,$38,$F6,$DF,$7B,$D9,$61,$B7,$86,$1C,$00,$17,$C0,$00
 $B598 DEFB $3F,$C0,$01,$80,$1C,$7E,$C6,$38,$F6,$DE,$31,$99,$61,$B7,$C6,$1C,$00,$1B,$E0,$00
 $B5AC DEFB $3F,$C0,$07,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$61,$B6,$C6,$1C,$00,$05,$C0,$00
 $B5C0 DEFB $3F,$C0,$09,$90,$00,$00,$00,$00,$00,$00,$00,$00,$61,$B6,$C6,$1C,$00,$00,$00,$00
 $B5D4 DEFB $3F,$C0,$13,$C8,$00,$00,$00,$00,$00,$00,$00,$00,$61,$B6,$C6,$1C,$00,$00,$00,$00
 $B5E8 DEFB $1F,$80,$08,$10,$00,$00,$00,$00,$00,$00,$00,$00,$61,$B6,$C6,$1C,$00,$00,$00,$00
 $B5FC DEFB $0F,$00,$07,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$61,$B6,$C6,$1C,$00,$00,$00,$00
 $B610 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
@label=GraphicsData_Items_01_Attributes
 $B624 DEFB $45,$45,$45,$45,$07,$45,$45,$07,$44,$44,$07,$44,$04,$05,$05,$05,$47,$47,$47,$47
 $B638 DEFB $45,$45,$45,$45,$05,$05,$05,$07,$46,$46,$06,$06,$44,$06,$06,$44,$47,$7B,$43,$43
 $B64C DEFB $45,$45,$45,$45,$45,$05,$45,$07,$45,$45,$05,$05,$06,$06,$06,$44,$43,$43,$43,$43
 $B660 DEFB $45,$05,$05,$45,$45,$05,$01,$07,$45,$45,$05,$05,$06,$06,$06,$44,$43,$43,$43,$06
 $B674 DEFB $05,$05,$07,$07,$46,$46,$46,$06,$06,$46,$01,$06,$06,$46,$46,$06,$46,$46,$46,$46
 $B688 DEFB $07,$06,$06,$04,$06,$06,$06,$06,$06,$47,$06,$07,$06,$06,$06,$06,$06,$05,$45,$45
 $B69C DEFB $04,$04,$04,$44,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$45,$05,$05
 $B6B0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$46,$46,$46,$46
 $B6C4 DEFB $06,$06,$06,$06,$47,$47,$06,$06,$56,$56,$56,$56,$4F,$4F,$3A,$3A,$46,$46,$46,$46
 $B6D8 DEFB $06,$06,$06,$06,$47,$47,$06,$06,$56,$56,$56,$56,$4F,$4F,$3A,$3A,$04,$04,$04,$04
 $B6EC DEFB $46,$46,$46,$46,$47,$42,$06,$06,$56,$56,$56,$56,$3A,$3A,$3A,$3A,$44,$44,$44,$44
 $B700 DEFB $03,$03,$03,$03,$04,$04,$04,$04,$56,$56,$56,$56,$3A,$3A,$3A,$3A,$46,$46,$46,$46
 $B714 DEFB $46,$46,$46,$46,$45,$45,$45,$45,$43,$43,$43,$43,$42,$42,$42,$42,$46,$46,$46,$46
 $B728 DEFB $42,$42,$46,$46,$45,$45,$45,$45,$43,$43,$43,$43,$43,$43,$43,$43,$46,$46,$46,$46
 $B73C DEFB $46,$46,$42,$42,$05,$05,$05,$05,$42,$42,$42,$42,$43,$43,$43,$43,$46,$46,$46,$46
 $B750 DEFB $42,$42,$46,$46,$05,$05,$05,$05,$42,$42,$42,$42,$42,$42,$42,$42,$46,$46,$46,$46
 $B764 DEFB $00

; Graphics Data: Items 02
;
; .
;
; .
;
; The whole spritesheet:
; #UDGTABLE { #UDGARRAY$14,scale=$02,step=$14($B765-$C151-$01-$A0)@$C165-$C2A4(items-02) } UDGTABLE#
; .
; Each individual sprite:
; #UDGTABLE
; #FOR$00,$03''y'
; { #FOR$00,$04(x, =h #N(x+($05*y)), | ) }
; { #FOR$00,$04!!x!
;   #LET(id=(x+($05*y)))#LET(multiplier=({id}+y*$9B)*$04)
;   #UDGARRAY$04,scale=$02,step=$14(($B765+{multiplier})-($B9D1+{multiplier})-$01-$A0)@($C165+({id}+y*$0F)*$04)-($C2A4+({id}+y*$0F)*$04)-$01-$14(#FORMAT(items-02-{id:02}))! |
; !! } '' UDGTABLE#
@label=GraphicsData_Items_02
b$B765 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FE,$7F,$FF,$FF,$FE,$00,$00,$00,$00
 $B779 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$06,$60,$01,$80,$00,$00,$01,$00,$00,$00,$00
 $B78D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$06,$60,$01,$80,$00,$00,$01,$00,$00,$00,$00
 $B7A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$06,$60,$01,$80,$00,$00,$01,$00,$00,$00,$00
 $B7B5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$06,$60,$01,$80,$3F,$FC,$01,$00,$00,$00,$00
 $B7C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$06,$60,$01,$80,$7F,$FE,$01,$00,$00,$00,$00
 $B7DD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$81,$80,$F0,$07,$01,$00,$00,$00,$00
 $B7F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$81,$FF,$FF,$C1,$81,$EF,$FB,$81,$00,$00,$00,$00
 $B805 DEFB $00,$00,$00,$00,$00,$02,$60,$00,$83,$86,$60,$C1,$83,$D0,$05,$C1,$00,$00,$00,$60
 $B819 DEFB $00,$00,$E0,$00,$00,$35,$28,$00,$83,$7F,$FF,$41,$83,$A0,$02,$E1,$01,$FF,$C0,$70
 $B82D DEFB $00,$07,$80,$30,$00,$22,$56,$00,$83,$46,$61,$41,$83,$40,$01,$E1,$01,$FF,$FF,$FC
 $B841 DEFB $00,$3E,$00,$78,$00,$94,$12,$00,$83,$46,$61,$C1,$83,$40,$00,$01,$03,$CB,$FF,$FC
 $B855 DEFB $00,$FC,$00,$B8,$00,$5A,$4E,$80,$83,$46,$60,$01,$83,$40,$00,$01,$03,$FF,$FF,$FC
 $B869 DEFB $03,$F0,$00,$BC,$01,$04,$2D,$00,$83,$46,$60,$01,$9F,$F8,$00,$01,$03,$FF,$FF,$F8
 $B87D DEFB $0F,$E0,$01,$7C,$00,$CC,$4E,$80,$83,$7F,$FF,$01,$90,$08,$00,$01,$07,$3E,$70,$00
 $B891 DEFB $1F,$80,$01,$7E,$02,$F6,$35,$40,$83,$86,$61,$81,$9F,$F8,$00,$01,$07,$FC,$60,$00
 $B8A5 DEFB $3F,$00,$02,$FE,$05,$1C,$41,$C0,$81,$FF,$FE,$C1,$83,$40,$00,$01,$06,$38,$C0,$00
 $B8B9 DEFB $7F,$80,$02,$C7,$05,$DC,$2F,$20,$80,$FF,$FF,$41,$83,$40,$00,$01,$0F,$FF,$00,$00
 $B8CD DEFB $FF,$C0,$05,$BB,$0A,$F6,$14,$A0,$80,$06,$63,$41,$83,$47,$C0,$01,$0C,$60,$00,$00
 $B8E1 DEFB $80,$FF,$FF,$7D,$08,$A2,$30,$50,$80,$06,$63,$41,$83,$4F,$E0,$01,$0F,$E0,$00,$00
 $B8F5 DEFB $7F,$C0,$07,$FF,$07,$3A,$57,$10,$83,$86,$63,$41,$83,$5F,$F0,$31,$18,$C0,$00,$00
 $B909 DEFB $71,$7F,$FE,$FE,$13,$B4,$47,$20,$82,$86,$63,$41,$83,$78,$38,$71,$18,$C0,$00,$00
 $B91D DEFB $3E,$3F,$FC,$7C,$1B,$5C,$39,$D0,$82,$FF,$FF,$41,$83,$77,$DF,$D1,$1F,$E0,$00,$00
 $B931 DEFB $1C,$00,$00,$38,$04,$0A,$47,$20,$82,$FF,$FF,$41,$83,$68,$2F,$A1,$00,$00,$00,$00
 $B945 DEFB $00,$00,$00,$00,$01,$51,$3E,$80,$83,$06,$60,$81,$83,$10,$10,$41,$00,$00,$00,$00
 $B959 DEFB $00,$00,$00,$00,$06,$32,$48,$40,$81,$FF,$FF,$01,$83,$E0,$0F,$81,$00,$00,$00,$00
 $B96D DEFB $00,$00,$00,$00,$01,$46,$2A,$80,$80,$06,$60,$01,$80,$00,$00,$01,$00,$00,$00,$00
 $B981 DEFB $00,$00,$00,$00,$00,$28,$12,$00,$80,$06,$60,$01,$80,$00,$00,$01,$00,$00,$00,$00
 $B995 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$06,$60,$01,$80,$00,$00,$01,$00,$00,$00,$00
 $B9A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$06,$60,$01,$80,$00,$00,$01,$00,$00,$00,$00
 $B9BD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$80,$06,$60,$01,$80,$00,$00,$01,$00,$00,$00,$00
 $B9D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FE,$7F,$FF,$FF,$FE,$00,$00,$00,$00
 $B9E5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00
 $B9F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$80,$00,$30,$00,$00,$00,$00
 $BA0D DEFB $00,$00,$00,$00,$0E,$00,$00,$C0,$00,$00,$00,$00,$03,$E0,$00,$70,$00,$00,$00,$00
 $BA21 DEFB $00,$00,$00,$00,$1F,$00,$01,$F0,$00,$00,$00,$00,$01,$F0,$00,$F0,$00,$00,$00,$00
 $BA35 DEFB $00,$01,$F8,$00,$31,$00,$01,$18,$00,$00,$00,$00,$01,$F8,$00,$F0,$00,$00,$00,$00
 $BA49 DEFB $00,$0F,$FE,$00,$26,$80,$02,$CC,$00,$00,$00,$00,$00,$FC,$01,$F0,$00,$00,$00,$00
 $BA5D DEFB $00,$3F,$FF,$00,$6F,$C0,$03,$EC,$00,$00,$00,$00,$00,$FE,$03,$E0,$00,$00,$00,$00
 $BA71 DEFB $00,$7F,$FF,$00,$4F,$40,$06,$F6,$00,$00,$00,$00,$00,$7E,$03,$E0,$00,$00,$00,$00
 $BA85 DEFB $01,$F9,$FF,$80,$57,$A0,$05,$FA,$00,$00,$00,$00,$00,$7F,$07,$E0,$00,$00,$00,$00
 $BA99 DEFB $03,$FF,$FF,$80,$57,$E0,$07,$F2,$01,$FF,$00,$00,$00,$3F,$87,$C0,$00,$00,$00,$00
 $BAAD DEFB $07,$FF,$FF,$C0,$4F,$C0,$03,$F2,$07,$FF,$E0,$00,$00,$0F,$8F,$C0,$00,$00,$00,$00
 $BAC1 DEFB $07,$FF,$FF,$C0,$6F,$F0,$0E,$36,$07,$FF,$FE,$00,$00,$07,$CF,$80,$01,$D7,$C0,$80
 $BAD5 DEFB $0F,$FF,$FF,$C0,$6E,$70,$0C,$2C,$0F,$2B,$FF,$E0,$00,$01,$EF,$80,$07,$FE,$F8,$08
 $BAE9 DEFB $0C,$3F,$FF,$C0,$34,$30,$08,$1C,$0F,$FF,$FF,$FC,$00,$00,$FF,$00,$1F,$FF,$AE,$A0
 $BAFD DEFB $08,$0F,$FF,$E0,$3C,$18,$10,$18,$1D,$64,$D7,$FC,$00,$07,$FE,$00,$3F,$00,$D7,$C0
 $BB11 DEFB $00,$07,$FF,$E0,$1C,$08,$11,$30,$2F,$FF,$FF,$FC,$00,$1F,$FE,$00,$78,$00,$1F,$80
 $BB25 DEFB $00,$1F,$FF,$E0,$04,$98,$1A,$70,$2F,$2F,$FF,$C0,$00,$7F,$FE,$00,$70,$18,$06,$40
 $BB39 DEFB $00,$1F,$FF,$E0,$0C,$78,$1E,$60,$27,$FF,$F8,$00,$00,$F3,$FF,$00,$60,$7E,$0F,$20
 $BB4D DEFB $00,$3F,$FF,$E0,$0A,$78,$1C,$C0,$17,$FF,$80,$00,$01,$FB,$FF,$00,$70,$7E,$3E,$00
 $BB61 DEFB $00,$3F,$FF,$E0,$07,$38,$1C,$A0,$11,$FC,$00,$00,$01,$FF,$FF,$00,$7C,$E7,$FA,$00
 $BB75 DEFB $00,$7F,$FF,$F0,$03,$38,$19,$C0,$10,$F8,$00,$00,$01,$FF,$FF,$00,$3F,$EB,$FC,$00
 $BB89 DEFB $00,$7F,$FF,$F0,$03,$9C,$39,$80,$20,$F8,$00,$00,$00,$FF,$FF,$00,$3F,$D7,$D0,$00
 $BB9D DEFB $00,$7F,$FF,$F0,$05,$DC,$33,$A0,$20,$70,$00,$00,$00,$7F,$FF,$00,$0F,$EB,$40,$00
 $BBB1 DEFB $00,$7F,$FF,$F0,$05,$CC,$33,$A0,$20,$70,$00,$00,$00,$1B,$FF,$00,$05,$D3,$00,$00
 $BBC5 DEFB $00,$FF,$FF,$F0,$02,$E8,$17,$40,$10,$70,$00,$00,$00,$07,$FE,$00,$00,$F7,$00,$00
 $BBD9 DEFB $00,$FF,$FF,$F0,$02,$F8,$1F,$40,$10,$F8,$00,$00,$00,$03,$FE,$00,$00,$6E,$00,$00
 $BBED DEFB $00,$FF,$FF,$F0,$03,$F8,$1F,$C0,$08,$F8,$00,$00,$00,$03,$FE,$00,$00,$7E,$00,$00
 $BC01 DEFB $00,$FF,$FF,$F0,$01,$F8,$1F,$80,$08,$FC,$00,$00,$00,$38,$7E,$00,$00,$38,$00,$00
 $BC15 DEFB $00,$FF,$FF,$F0,$01,$B8,$1D,$80,$10,$38,$00,$00,$00,$3F,$7E,$00,$00,$00,$00,$00
 $BC29 DEFB $00,$00,$00,$00,$00,$D0,$0B,$00,$00,$00,$00,$00,$00,$3F,$70,$00,$00,$00,$00,$00
 $BC3D DEFB $00,$00,$00,$00,$00,$70,$0E,$00,$00,$00,$00,$00,$00,$07,$00,$00,$00,$00,$00,$00
 $BC51 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BC65 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BC79 DEFB $00,$00,$00,$00,$00,$00,$C0,$00,$00,$01,$DC,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BC8D DEFB $00,$00,$00,$00,$00,$01,$E0,$00,$00,$07,$77,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BCA1 DEFB $00,$00,$00,$00,$00,$00,$C0,$00,$00,$1E,$0B,$00,$00,$00,$00,$00,$1F,$FC,$00,$00
 $BCB5 DEFB $00,$00,$00,$00,$00,$01,$E0,$00,$00,$1A,$02,$80,$00,$00,$00,$00,$3F,$FE,$00,$00
 $BCC9 DEFB $00,$00,$00,$00,$00,$00,$C0,$00,$00,$14,$01,$80,$00,$00,$00,$00,$7F,$FF,$00,$00
 $BCDD DEFB $00,$00,$00,$00,$00,$01,$E0,$00,$00,$38,$03,$00,$00,$00,$00,$00,$7F,$FF,$00,$00
 $BCF1 DEFB $00,$00,$00,$00,$00,$00,$C0,$00,$00,$30,$01,$00,$3F,$FF,$FF,$FC,$7F,$FF,$00,$00
 $BD05 DEFB $00,$3C,$3C,$00,$00,$00,$C0,$00,$00,$28,$01,$80,$40,$82,$81,$02,$7E,$3F,$00,$00
 $BD19 DEFB $00,$7E,$7E,$00,$00,$00,$C0,$00,$00,$50,$01,$80,$4E,$8F,$F1,$12,$7E,$3F,$08,$10
 $BD2D DEFB $00,$FF,$FF,$00,$00,$00,$C0,$00,$00,$70,$01,$00,$43,$9F,$F1,$FA,$00,$3F,$1C,$38
 $BD41 DEFB $03,$FF,$FF,$00,$00,$00,$C0,$00,$00,$20,$02,$80,$57,$BA,$81,$FA,$00,$3F,$3E,$7C
 $BD55 DEFB $07,$F8,$3F,$80,$00,$00,$C0,$00,$00,$60,$01,$80,$5F,$BA,$81,$02,$00,$3F,$7F,$FE
 $BD69 DEFB $1F,$C0,$07,$E0,$00,$00,$C0,$00,$00,$D0,$03,$00,$4D,$9F,$E1,$FA,$00,$7F,$3F,$FC
 $BD7D DEFB $3E,$00,$01,$F0,$00,$00,$C0,$00,$00,$C0,$03,$00,$5F,$8F,$F1,$0A,$00,$FF,$1F,$F8
 $BD91 DEFB $1F,$00,$00,$78,$00,$00,$C0,$00,$00,$60,$01,$80,$4F,$82,$B9,$FA,$01,$FE,$0F,$F0
 $BDA5 DEFB $0F,$80,$00,$F0,$00,$00,$C0,$00,$00,$60,$02,$80,$57,$82,$B9,$02,$03,$FC,$0F,$F0
 $BDB9 DEFB $07,$E0,$03,$E0,$00,$00,$C0,$00,$00,$20,$01,$00,$5E,$9F,$F1,$FA,$0F,$F0,$1F,$F8
 $BDCD DEFB $03,$F0,$0F,$E0,$00,$08,$C0,$00,$00,$30,$03,$00,$5C,$9F,$E1,$0A,$1F,$E0,$3F,$FC
 $BDE1 DEFB $03,$FF,$FF,$C0,$00,$18,$C0,$00,$00,$34,$0E,$00,$4E,$82,$81,$FA,$3F,$C0,$7F,$FE
 $BDF5 DEFB $01,$FF,$FF,$80,$00,$18,$C0,$00,$00,$0D,$16,$00,$40,$80,$01,$02,$7F,$80,$3E,$7C
 $BE09 DEFB $00,$7F,$FE,$00,$00,$1C,$C4,$00,$00,$0E,$98,$00,$3F,$FF,$FF,$FC,$7F,$00,$1C,$38
 $BE1D DEFB $00,$1F,$F8,$00,$00,$0F,$EC,$00,$00,$03,$F0,$00,$3F,$C0,$03,$FC,$7E,$00,$08,$10
 $BE31 DEFB $00,$00,$00,$00,$00,$0F,$7C,$00,$00,$01,$C0,$00,$1F,$60,$06,$F8,$7C,$00,$00,$00
 $BE45 DEFB $00,$00,$00,$00,$00,$07,$F8,$00,$00,$01,$40,$00,$0F,$BF,$FD,$F0,$7F,$FF,$00,$00
 $BE59 DEFB $00,$00,$00,$00,$00,$07,$78,$00,$00,$00,$80,$00,$00,$00,$00,$00,$7F,$FF,$00,$00
 $BE6D DEFB $00,$00,$00,$00,$00,$0F,$6C,$00,$00,$00,$80,$00,$00,$00,$00,$00,$7F,$FF,$00,$00
 $BE81 DEFB $00,$00,$00,$00,$00,$0F,$FC,$06,$00,$01,$C0,$00,$00,$00,$00,$00,$7F,$FF,$00,$00
 $BE95 DEFB $00,$00,$00,$00,$00,$07,$58,$68,$00,$01,$C0,$00,$00,$00,$00,$00,$7F,$FF,$00,$00
 $BEA9 DEFB $00,$00,$00,$00,$00,$07,$F9,$90,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BEBD DEFB $00,$00,$00,$00,$00,$03,$F6,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BED1 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BEE5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BEF9 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BF0D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BF21 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BF35 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BF49 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BF5D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BF71 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BF85 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BF99 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BFAD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BFC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BFD5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BFE9 DEFB $18,$01,$80,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $BFFD DEFB $3C,$03,$C0,$3C,$3F,$C7,$E3,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $C011 DEFB $42,$04,$20,$42,$38,$0E,$73,$9C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $C025 DEFB $81,$08,$10,$81,$3B,$CC,$33,$8C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $C039 DEFB $00,$F0,$0F,$00,$39,$CE,$73,$9C,$C6,$F7,$B8,$CC,$7C,$73,$EF,$B6,$7C,$7B,$DE,$5E
 $C04D DEFB $00,$60,$06,$00,$3F,$C7,$E3,$F8,$C6,$F7,$B5,$AC,$7E,$FB,$EF,$B6,$38,$7B,$5E,$5E
 $C061 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$C6,$D6,$35,$AC,$66,$DB,$6C,$B6,$38,$63,$5A,$8C
 $C075 DEFB $78,$73,$EC,$9C,$3F,$38,$F3,$9C,$C6,$D6,$35,$AC,$66,$DB,$0C,$36,$38,$63,$DA,$0C
 $C089 DEFB $7C,$FB,$EC,$BE,$39,$B8,$C6,$30,$C6,$D6,$35,$AC,$66,$DB,$0C,$36,$38,$63,$5A,$0C
 $C09D DEFB $64,$CB,$2C,$B6,$3F,$38,$E3,$18,$C6,$D6,$35,$EC,$66,$DB,$0C,$36,$38,$7B,$5A,$0C
 $C0B1 DEFB $64,$CB,$2C,$A0,$39,$B8,$C1,$8C,$C6,$E7,$35,$EC,$7C,$DB,$0E,$36,$7C,$7B,$5A,$0C
 $C0C5 DEFB $78,$CB,$2C,$B0,$3F,$3E,$F7,$38,$C6,$E7,$39,$AC,$7C,$DB,$6E,$1C,$00,$00,$00,$00
 $C0D9 DEFB $7C,$CB,$2C,$9C,$00,$00,$00,$00,$C6,$D6,$39,$AC,$66,$DB,$6C,$1C,$7D,$DE,$7B,$C0
 $C0ED DEFB $66,$CB,$2C,$8E,$66,$DE,$F6,$E6,$C6,$D6,$35,$AC,$66,$DB,$6C,$1C,$6D,$8C,$7B,$40
 $C101 DEFB $66,$CB,$2C,$86,$D7,$D8,$D6,$8D,$C6,$D6,$35,$AC,$66,$DB,$2C,$1C,$61,$CC,$6B,$40
 $C115 DEFB $66,$CB,$2C,$B6,$D5,$5C,$D6,$8D,$C6,$D6,$35,$AC,$66,$DB,$2C,$9C,$6D,$CC,$6B,$40
 $C129 DEFB $7E,$FB,$2F,$BE,$F5,$5C,$F6,$8F,$F6,$F7,$B5,$AF,$7E,$FB,$EF,$9C,$65,$8C,$6B,$55
 $C13D DEFB $7C,$73,$2F,$9C,$D5,$58,$A6,$8D,$F6,$F7,$B5,$AF,$7C,$73,$EF,$9C,$7D,$CC,$6B,$D5
 $C151 DEFB $00,$00,$00,$00,$D5,$5E,$96,$ED,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
@label=GraphicsData_Items_02_Attributes
 $C165 DEFB $47,$47,$47,$47,$07,$07,$07,$07,$44,$44,$44,$44,$05,$05,$05,$05,$43,$43,$43,$43
 $C179 DEFB $47,$47,$47,$47,$07,$07,$07,$07,$44,$44,$44,$44,$05,$05,$05,$05,$03,$03,$43,$43
 $C18D DEFB $47,$47,$47,$47,$07,$07,$07,$07,$44,$44,$44,$44,$05,$05,$05,$05,$03,$03,$03,$43
 $C1A1 DEFB $47,$47,$47,$47,$07,$07,$07,$07,$44,$44,$44,$44,$05,$05,$05,$05,$43,$43,$43,$43
 $C1B5 DEFB $42,$42,$42,$42,$06,$06,$06,$06,$44,$44,$44,$44,$47,$47,$47,$47,$46,$46,$46,$46
 $C1C9 DEFB $42,$42,$42,$42,$06,$06,$06,$06,$44,$44,$44,$44,$47,$47,$47,$47,$46,$46,$46,$47
 $C1DD DEFB $42,$42,$42,$42,$06,$06,$06,$06,$04,$04,$04,$04,$47,$47,$47,$47,$06,$45,$46,$47
 $C1F1 DEFB $42,$42,$42,$42,$06,$06,$06,$06,$04,$04,$04,$04,$47,$47,$47,$07,$06,$45,$46,$46
 $C205 DEFB $42,$42,$42,$42,$44,$44,$44,$44,$46,$46,$46,$46,$07,$46,$46,$07,$43,$43,$45,$45
 $C219 DEFB $42,$42,$42,$42,$44,$44,$44,$44,$46,$46,$46,$46,$07,$4E,$4E,$07,$42,$42,$42,$42
 $C22D DEFB $42,$42,$42,$42,$44,$44,$44,$44,$46,$46,$46,$46,$07,$4E,$4E,$07,$42,$42,$43,$43
 $C241 DEFB $42,$42,$42,$42,$44,$44,$44,$44,$46,$45,$45,$46,$07,$46,$46,$07,$43,$43,$45,$45
 $C255 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$46,$46,$46,$46,$46,$46,$45,$45,$45,$45
 $C269 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$46,$46,$46,$46,$46,$46,$45,$45,$45,$45
 $C27D DEFB $46,$46,$46,$46,$46,$46,$46,$46,$45,$45,$45,$45,$44,$44,$44,$44,$46,$46,$46,$46
 $C291 DEFB $45,$45,$45,$45,$45,$45,$45,$45,$44,$44,$44,$44,$44,$44,$44,$44,$46,$46,$46,$46
 $C2A5 DEFB $56

; Data: Playarea Surround
;
; #PUSHS
; #UDGTABLE
; { #SIM(start=$D1F1,stop=$D1F7)#SCR$02(playarea-surround) }
; UDGTABLE#
; #POPS
@label=Data_PlayareaSurround
b$C2A6 DEFB $00,$04,$60,$00,$03,$06,$FF,$FF
 $C2AE DEFB $FF,$FF,$60,$00,$03,$18,$00,$03
 $C2B6 DEFB $03,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $C2BE DEFB $FF,$FF,$F8,$00,$04,$7F,$00,$1A
 $C2C6 DEFB $0C,$00,$01,$0F,$FF,$E0,$7F,$00
 $C2CE DEFB $10,$01,$FF,$FF,$00,$0C,$7F,$00
 $C2D6 DEFB $10,$03,$07,$E1,$00,$08,$55,$55
 $C2DE DEFB $55,$55,$FF,$00,$10,$03,$00,$1F
 $C2E6 DEFB $03,$00,$1F,$03,$00,$0A,$07,$00
 $C2EE DEFB $14,$03,$00,$0E,$F0,$00,$01,$40
 $C2F6 DEFB $00,$01,$06,$FF,$FF,$FF,$FF,$60
 $C2FE DEFB $02,$00,$02,$18,$00,$01,$26,$00
 $C306 DEFB $01,$03,$FF,$FF,$FF,$FF,$FF,$FF
 $C30E DEFB $FF,$FF,$FF,$FC,$00,$04,$FF,$00
 $C316 DEFB $1A,$0C,$00,$01,$0F,$FF,$C0,$FF
 $C31E DEFB $00,$10,$03,$00,$01,$01,$00,$0C
 $C326 DEFB $FF,$00,$10,$03,$07,$C1,$00,$08
 $C32E DEFB $FF,$FF,$FF,$FF,$FF,$00,$10,$03
 $C336 DEFB $00,$1F,$03,$00,$1F,$03,$00,$0A
 $C33E DEFB $27,$00,$14,$03,$00,$0E,$70,$00
 $C346 DEFB $01,$10,$20,$02,$FF,$FF,$FF,$FF
 $C34E DEFB $40,$0E,$20,$00,$01,$30,$02,$8C
 $C356 DEFB $00,$01,$06,$00,$09,$0C,$00,$02
 $C35E DEFB $1C,$00,$01,$7F,$00,$1A,$0C,$00
 $C366 DEFB $01,$0F,$FF,$80,$7F,$00,$10,$03
 $C36E DEFB $00,$01,$01,$00,$0C,$7F,$00,$10
 $C376 DEFB $03,$00,$01,$81,$00,$08,$FF,$FF
 $C37E DEFB $FF,$FF,$FF,$00,$10,$03,$00,$1F
 $C386 DEFB $03,$00,$0A,$40,$00,$14,$03,$00
 $C38E DEFB $0A,$1F,$00,$14,$03,$00,$0E,$F8
 $C396 DEFB $00,$01,$09,$20,$03,$FF,$FF,$FF
 $C39E DEFB $FF,$C0,$04,$48,$00,$01,$20,$01
 $C3A6 DEFB $08,$00,$01,$0C,$00,$09,$0C,$00
 $C3AE DEFB $02,$1E,$00,$01,$FF,$00,$1A,$0C
 $C3B6 DEFB $00,$02,$0F,$00,$01,$FF,$00,$10
 $C3BE DEFB $03,$00,$01,$01,$00,$0C,$FF,$00
 $C3C6 DEFB $10,$03,$00,$01,$01,$00,$08,$80
 $C3CE DEFB $00,$03,$3F,$00,$10,$03,$00,$1F
 $C3D6 DEFB $03,$00,$0A,$20,$00,$14,$03,$00
 $C3DE DEFB $0A,$0B,$00,$14,$03,$00,$0E,$7C
 $C3E6 DEFB $00,$01,$29,$40,$03,$FF,$FF,$FF
 $C3EE DEFB $FF,$C0,$04,$C0,$00,$01,$60,$09
 $C3F6 DEFB $30,$00,$01,$18,$00,$09,$0C,$00
 $C3FE DEFB $02,$0F,$00,$01,$7F,$00,$1A,$0C
 $C406 DEFB $00,$02,$1E,$00,$01,$7F,$00,$10
 $C40E DEFB $03,$00,$01,$01,$00,$0C,$7F,$00
 $C416 DEFB $10,$03,$00,$01,$01,$00,$08,$60
 $C41E DEFB $00,$03,$1F,$00,$10,$03,$00,$1F
 $C426 DEFB $03,$00,$0A,$04,$00,$14,$03,$00
 $C42E DEFB $0A,$13,$00,$14,$03,$00,$0E,$FC
 $C436 DEFB $00,$01,$07,$40,$01,$FF,$FF,$FF
 $C43E DEFB $FF,$80,$17,$C0,$00,$01,$40,$09
 $C446 DEFB $E8,$00,$01,$20,$00,$09,$0C,$00
 $C44E DEFB $01,$0F,$FF,$80,$FF,$00,$1A,$0C
 $C456 DEFB $00,$02,$1C,$00,$01,$FF,$00,$10
 $C45E DEFB $03,$00,$01,$01,$00,$0C,$FF,$00
 $C466 DEFB $10,$03,$00,$01,$01,$00,$08,$30
 $C46E DEFB $00,$03,$07,$00,$10,$0F,$00,$1F
 $C476 DEFB $03,$00,$0A,$22,$00,$14,$03,$00
 $C47E DEFB $0A,$04,$00,$14,$03,$00,$0E,$7E
 $C486 DEFB $00,$01,$0F,$E0,$01,$FF,$FF,$FF
 $C48E DEFB $FF,$80,$1F,$B0,$00,$01,$80,$27
 $C496 DEFB $F0,$00,$01,$40,$00,$09,$0C,$00
 $C49E DEFB $01,$0F,$FF,$C0,$7F,$00,$1A,$0C
 $C4A6 DEFB $00,$04,$7F,$00,$10,$03,$00,$01
 $C4AE DEFB $81,$00,$0C,$7F,$00,$10,$03,$00
 $C4B6 DEFB $01,$01,$00,$08,$0C,$00,$03,$03
 $C4BE DEFB $00,$10,$3B,$00,$1F,$03,$00,$0A
 $C4C6 DEFB $18,$00,$14,$03,$00,$1F,$03,$00
 $C4CE DEFB $0E,$FF,$00,$01,$07,$E0,$01,$FF
 $C4D6 DEFB $FF,$FF,$FF,$80,$07,$C0,$00,$01
 $C4DE DEFB $80,$03,$E0,$00,$01,$80,$00,$09
 $C4E6 DEFB $0C,$00,$01,$0F,$FF,$E0,$FF,$00
 $C4EE DEFB $1A,$0C,$00,$04,$FF,$00,$10,$03
 $C4F6 DEFB $07,$C1,$00,$0C,$FF,$00,$10,$03
 $C4FE DEFB $FF,$FF,$00,$08,$03,$00,$03,$01
 $C506 DEFB $00,$10,$C3,$00,$1F,$03,$00,$0A
 $C50E DEFB $17,$00,$14,$03,$00,$1F,$03,$00
 $C516 DEFB $1F,$03,$00,$0A,$FF,$00,$14,$03
 $C51E DEFB $00,$0A,$FF,$00,$14,$03,$00,$0A
 $C526 DEFB $FF,$00,$14,$D3,$00,$0A,$FF,$00
 $C52E DEFB $14,$03,$FF,$FF,$FF,$FF,$FF,$FF
 $C536 DEFB $FF,$FF,$FF,$FF,$1F,$00,$14,$1F
 $C53E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $C546 DEFB $FF,$FC,$00,$16,$03,$00,$08,$0C
 $C54E DEFB $7F,$00,$14,$D8,$03,$00,$01,$E0
 $C556 DEFB $D6,$DA,$C6,$00,$03,$0C,$00,$15
 $C55E DEFB $03,$00,$0A,$FF,$00,$14,$03,$00
 $C566 DEFB $0A,$FF,$00,$14,$03,$00,$0A,$FF
 $C56E DEFB $00,$14,$FB,$00,$0A,$FF,$00,$1E
 $C576 DEFB $0C,$F8,$00,$14,$03,$FF,$FF,$FF
 $C57E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$F8,$00
 $C586 DEFB $16,$03,$00,$08,$0C,$0F,$00,$14
 $C58E DEFB $E0,$03,$00,$01,$E6,$F6,$DE,$C0
 $C596 DEFB $00,$03,$0C,$00,$15,$03,$00,$0A
 $C59E DEFB $FF,$00,$14,$03,$00,$0A,$FF,$00
 $C5A6 DEFB $14,$03,$00,$0A,$FF,$00,$14,$43
 $C5AE DEFB $00,$0A,$FF,$00,$1E,$0C,$C0,$00
 $C5B6 DEFB $1E,$0C,$00,$16,$03,$00,$08,$0C
 $C5BE DEFB $16,$00,$14,$F8,$03,$00,$01,$FE
 $C5C6 DEFB $C3,$98,$D2,$00,$03,$0C,$00,$15
 $C5CE DEFB $03,$00,$0A,$FF,$00,$14,$03,$00
 $C5D6 DEFB $0A,$FF,$00,$14,$23,$00,$0A,$FF
 $C5DE DEFB $00,$14,$33,$00,$0A,$FF,$00,$1E
 $C5E6 DEFB $0C,$00,$1F,$0C,$00,$16,$03,$00
 $C5EE DEFB $08,$0C,$64,$00,$14,$C0,$03,$00
 $C5F6 DEFB $01,$FE,$71,$0E,$F6,$00,$03,$0C
 $C5FE DEFB $00,$15,$03,$00,$0A,$FF,$00,$14
 $C606 DEFB $03,$00,$0A,$FF,$00,$14,$43,$00
 $C60E DEFB $0A,$FF,$00,$14,$03,$00,$0A,$FF
 $C616 DEFB $00,$1E,$0C,$00,$1F,$0C,$02,$00
 $C61E DEFB $15,$03,$00,$01,$E0,$00,$06,$0C
 $C626 DEFB $0A,$00,$14,$34,$03,$00,$08,$0C
 $C62E DEFB $C0,$00,$14,$07,$00,$0A,$FF,$00
 $C636 DEFB $14,$03,$00,$0A,$FF,$00,$14,$8B
 $C63E DEFB $00,$0A,$FF,$00,$14,$03,$00,$0A
 $C646 DEFB $FF,$00,$1E,$0C,$00,$1F,$0C,$0A
 $C64E DEFB $00,$15,$03,$00,$01,$E0,$00,$06
 $C656 DEFB $0C,$18,$00,$14,$08,$03,$00,$08
 $C65E DEFB $0C,$F8,$00,$14,$3F,$00,$0A,$FF
 $C666 DEFB $00,$14,$03,$00,$0A,$FF,$00,$14
 $C66E DEFB $F3,$00,$0A,$FF,$00,$14,$03,$00
 $C676 DEFB $0A,$FF,$00,$1E,$0C,$00,$1F,$0C
 $C67E DEFB $27,$00,$15,$03,$00,$01,$E0,$66
 $C686 DEFB $CC,$C0,$00,$03,$0C,$00,$16,$03
 $C68E DEFB $00,$08,$0C,$1F,$00,$14,$F3,$00
 $C696 DEFB $0A,$FF,$00,$14,$03,$00,$0A,$FF
 $C69E DEFB $00,$14,$E3,$00,$0A,$FF,$00,$14
 $C6A6 DEFB $03,$00,$0A,$FF,$00,$14,$F8,$00
 $C6AE DEFB $09,$0C,$00,$16,$03,$FF,$FF,$FF
 $C6B6 DEFB $FF,$FF,$FF,$FF,$FF,$0C,$07,$00
 $C6BE DEFB $14,$04,$03,$00,$01,$E0,$F6,$DE
 $C6C6 DEFB $C2,$00,$03,$0C,$00,$16,$03,$00
 $C6CE DEFB $01,$FC,$7C,$C6,$E6,$7E,$00,$02
 $C6D6 DEFB $0C,$00,$16,$03,$00,$01,$FE,$FE
 $C6DE DEFB $E6,$E6,$FE,$00,$02,$0C,$01,$00
 $C6E6 DEFB $14,$C0,$03,$00,$08,$0C,$00,$16
 $C6EE DEFB $03,$00,$08,$0C,$27,$00,$14,$F8
 $C6F6 DEFB $03,$00,$01,$0E,$E6,$E6,$FE,$C6
 $C6FE DEFB $00,$02,$0C,$00,$16,$03,$00,$08
 $C706 DEFB $0C,$01,$00,$01,$02,$7D,$00,$01
 $C70E DEFB $80,$00,$01,$7E,$01,$FF,$FF,$FF
 $C716 DEFB $FF,$80,$2B,$F0,$00,$01,$80,$21
 $C71E DEFB $F4,$00,$01,$80,$00,$09,$0C,$80
 $C726 DEFB $00,$03,$30,$00,$03,$06,$00,$04
 $C72E DEFB $60,$00,$03,$06,$00,$03,$01,$00
 $C736 DEFB $0A,$7C,$00,$14,$3E,$2C,$34,$2C
 $C73E DEFB $34,$2C,$34,$2C,$34,$2C,$34,$00
 $C746 DEFB $16,$03,$00,$01,$E6,$E6,$F6,$E6
 $C74E DEFB $E0,$08,$00,$01,$0C,$06,$00,$14
 $C756 DEFB $38,$03,$00,$08,$0C,$00,$16,$03
 $C75E DEFB $00,$08,$0C,$57,$00,$14,$E0,$03
 $C766 DEFB $00,$01,$FE,$FE,$FE,$E6,$FE,$10
 $C76E DEFB $00,$01,$0C,$00,$16,$03,$00,$08
 $C776 DEFB $0C,$02,$00,$01,$08,$F8,$01,$00
 $C77E DEFB $02,$7C,$01,$FF,$FF,$FF,$FF,$80
 $C786 DEFB $03,$F8,$00,$01,$40,$0B,$F8,$00
 $C78E DEFB $01,$40,$00,$09,$0C,$80,$00,$03
 $C796 DEFB $30,$00,$03,$06,$00,$04,$60,$00
 $C79E DEFB $03,$06,$00,$03,$01,$00,$0A,$04
 $C7A6 DEFB $00,$14,$20,$2C,$34,$2C,$34,$2C
 $C7AE DEFB $34,$2C,$34,$2C,$34,$00,$16,$03
 $C7B6 DEFB $00,$01,$FC,$E6,$FE,$E6,$FC,$18
 $C7BE DEFB $00,$01,$0C,$38,$00,$14,$0F,$FF
 $C7C6 DEFB $00,$08,$FC,$00,$16,$03,$00,$08
 $C7CE DEFB $0C,$0F,$00,$14,$F8,$03,$00,$01
 $C7D6 DEFB $FC,$7C,$7C,$E6,$FE,$30,$00,$01
 $C7DE DEFB $0C,$00,$16,$03,$00,$08,$0C,$04
 $C7E6 DEFB $00,$01,$05,$FC,$02,$00,$01,$02
 $C7EE DEFB $FE,$01,$FF,$FF,$FF,$FF,$80,$0F
 $C7F6 DEFB $E0,$00,$01,$20,$01,$F0,$00,$01
 $C7FE DEFB $20,$00,$09,$0C,$80,$00,$03,$30
 $C806 DEFB $00,$03,$06,$00,$04,$60,$00,$03
 $C80E DEFB $06,$00,$03,$01,$3F,$FC,$3F,$FC
 $C816 DEFB $3F,$FC,$3F,$FC,$3F,$FC,$04,$00
 $C81E DEFB $14,$20,$2F,$F4,$2F,$F4,$2F,$F4
 $C826 DEFB $2F,$F4,$2F,$F4,$00,$16,$03,$00
 $C82E DEFB $01,$FE,$E6,$FE,$E6,$7E,$00,$02
 $C836 DEFB $0C,$E0,$00,$14,$03,$FF,$00,$08
 $C83E DEFB $F8,$00,$15,$08,$03,$00,$01,$7E
 $C846 DEFB $7C,$7C,$FC,$FE,$00,$02,$0C,$3C
 $C84E DEFB $00,$14,$C0,$03,$00,$08,$0C,$00
 $C856 DEFB $16,$03,$00,$08,$0C,$08,$00,$01
 $C85E DEFB $03,$E2,$06,$00,$01,$05,$F8,$03
 $C866 DEFB $FF,$FF,$FF,$FF,$C0,$03,$F0,$00
 $C86E DEFB $01,$30,$01,$6E,$00,$01,$18,$00
 $C876 DEFB $09,$0C,$83,$FF,$FF,$FF,$FF,$FF
 $C87E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $C886 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$C1
 $C88E DEFB $30,$0C,$30,$0C,$30,$0C,$30,$0C
 $C896 DEFB $30,$0C,$04,$00,$14,$20,$2F,$F4
 $C89E DEFB $2F,$F4,$2F,$F4,$2F,$F4,$2F,$F4
 $C8A6 DEFB $00,$16,$03,$00,$01,$E6,$E6,$DE
 $C8AE DEFB $E6,$0E,$00,$02,$0C,$80,$00,$15
 $C8B6 DEFB $03,$00,$08,$0C,$00,$15,$10,$03
 $C8BE DEFB $00,$01,$FE,$FE,$FE,$FE,$FE,$00
 $C8C6 DEFB $02,$0C,$29,$00,$14,$50,$03,$00
 $C8CE DEFB $08,$0C,$00,$16,$03,$00,$08,$0C
 $C8D6 DEFB $10,$00,$01,$07,$90,$04,$00,$02
 $C8DE DEFB $7C,$03,$FF,$FF,$FF,$FF,$C0,$08
 $C8E6 DEFB $88,$00,$01,$10,$02,$26,$00,$01
 $C8EE DEFB $0C,$00,$09,$0C,$84,$FF,$FF,$08
 $C8F6 DEFB $42,$11,$84,$21,$10,$84,$27,$E4
 $C8FE DEFB $21,$10,$84,$21,$84,$21,$10,$84
 $C906 DEFB $23,$21,$2F,$F4,$2F,$F4,$2F,$F4
 $C90E DEFB $2F,$F4,$2F,$F4,$04,$00,$14,$20
 $C916 DEFB $30,$0C,$30,$0C,$30,$0C,$30,$0C
 $C91E DEFB $30,$0C,$00,$16,$03,$00,$01,$FE
 $C926 DEFB $FE,$CE,$FE,$FE,$08,$00,$01,$0C
 $C92E DEFB $00,$16,$03,$00,$08,$0C,$02,$00
 $C936 DEFB $14,$90,$03,$00,$01,$E0,$E6,$E6
 $C93E DEFB $E6,$C6,$10,$00,$01,$0C,$4A,$00
 $C946 DEFB $14,$2C,$03,$00,$08,$0C,$00,$16
 $C94E DEFB $03,$00,$08,$0C,$30,$00,$01,$19
 $C956 DEFB $40,$08,$00,$02,$8B,$02,$FF,$FF
 $C95E DEFB $FF,$FF,$40,$04,$96,$00,$01,$08
 $C966 DEFB $01,$11,$00,$01,$06,$00,$09,$0C
 $C96E DEFB $84,$FF,$FF,$08,$02,$01,$80,$20
 $C976 DEFB $10,$04,$03,$C0,$20,$10,$04,$01
 $C97E DEFB $80,$20,$10,$04,$03,$21,$2F,$F4
 $C986 DEFB $2F,$F4,$2F,$F4,$2F,$F4,$2F,$F4
 $C98E DEFB $03,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $C996 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $C99E DEFB $FF,$FF,$FF,$FF,$FF,$C0,$3F,$FC
 $C9A6 DEFB $3F,$FC,$3F,$FC,$3F,$FC,$3F,$FC
 $C9AE DEFB $00,$16,$03,$00,$01,$FC,$7C,$C6
 $C9B6 DEFB $7C,$FC,$18,$00,$01,$0C,$00,$16
 $C9BE DEFB $03,$00,$08,$0C,$05,$00,$14,$20
 $C9C6 DEFB $03,$00,$01,$FC,$E0,$E6,$E6,$F0
 $C9CE DEFB $30,$00,$01,$0C,$10,$00,$14,$22
 $C9D6 DEFB $03,$00,$08,$0C,$00,$16,$03,$00
 $C9DE DEFB $08,$0C,$60,$00,$01,$24,$60,$18
 $C9E6 DEFB $00,$02,$C8,$06,$FF,$FF,$FF,$FF
 $C9EE DEFB $60,$08,$90,$00,$01,$0C,$00,$01
 $C9F6 DEFB $20,$00,$01,$03,$FF,$FF,$FF,$FF
 $C9FE DEFB $FF,$FF,$FF,$FF,$FF,$FC,$84,$92
 $CA06 DEFB $49,$08,$00,$01,$01,$80,$00,$01
 $CA0E DEFB $10,$00,$01,$01,$80,$00,$01,$10
 $CA16 DEFB $00,$01,$01,$80,$00,$01,$10,$00
 $CA1E DEFB $01,$03,$21,$2C,$34,$2C,$34,$2C
 $CA26 DEFB $34,$2C,$34,$2C,$34,$00,$36,$03
 $CA2E DEFB $00,$08,$0C,$00,$16,$03,$00,$08
 $CA36 DEFB $0C,$17,$00,$14,$C6,$03,$00,$01
 $CA3E DEFB $7E,$E0,$E6,$FC,$F0,$00,$02,$0C
 $CA46 DEFB $00,$16,$03,$00,$08,$0C,$00,$16
 $CA4E DEFB $01,$00,$08,$0C,$C0,$00,$03,$30
 $CA56 DEFB $00,$01,$01,$24,$06,$FF,$FF,$FF
 $CA5E DEFB $FF,$60,$01,$08,$00,$01,$06,$00
 $CA66 DEFB $01,$10,$00,$01,$01,$FF,$FF,$FF
 $CA6E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$F8,$84
 $CA76 DEFB $00,$14,$21,$2C,$34,$2C,$34,$2C
 $CA7E DEFB $34,$2C,$34,$2C,$34,$00,$20,$00
 $CA86 DEFB $00,$28,$04,$69,$01,$68,$01,$6D
 $CA8E DEFB $02,$68,$01,$45,$04,$68,$01,$6D
 $CA96 DEFB $02,$68,$02,$6D,$02,$68,$02,$28
 $CA9E DEFB $0A,$28,$01,$2F,$03,$69,$01,$47
 $CAA6 DEFB $10,$68,$01,$28,$0A,$28,$01,$2F
 $CAAE DEFB $03,$69,$01,$47,$10,$68,$01,$20
 $CAB6 DEFB $02,$60,$02,$20,$02,$60,$02,$20
 $CABE DEFB $02,$28,$04,$69,$01,$47,$10,$68
 $CAC6 DEFB $01,$20,$02,$60,$02,$20,$02,$60
 $CACE DEFB $02,$20,$02,$68,$04,$69,$01,$47
 $CAD6 DEFB $10,$68,$01,$60,$02,$20,$02,$60
 $CADE DEFB $02,$20,$02,$60,$02,$68,$01,$47
 $CAE6 DEFB $14,$68,$01,$60,$02,$20,$02,$60
 $CAEE DEFB $02,$20,$02,$60,$02,$6D,$01,$47
 $CAF6 DEFB $14,$68,$01,$20,$02,$60,$02,$20
 $CAFE DEFB $02,$60,$02,$20,$02,$6D,$01,$47
 $CB06 DEFB $14,$68,$01,$20,$02,$60,$02,$20
 $CB0E DEFB $02,$60,$02,$20,$02,$68,$01,$47
 $CB16 DEFB $14,$68,$01,$60,$02,$20,$02,$60
 $CB1E DEFB $02,$20,$02,$60,$02,$45,$01,$47
 $CB26 DEFB $14,$68,$01,$60,$02,$20,$02,$60
 $CB2E DEFB $02,$20,$02,$60,$02,$45,$01,$47
 $CB36 DEFB $14,$68,$01,$20,$02,$60,$02,$20
 $CB3E DEFB $02,$60,$02,$20,$02,$45,$01,$47
 $CB46 DEFB $14,$68,$01,$20,$02,$60,$02,$20
 $CB4E DEFB $02,$60,$02,$20,$02,$45,$01,$47
 $CB56 DEFB $14,$68,$01,$28,$0A,$68,$01,$47
 $CB5E DEFB $14,$68,$01,$28,$0A,$6D,$01,$47
 $CB66 DEFB $14,$6D,$01,$28,$01,$30,$08,$28
 $CB6E DEFB $01,$6D,$01,$47,$14,$6D,$01,$28
 $CB76 DEFB $01,$30,$08,$28,$01,$68,$01,$47
 $CB7E DEFB $14,$68,$01,$28,$01,$30,$08,$28
 $CB86 DEFB $01,$68,$01,$47,$14,$68,$01,$28
 $CB8E DEFB $01,$30,$08,$28,$01,$6D,$01,$47
 $CB96 DEFB $14,$6D,$01,$28,$01,$30,$08,$28
 $CB9E DEFB $01,$6D,$01,$47,$14,$6D,$01,$28
 $CBA6 DEFB $01,$30,$08,$28,$01,$68,$01,$47
 $CBAE DEFB $14,$6D,$01,$28,$01,$30,$08,$28
 $CBB6 DEFB $01,$68,$02,$6D,$02,$68,$02,$6D
 $CBBE DEFB $02,$68,$01,$45,$04,$68,$01,$6D
 $CBC6 DEFB $02,$68,$02,$6D,$02,$68,$02,$28
 $CBCE DEFB $0A,$28,$16,$2D,$04,$28,$06,$28
 $CBD6 DEFB $16,$2D,$04,$28,$06,$00,$00,$00
 $CBDE DEFB $00,$00,$00

; Data: Main Menu
;
; #PUSHS
; #UDGTABLE
; { #SIM(start=$D1D5,stop=$D1DB)#SCR$02(main-menu) }
; UDGTABLE#
; #POPS
@label=Data_MainMenu
b$CBE1 DEFB $00,$45,$01,$80,$00,$01,$78,$3C
 $CBE9 DEFB $3F,$FC,$78,$1E,$3F,$F0,$1F,$F8
 $CBF1 DEFB $1F,$F8,$3F,$F8,$7F,$C0,$00,$0B
 $CBF9 DEFB $1F,$F8,$01,$80,$00,$01,$3E,$00
 $CC01 DEFB $01,$3F,$E0,$07,$E0,$3F,$F8,$30
 $CC09 DEFB $0C,$3F,$FC,$3F,$F8,$30,$0C,$00
 $CC11 DEFB $2D,$1F,$F8,$00,$01,$78,$3C,$3F
 $CC19 DEFB $FC,$3E,$78,$3F,$F8,$1F,$F8,$1F
 $CC21 DEFB $F8,$1F,$F8,$3F,$F0,$00,$0B,$1F
 $CC29 DEFB $F8,$3F,$F8,$00,$01,$3E,$00,$01
 $CC31 DEFB $3F,$E0,$31,$8C,$3F,$F8,$1F,$FC
 $CC39 DEFB $01,$80,$30,$0C,$30,$0C,$00,$8B
 $CC41 DEFB $1F,$F0,$00,$5E,$1F,$F0,$00,$80
 $CC49 DEFB $03,$80,$00,$01,$30,$70,$30,$0C
 $CC51 DEFB $30,$0C,$30,$38,$38,$1C,$38,$1C
 $CC59 DEFB $30,$0C,$30,$70,$00,$0C,$E0,$01
 $CC61 DEFB $80,$00,$01,$3B,$80,$30,$00,$01
 $CC69 DEFB $01,$80,$30,$0C,$30,$0C,$30,$0C
 $CC71 DEFB $30,$30,$30,$0C,$00,$2D,$38,$1C
 $CC79 DEFB $00,$01,$30,$70,$30,$0C,$31,$8C
 $CC81 DEFB $30,$1C,$38,$0C,$31,$8C,$38,$1C
 $CC89 DEFB $30,$1C,$00,$0C,$E0,$30,$00,$02
 $CC91 DEFB $3B,$80,$30,$00,$01,$31,$8C,$30
 $CC99 DEFB $00,$02,$0C,$01,$80,$30,$0C,$30
 $CCA1 DEFB $0C,$00,$8C,$C0,$00,$5F,$C0,$00
 $CCA9 DEFB $7F,$C0,$01,$80,$00,$01,$31,$C0
 $CCB1 DEFB $30,$00,$01,$30,$0C,$30,$18,$30
 $CCB9 DEFB $0C,$30,$0C,$30,$0C,$30,$1C,$00
 $CCC1 DEFB $0D,$01,$80,$00,$01,$30,$E0,$30
 $CCC9 DEFB $00,$01,$01,$80,$30,$0C,$30,$0C
 $CCD1 DEFB $30,$0C,$30,$30,$30,$38,$00,$2C
 $CCD9 DEFB $C0,$00,$01,$0C,$00,$01,$31,$C0
 $CCE1 DEFB $30,$00,$01,$31,$8C,$30,$0C,$30
 $CCE9 DEFB $00,$01,$01,$80,$30,$0C,$30,$0C
 $CCF1 DEFB $00,$0D,$30,$00,$02,$30,$E0,$30
 $CCF9 DEFB $00,$01,$31,$8C,$30,$00,$01,$30
 $CD01 DEFB $0C,$01,$80,$30,$0C,$30,$0C,$00
 $CD09 DEFB $6C,$E0,$00,$5F,$E0,$00,$9E,$1F
 $CD11 DEFB $F0,$01,$80,$00,$01,$37,$00,$01
 $CD19 DEFB $30,$00,$01,$1C,$38,$30,$38,$30
 $CD21 DEFB $0C,$30,$0C,$30,$0C,$30,$0C,$00
 $CD29 DEFB $0D,$03,$C0,$00,$01,$78,$3C,$3F
 $CD31 DEFB $FC,$03,$C0,$3F,$FC,$3F,$FC,$78
 $CD39 DEFB $1E,$78,$3C,$7F,$E0,$00,$2B,$1F
 $CD41 DEFB $F0,$00,$01,$1C,$00,$01,$37,$00
 $CD49 DEFB $01,$30,$00,$01,$31,$8C,$30,$1C
 $CD51 DEFB $38,$00,$01,$01,$80,$30,$0C,$30
 $CD59 DEFB $0C,$00,$0D,$3F,$FC,$00,$01,$78
 $CD61 DEFB $3C,$3F,$FC,$79,$9E,$78,$00,$01
 $CD69 DEFB $3F,$FC,$03,$C0,$3F,$FC,$78,$0C
 $CD71 DEFB $00,$6B,$1F,$F8,$00,$20,$03,$C0
 $CD79 DEFB $00,$01,$78,$3C,$3F,$FC,$03,$C0
 $CD81 DEFB $3F,$F8,$1F,$F8,$78,$1E,$78,$3C
 $CD89 DEFB $7F,$E0,$00,$2B,$1F,$F8,$00,$20
 $CD91 DEFB $3F,$FC,$00,$01,$78,$3C,$3F,$FC
 $CD99 DEFB $78,$1E,$78,$00,$01,$1F,$F8,$03
 $CDA1 DEFB $C0,$1F,$F8,$78,$0C,$00,$2D,$1F
 $CDA9 DEFB $F8,$00,$01,$1F,$F8,$78,$1E,$3F
 $CDB1 DEFB $F8,$1F,$F8,$1F,$F8,$3F,$F8,$00
 $CDB9 DEFB $0F,$1F,$F8,$07,$F8,$00,$01,$30
 $CDC1 DEFB $00,$01,$30,$0C,$3F,$F8,$1F,$FC
 $CDC9 DEFB $30,$0C,$3F,$F8,$00,$31,$78,$00
 $CDD1 DEFB $02,$1F,$F8,$07,$E0,$3F,$F0,$1F
 $CDD9 DEFB $F8,$38,$00,$01,$1F,$F8,$07,$E0
 $CDE1 DEFB $3F,$F8,$00,$0B,$1F,$F8,$3F,$FE
 $CDE9 DEFB $00,$01,$1F,$FC,$01,$80,$30,$0C
 $CDF1 DEFB $30,$00,$01,$30,$00,$01,$3F,$FC
 $CDF9 DEFB $01,$80,$3F,$F8,$00,$2D,$3F,$FC
 $CE01 DEFB $00,$01,$1F,$F8,$1F,$F8,$1F,$F8
 $CE09 DEFB $3F,$F8,$1F,$F8,$00,$01,$1F,$F8
 $CE11 DEFB $1F,$F8,$3E,$78,$3F,$FC,$00,$0A
 $CE19 DEFB $1F,$FC,$00,$01,$1F,$FC,$01,$80
 $CE21 DEFB $3F,$FC,$3F,$F8,$01,$80,$00,$01
 $CE29 DEFB $30,$7C,$3F,$FC,$31,$8C,$3F,$E0
 $CE31 DEFB $00,$28,$1F,$F0,$00,$5E,$1F,$F0
 $CE39 DEFB $00,$80,$38,$1C,$00,$01,$38,$0C
 $CE41 DEFB $30,$0C,$30,$0C,$38,$0C,$38,$1C
 $CE49 DEFB $30,$0C,$00,$10,$E0,$00,$01,$0C
 $CE51 DEFB $00,$01,$30,$00,$01,$30,$0C,$30
 $CE59 DEFB $30,$00,$01,$0C,$30,$0C,$30,$30
 $CE61 DEFB $00,$31,$30,$1E,$00,$01,$38,$0C
 $CE69 DEFB $01,$80,$30,$1C,$38,$0C,$30,$00
 $CE71 DEFB $01,$38,$1C,$01,$80,$30,$0C,$00
 $CE79 DEFB $0C,$E0,$00,$01,$0C,$00,$02,$0C
 $CE81 DEFB $01,$80,$30,$0C,$30,$00,$01,$30
 $CE89 DEFB $00,$01,$30,$0C,$01,$80,$30,$30
 $CE91 DEFB $00,$2D,$38,$00,$02,$38,$0C,$31
 $CE99 DEFB $8C,$38,$1C,$30,$0C,$31,$8C,$00
 $CEA1 DEFB $01,$38,$0C,$38,$1C,$31,$8C,$30
 $CEA9 DEFB $0C,$00,$0B,$0C,$00,$02,$0C,$01
 $CEB1 DEFB $80,$30,$0C,$30,$30,$01,$80,$00
 $CEB9 DEFB $01,$30,$0C,$30,$0C,$31,$8C,$30
 $CEC1 DEFB $00,$2A,$C0,$00,$5F,$C0,$00,$7F
 $CEC9 DEFB $C0,$00,$01,$0C,$00,$01,$30,$00
 $CED1 DEFB $01,$30,$0C,$30,$0C,$30,$00,$01
 $CED9 DEFB $30,$0C,$30,$0C,$00,$12,$0C,$00
 $CEE1 DEFB $01,$30,$0C,$30,$0C,$30,$30,$30
 $CEE9 DEFB $0C,$30,$0C,$30,$30,$00,$30,$C0
 $CEF1 DEFB $30,$0C,$00,$01,$30,$00,$01,$01
 $CEF9 DEFB $80,$30,$0C,$30,$00,$01,$30,$00
 $CF01 DEFB $01,$30,$0C,$01,$80,$30,$0C,$00
 $CF09 DEFB $0E,$0C,$00,$01,$30,$0C,$01,$80
 $CF11 DEFB $30,$0C,$30,$0C,$30,$00,$01,$30
 $CF19 DEFB $0C,$01,$80,$30,$30,$00,$2D,$30
 $CF21 DEFB $00,$02,$30,$00,$01,$01,$80,$30
 $CF29 DEFB $0C,$30,$0C,$01,$80,$00,$01,$30
 $CF31 DEFB $00,$01,$30,$0C,$31,$8C,$30,$00
 $CF39 DEFB $0C,$0C,$00,$01,$30,$0C,$01,$80
 $CF41 DEFB $30,$0C,$30,$30,$01,$80,$00,$01
 $CF49 DEFB $30,$0C,$30,$0C,$31,$8C,$30,$00
 $CF51 DEFB $0A,$E0,$00,$5F,$E0,$00,$9E,$1F
 $CF59 DEFB $F0,$00,$01,$1C,$00,$01,$30,$00
 $CF61 DEFB $01,$30,$0C,$30,$0C,$38,$00,$01
 $CF69 DEFB $30,$0C,$30,$0C,$00,$11,$3F,$FC
 $CF71 DEFB $00,$01,$3F,$FC,$3F,$FC,$78,$3C
 $CF79 DEFB $3F,$FC,$3F,$FC,$78,$3C,$00,$2F
 $CF81 DEFB $1F,$F0,$30,$0C,$00,$01,$38,$00
 $CF89 DEFB $01,$01,$80,$30,$0C,$30,$00,$01
 $CF91 DEFB $30,$00,$01,$30,$0C,$01,$80,$30
 $CF99 DEFB $0C,$00,$0E,$1E,$00,$01,$3F,$FC
 $CFA1 DEFB $07,$E0,$78,$0C,$3F,$FC,$3F,$FC
 $CFA9 DEFB $78,$1E,$07,$E0,$78,$3C,$00,$2D
 $CFB1 DEFB $38,$00,$02,$38,$00,$01,$01,$80
 $CFB9 DEFB $30,$0C,$30,$0C,$01,$80,$00,$01
 $CFC1 DEFB $30,$00,$01,$30,$0C,$31,$8C,$30
 $CFC9 DEFB $00,$0B,$3F,$FC,$00,$01,$3F,$FC
 $CFD1 DEFB $03,$C0,$78,$1E,$78,$3C,$03,$C0
 $CFD9 DEFB $00,$01,$3F,$FC,$78,$1E,$79,$9E
 $CFE1 DEFB $3F,$FC,$00,$08,$1F,$F8,$00,$20
 $CFE9 DEFB $1F,$F8,$00,$01,$1F,$F8,$1F,$F8
 $CFF1 DEFB $78,$3C,$1F,$F8,$1F,$F8,$78,$3C
 $CFF9 DEFB $00,$2F,$1F,$F8,$00,$21,$1E,$00
 $D001 DEFB $01,$1F,$F8,$07,$E0,$78,$0C,$1F
 $D009 DEFB $F8,$3F,$FC,$78,$1E,$07,$E0,$78
 $D011 DEFB $3C,$00,$4D,$1F,$F8,$00,$01,$1F
 $D019 DEFB $F8,$03,$C0,$78,$1E,$78,$3C,$03
 $D021 DEFB $C0,$00,$01,$1F,$F8,$78,$1E,$78
 $D029 DEFB $1E,$3F,$FC,$00,$6A,$7E,$7C,$7C
 $D031 DEFB $FC,$FE,$00,$0C,$10,$11,$2C,$30
 $D039 DEFB $60,$E3,$A2,$00,$28,$E6,$FC,$00
 $D041 DEFB $01,$7E,$7C,$7C,$FC,$FE,$00,$B0
 $D049 DEFB $30,$00,$07,$FE,$FE,$FE,$FE,$FE
 $D051 DEFB $08,$00,$0B,$10,$21,$44,$F8,$7F
 $D059 DEFB $00,$01,$02,$30,$00,$27,$E6,$FC
 $D061 DEFB $00,$01,$FE,$FE,$FE,$FE,$FE,$08
 $D069 DEFB $00,$AE,$20,$38,$00,$07,$C0,$E6
 $D071 DEFB $E6,$C6,$C6,$18,$00,$0B,$13,$A1
 $D079 DEFB $45,$18,$7C,$00,$02,$38,$00,$27
 $D081 DEFB $E6,$30,$00,$01,$E0,$E6,$E6,$C6
 $D089 DEFB $C6,$18,$00,$AB,$10,$C0,$00,$01
 $D091 DEFB $20,$38,$00,$07,$FC,$E0,$E6,$FE
 $D099 DEFB $F0,$00,$0C,$18,$A2,$39,$98,$00
 $D0A1 DEFB $03,$30,$00,$27,$FE,$30,$7C,$FC
 $D0A9 DEFB $E0,$E6,$FE,$F0,$00,$AC,$10,$C0
 $D0B1 DEFB $93,$AC,$38,$00,$07,$7E,$E0,$E6
 $D0B9 DEFB $FC,$F0,$00,$0C,$09,$9C,$00,$01
 $D0C1 DEFB $68,$00,$2B,$FE,$30,$3E,$7E,$E0
 $D0C9 DEFB $E6,$FC,$F0,$00,$A9,$07,$80,$00
 $D0D1 DEFB $01,$10,$60,$92,$28,$38,$00,$07
 $D0D9 DEFB $06,$E6,$E6,$CE,$C6,$08,$00,$0B
 $D0E1 DEFB $07,$80,$00,$2D,$E6,$30,$00,$01
 $D0E9 DEFB $06,$E6,$E6,$CE,$C6,$08,$00,$A8
 $D0F1 DEFB $09,$80,$00,$01,$10,$60,$94,$38
 $D0F9 DEFB $18,$00,$07,$FE,$FE,$FE,$C6,$FE
 $D101 DEFB $18,$00,$3A,$E6,$FC,$00,$01,$FE
 $D109 DEFB $FE,$FE,$C6,$FE,$18,$00,$A8,$18
 $D111 DEFB $1E,$10,$10,$60,$94,$24,$10,$00
 $D119 DEFB $07,$FC,$7C,$7C,$C6,$FE,$00,$3B
 $D121 DEFB $E6,$FC,$00,$01,$FC,$7C,$7C,$C6
 $D129 DEFB $FE,$00,$53,$00,$00,$44,$20,$44
 $D131 DEFB $20,$00,$05,$44,$1B,$44,$03,$00
 $D139 DEFB $02,$05,$14,$44,$07,$44,$03,$47
 $D141 DEFB $01,$44,$1C,$44,$03,$40,$02,$44
 $D149 DEFB $1B,$44,$03,$40,$02,$05,$14,$44
 $D151 DEFB $07,$44,$03,$40,$01,$47,$01,$44
 $D159 DEFB $1B,$44,$03,$40,$02,$44,$1B,$44
 $D161 DEFB $03,$40,$02,$05,$10,$44,$0B,$44
 $D169 DEFB $20,$44,$03,$00,$02,$44,$1B,$44
 $D171 DEFB $03,$00,$02,$05,$13,$44,$01,$05
 $D179 DEFB $01,$44,$06,$44,$20,$44,$04,$06
 $D181 DEFB $17,$05,$01,$44,$04,$44,$04,$45
 $D189 DEFB $1C,$06,$20,$06,$20,$06,$15,$00
 $D191 DEFB $09,$40,$02,$06,$15,$00,$09,$40
 $D199 DEFB $02,$46,$02,$44,$02,$46,$0B,$44
 $D1A1 DEFB $11,$46,$20,$07,$20,$07,$20,$07
 $D1A9 DEFB $00

@org=$D1AA

; Game Entry Point
@label=GameEntryPoint
c$D1AA DI            ; Disable interrupts.
 $D1AB LD SP,$FFFA   ; #REGsp=#N$FFFA.
; Write #N$FE from #R$FE00 for #N$100 bytes. All will become clear soon...
 $D1AE LD HL,$FE00   ; #REGhl=#R$FE00.
 $D1B1 LD BC,$00FD   ; #HTML(Set a counter in #REGb of #N$00 (as it's a <code>DJNZ</code>
                     ; this is really #N$100) and set #REGc to #N$FD for the value to write.)
@label=WriteInterruptJumpAddress_Loop
*$D1B4 LD (HL),C     ; Write #N$FD to *#REGhl.
 $D1B5 INC HL        ; Increment #REGhl by one.
 $D1B6 DJNZ $D1B4    ; Decrease counter by one and loop back to #R$D1B4 until
                     ; counter is zero.
; One more for luck...
 $D1B8 LD (HL),C     ; Write #REGc to *#REGhl.
; This sets interrupt mode #N$02; when the system generates an interrupt,
; it'll use the high-order byte set here, together with a low-order byte
; generated from the system to form a 16-bit address to jump to.
; .
; As we've just set #N$FD to every address, this means that every generated
; interrupt will jump to #N$FEFD, which in turn will jump to #R$F85D.
 $D1B9 LD A,$FE      ; {Set #N$FE as the high-order byte in #REGi.
 $D1BB LD I,A        ; }
 $D1BD IM 2          ; Set interrupt mode #N$02.
 $D1BF LD HL,$5843   ; {Write #N$5843 (attribute buffer location) to *#R$D877.
 $D1C2 LD ($D877),HL ; }
 $D1C5 LD A,$01      ; {Write #N$01 ("keyboard") to *#R$EB38.
 $D1C7 LD ($EB38),A  ; }
 $D1CA LD HL,$EB64   ; {Write #R$EB64 to *#R$EB36.
 $D1CD LD ($EB36),HL ; }
; Continue on to #R$D1D0.

; Game Loop
;
; Used by the routines at #R$D4D6 and #R$EBF5.
@label=Game_Loop
c$D1D0 DI            ; Disable interrupts.
; Print the main menu options.
 $D1D1 LD A,$00      ; {Set border colour to #INK$00.
 $D1D3 OUT ($FE),A   ; }
 $D1D5 LD HL,$CBE1   ; #REGhl=#R$CBE1.
 $D1D8 CALL $D70C    ; Call #R$D70C.
 $D1DB CALL $EA4A    ; Call #R$EA4A.
; Initialise a new game.
 $D1DE LD BC,$0000   ; {Initialise *#R$D874, *#R$D875 and *#R$D876 to
 $D1E1 LD ($D874),BC ; #N($000000,$06,$06).
 $D1E5 LD ($D875),BC ; }
 $D1E9 XOR A         ; {Write #N$00 to *#R$D86D.
 $D1EA LD ($D86D),A  ; }
; Print the in-game surround.
 $D1ED LD A,$05      ; {Set border colour to #INK$05.
 $D1EF OUT ($FE),A   ; }
 $D1F1 LD HL,$C2A6   ; #REGhl=#R$C2A6.
 $D1F4 CALL $D70C    ; Call #R$D70C.
; Set the starting lives.
 $D1F7 LD A,$04      ; {Write #N$04 to *#R$D827.
 $D1F9 LD ($D827),A  ; }
 $D1FC LD HL,$5ADA   ; {Write #N$5ADA (attribute buffer location) to *#R$D872.
 $D1FF LD ($D872),HL ; }
; Initialise the new game with the level 1 data.
 $D202 LD HL,$D28D   ; {Write #R$D28D to *#R$D28B.
 $D205 LD ($D28B),HL ; }
; Note, this level counter counts down instead of up.
 $D208 LD B,$0A      ; Set a counter in #REGb for the total number of levels
                     ; (#N$0A).
; This level counter is used for display purposes.
 $D20A XOR A         ; {Write #N$00 to *#R$D86E.
 $D20B LD ($D86E),A  ; }
; The game loops here in-game to begin a new level.
@label=Game_NewLevel
*$D20E PUSH BC       ; Stash the level counter on the stack.
 $D20F LD HL,($D28B) ; #REGhl=*#R$D28B.
 $D212 LD E,(HL)     ; {#REGde=current level data pointer.
 $D213 INC HL        ;
 $D214 LD D,(HL)     ; }
 $D215 INC HL        ; Increment the level data pointer by one to point to the
                     ; next level.
 $D216 LD ($D28B),HL ; Write the next level pointer to *#R$D28B.
 $D219 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
; Add one to the current level.
 $D21A LD A,($D86E)  ; #REGa=*#R$D86E.
 $D21D INC A         ; Increment #REGa by one.
 $D21E DAA           ; Adjust #REGa for BCD operations.
 $D21F LD ($D86E),A  ; Write #REGa back to *#R$D86E.
; Set everything up...
 $D222 CALL $D2A1    ; Call #R$D2A1.
; Marilyn Monroe is the last level, and to make it more difficult, no
; preview image is shown. Instead, the last frame of the "static" generated by
; #R$EC5A is left on the screen.
 $D225 LD A,$01      ; Set #N$01 in #REGa to indicate the last level.
 $D227 POP BC        ; Restore the level counter from the stack.
 $D228 PUSH BC       ; But keep a stashed copy of the level counter on the
                     ; stack.
 $D229 CP B          ; {Jump to #R$D22F if the level countdown is equal to #N$01 (and so is
 $D22A JR Z,$D22F    ; the last level).}
 $D22C CALL $DD73    ; Else this isn't the last level; call #R$DD73.
@label=Skip_MarilynMonroe
*$D22F CALL $EC39    ; Call #R$EC39.
 $D232 EI            ; Enable interrupts.
 $D233 CALL $D469    ; Call #R$D469.
 $D236 POP BC        ; Restore the level counter from the stack.
 $D237 DJNZ $D20E    ; Decrease the level counter by one and loop back to #R$D20E until
                     ; all the levels have been played.
; The game has been completed!
 $D239 LD B,$1E      ; #REGb=#N$1E.
 $D23B LD HL,$D24F   ; #REGhl=#R$D24F.
 $D23E CALL $EF4A    ; Call #R$EF4A.
 $D241 CALL $ECBF    ; Call #R$ECBF.
; Long pause...
 $D244 LD BC,$0000   ; #REGbc=#N($0000,$04,$04).
@label=Pause_Loop
*$D247 DEC BC        ; Decrease #REGbc by one.
 $D248 LD A,B        ; {Jump to #R$D247 until #REGbc is zero.
 $D249 OR C          ;
 $D24A JR NZ,$D247   ; }
 $D24C JP $D1D0      ; Jump to #R$D1D0.

; Data block at D24F
b$D24F DEFB $0C,$05,$0C,$05,$0C,$08,$0C,$09
 $D257 DEFB $0C,$0A,$0C,$0A,$06,$0D,$06,$0E
 $D25F DEFB $0C,$11,$0C,$05,$0C,$05,$0C,$08
 $D267 DEFB $0C,$09,$0C,$0A,$0C,$0A,$06,$0D
 $D26F DEFB $06,$0E,$0C,$11,$0C,$05,$0C,$05
 $D277 DEFB $0C,$08,$0C,$09,$0C,$0A,$0C,$0A
 $D27F DEFB $0C,$0C,$0C,$0C,$0C,$0D,$0C,$0D
 $D287 DEFB $0C,$0F,$2A,$11

; Pointer: Current Level Data
@label=Pointer_CurrentLevelData
g$D28B DEFW $0000

; Table: Level Data
@label=Table_LevelData
g$D28D DEFW $D522    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).
 $D28F DEFW $D544    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).
 $D291 DEFW $D567    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).
 $D293 DEFW $D58D    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).
 $D295 DEFW $D5B6    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).
 $D297 DEFW $D5DE    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).
 $D299 DEFW $D608    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).
 $D29B DEFW $D634    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).
 $D29D DEFW $D660    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).
 $D29F DEFW $D689    ; Level
                     ; #R((#PEEK(#PC+$01)*$100)+#PEEK(#PC))(#N($01+(#PC-$D28D)/$02)).

; Game Initialisation
;
; Used by the routine at #R$D1D0.
;
; HL Pointer to level data
@label=Game_Initialisation
c$D2A1 LD C,(HL)     ; The first byte is the length of the level data, store
                     ; this in #REGc.
 $D2A2 LD A,C        ; #REGa=data length.
 $D2A3 LD B,$00      ; Initialise #REGb to #N$00 for the copy command.
 $D2A5 INC HL        ; Increment the level data pointer by one.
 $D2A6 LD DE,$E2A7   ; {Copy the level data from the current level data to
 $D2A9 LDIR          ; #R$E2A7.}
 $D2AB LD DE,$D815   ; {The next #N($0012,$04,$04) bytes are timers for the doors and
 $D2AE LD BC,$0012   ; cracks, each level has a different set. Copy these starting at #R$D815.
 $D2B1 LDIR          ; }
 $D2B3 LD E,(HL)     ; {Fetch the pointer for the level graphics data and write
 $D2B4 INC HL        ; this to *#R$D892.
 $D2B5 LD D,(HL)     ;
 $D2B6 LD ($D892),DE ; }
 $D2BA LD HL,$D85F   ; #REGhl=#R$D85F.
 $D2BD LD B,$0C      ; #REGb=#N$0C.
*$D2BF LD (HL),$01   ; Write #N$01 to *#REGhl.
 $D2C1 INC HL        ; Increment #REGhl by one.
 $D2C2 DJNZ $D2BF    ; Decrease counter by one and loop back to #R$D2BF until
                     ; counter is zero.
 $D2C4 LD DE,$E261   ; {Copy #N($0031,$04,$04) bytes of data from #R$D4F1 to
 $D2C7 LD HL,$D4F1   ; #R$E261.
 $D2CA LD BC,$0031   ;
 $D2CD LDIR          ; }
; Populates #R$E293 with: #PUSHS #SIM(start=$D2CF,stop=$D2DB)
; #TABLE(default,centre,centre,centre,centre,centre)
; #FOR$00,$03""x"
;   { #FOR$00,$04,,(y,=h #N($E293+(x*$05)+y), | ) }
;   { #FOR$00,$04,,(y,#N(#PEEK($E293+(x*$05)+y)), | ) }
; ""
; TABLE# #POPS
 $D2CF LD HL,$E293   ; #REGhl=#R$E293.
 $D2D2 LD B,$14      ; Set a counter in #REGb for each tile (5x4).
 $D2D4 LD A,$01      ; Tile numbering starts from #N$01.
@label=PopulateTileTable_Loop
*$D2D6 LD (HL),A     ; Write the tile ID to *#REGhl.
 $D2D7 INC HL        ; Increment the tile table pointer by one.
 $D2D8 INC A         ; Increment the tile ID by one.
 $D2D9 DJNZ $D2D6    ; Decrease the tile counter by one and loop back to
                     ; #R$D2D6 until the table has been populated.
; Copy default values to #R$D828.
 $D2DB LD HL,$D879   ; #REGhl=#R$D879.
 $D2DE LD DE,$D828   ; #REGde=#R$D828.
@label=PopulateDefaults_Loop
*$D2E1 LD A,(HL)     ; Load the byte from *#REGhl and store it in #REGa.
 $D2E2 CP $FF        ; {Jump to #R$D2F0 if this byte is the terminator (#N$FF).
 $D2E4 JR Z,$D2F0    ; }
 $D2E6 LD B,A        ; Load the byte into #REGb this is the count/ repeater
                     ; value.
 $D2E7 INC HL        ; Increment the defaults pointer by one.
 $D2E8 LD A,(HL)     ; Load the defaults byte from *#REGhl and store it in
                     ; #REGa.
 $D2E9 INC HL        ; Increment the defaults pointer by one.
@label=RepeatDefault_Loop
*$D2EA LD (DE),A     ; Write the defaults byte to the destination.
 $D2EB INC DE        ; Increment the destination pointer by one.
 $D2EC DJNZ $D2EA    ; Decrease repeater count by one and loop back to #R$D2EA until the
                     ; defaults byte has been written this number of times.
 $D2EE JR $D2E1      ; Jump back to #R$D2E1.
; The computed values are done, copy the last six values over.
@label=PopulateDefaults_Done
*$D2F0 INC HL        ; {Copy the last #N($0006,$04,$04) bytes from #R$D888 to
 $D2F1 LD BC,$0006   ; #R$D84A.
 $D2F4 LDIR          ; }
; Write three random numbers between #N$01-#N$20 to
; #FOR$00,$02,,$01(n,#R$D850(#N($D850+n)), , and ).
 $D2F6 LD B,$03      ; #REGb=#N$03.
@label=PickThreeRandomNumbers_Loop
*$D2F8 LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $D2FA AND %00011111 ; {Ensure this number is between #N$01-#N$20.
 $D2FC INC A         ; }
 $D2FD LD (DE),A     ; Write this number to the destination pointer.
 $D2FE INC DE        ; Increment the destination pointer by one.
 $D2FF DJNZ $D2F8    ; Decrease counter by one and loop back to #R$D2F8 until
                     ; counter is zero.
 $D301 LD HL,$DA1F   ; {Write #R$DA1F to: #LIST { *#R$D853 } { *#R$D855 } {
 $D304 LD ($D853),HL ; *#R$D857 } { *#R$D859 } LIST#
 $D307 LD ($D855),HL ;
 $D30A LD ($D857),HL ;
 $D30D LD ($D859),HL ; }
 $D310 LD HL,$E292   ; #REGhl=#R$E292.
 $D313 LD BC,$07D0   ; #REGbc=#N($07D0,$04,$04).
 $D316 LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $D318 ADD A,C       ; #REGa+=#REGc.
 $D319 LD C,A        ; #REGc=#REGa.
*$D31A PUSH BC       ; {Stash #REGbc, #REGhl and #REGhl on the stack.
 $D31B PUSH HL       ;
 $D31C PUSH HL       ; }
 $D31D CALL $E6EC    ; Call #R$E6EC.
 $D320 ADD HL,BC     ; #REGhl+=random number.
 $D321 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D322 POP HL        ; Restore #REGhl from the stack.
 $D323 CALL $E6EC    ; Call #R$E6EC.
 $D326 ADD HL,BC     ; #REGhl+=random number.
 $D327 LD B,(HL)     ; #REGb=*#REGhl.
 $D328 LD A,(DE)     ; {Write *#REGde to *#REGhl.
 $D329 LD (HL),A     ; }
 $D32A LD A,B        ; {Write #REGb to *#REGde.
 $D32B LD (DE),A     ; }
 $D32C POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $D32D POP BC        ; }
 $D32E DEC BC        ; Decrease #REGbc by one.
 $D32F LD A,B        ; {Jump to #R$D31A if #REGbc is not zero.
 $D330 OR C          ;
 $D331 JR NZ,$D31A   ; }
; Populate the level, bonus and score numbering in the dashboard.
 $D333 CALL $EA2F    ; Call #R$EA2F.
 $D336 CALL $EA00    ; Call #R$EA00.
 $D339 CALL $EA14    ; Call #R$EA14.
; Paint the preview grid pattern.
 $D33C CALL $EC39    ; Call #R$EC39.
; Small pause...
 $D33F LD BC,$9C40   ; #REGbc=#N$9C40.
@label=SetUp_Pause_Loop
*$D342 DEC BC        ; Decrease #REGbc by one.
 $D343 LD A,B        ; {Jump to #R$D342 until #REGbc is zero.
 $D344 OR C          ;
 $D345 JR NZ,$D342   ; }
; Play the "static" animation in the preview area.
 $D347 CALL $EC5A    ; Call #R$EC5A.
; Display the current preview image.
 $D34A LD IX,($D892) ; #REGix=*#R$D892.
 $D34E CALL $E004    ; Call #R$E004.
 $D351 RET           ; Return.

; Routine at D352
;
; Used by the routine at #R$D469.
c$D352 LD DE,$0780    ; {Write #N($0780,$04,$04) to *#R$D88E.
 $D355 LD ($D88E),DE  ; }
 $D359 LD DE,$0AF0    ; {Write #N($0AF0,$04,$04) to *#R$D890.
 $D35C LD ($D890),DE  ; }
 $D360 CALL $F39E     ; Call #R$F39E.
 $D363 LD A,($D834)   ; {Jump to #R$D387 if *#R$D834 is equal to #N$09.
 $D366 CP $09         ;
 $D368 JR Z,$D387     ; }
 $D36A LD A,($D835)   ; {Jump to #R$D387 if *#R$D835 is not equal to #N$00.
 $D36D CP $00         ;
 $D36F JR NZ,$D387    ; }
 $D371 PUSH BC        ; Stash #REGbc on the stack.
 $D372 LD A,($D830)   ; {Write *#R$D830 to *#R$D82C.
 $D375 LD ($D82C),A   ; }
 $D378 LD A,($D831)   ; {Write *#R$D831 to *#R$D82D.
 $D37B LD ($D82D),A   ; }
 $D37E CALL $E661     ; Call #R$E661.
 $D381 LD HL,$D839    ; #REGhl=#R$D839.
 $D384 RES 0,(HL)     ; Reset bit 0 of *#REGhl.
 $D386 POP BC         ; Restore #REGbc from the stack.
*$D387 BIT 4,B        ; {Jump to #R$D4A5 if bit 4 of #REGb is not set.
 $D389 JP Z,$D4A5     ; }
 $D38C PUSH BC        ; Stash #REGbc on the stack.
 $D38D CALL $DABF     ; Call #R$DABF.
 $D390 CALL $EA00     ; Call #R$EA00.
 $D393 LD HL,$D83A    ; #REGhl=#R$D83A.
 $D396 BIT 6,(HL)     ; {Call #R$F349 if bit 6 of *#REGhl is set.
 $D398 CALL NZ,$F349  ; }
 $D39B LD HL,$D83A    ; #REGhl=#R$D83A.
 $D39E SET 0,(HL)     ; Set bit 0 of *#REGhl.
 $D3A0 POP BC         ; Restore #REGbc from the stack.
 $D3A1 BIT 3,B        ; {Jump to #R$D3C4 if bit 3 of #REGb is not set.
 $D3A3 JR Z,$D3C4     ; }
 $D3A5 CALL $D763     ; Call #R$D763.
 $D3A8 LD A,($E75D)   ; #REGa=*#R$E75D.
 $D3AB DEC A          ; Decrease #REGa by one.
 $D3AC LD B,A         ; #REGb=#REGa.
 $D3AD LD A,($E75E)   ; #REGa=*#R$E75E.
 $D3B0 DEC A          ; Decrease #REGa by one.
 $D3B1 LD C,A         ; #REGc=#REGa.
 $D3B2 LD DE,$D86B    ; #REGde=#R$D86B.
 $D3B5 LD A,$04       ; #REGa=#N$04.
 $D3B7 LD IX,$D83A    ; #REGix=#R$D83A.
 $D3BB RES 1,(IX+$00) ; Reset bit 1 of *#REGix+#N$00.
 $D3BF CALL $DB2E     ; Call #R$DB2E.
 $D3C2 JR $D3DF       ; Jump to #R$D3DF.
*$D3C4 LD IX,$D83A    ; #REGix=#R$D83A.
 $D3C8 BIT 2,(IX+$00) ; {Jump to #R$D40D if bit 2 of *#REGix+#N$00 is set.
 $D3CC JR Z,$D40D     ; }
 $D3CE LD DE,$0510    ; {Write #N($0510,$04,$04) to *#R$D88E.
 $D3D1 LD ($D88E),DE  ; }
 $D3D5 LD DE,$0AB0    ; {Write #N($0AB0,$04,$04) to *#R$D890.
 $D3D8 LD ($D890),DE  ; }
 $D3DC CALL $D763     ; Call #R$D763.
*$D3DF LD A,$05       ; #REGa=#N$05.
 $D3E1 LD C,$82       ; #REGc=#N$82.
 $D3E3 PUSH BC        ; Stash #REGbc on the stack.
*$D3E4 LD D,$05       ; #REGd=#N$05.
*$D3E6 OUT ($FE),A    ; Set border to the colour held by #REGa.
 $D3E8 XOR %00010000  ; Flip bit 4.
 $D3EA LD E,C         ; #REGe=#REGc.
*$D3EB DEC E          ; Decrease #REGe by one.
 $D3EC JR NZ,$D3EB    ; Jump to #R$D3EB if #REGe is not zero.
 $D3EE DEC D          ; Decrease #REGd by one.
 $D3EF JR NZ,$D3E6    ; Jump to #R$D3E6 if #REGd is not zero.
 $D3F1 DEC C          ; Decrease #REGc by one.
 $D3F2 JR NZ,$D3E4    ; Jump to #R$D3E4 if #REGc is not zero.
 $D3F4 POP BC         ; Restore #REGbc from the stack.
*$D3F5 LD D,$05       ; #REGd=#N$05.
 $D3F7 LD A,$05       ; #REGa=#N$05.
*$D3F9 OUT ($FE),A    ; Set border to the colour held by #REGa.
 $D3FB XOR %00010000  ; Flip bit 4.
 $D3FD LD E,C         ; #REGe=#REGc.
*$D3FE DEC E          ; Decrease #REGe by one.
 $D3FF JR NZ,$D3FE    ; Jump to #R$D3FE if #REGe is not zero.
 $D401 DEC D          ; Decrease #REGd by one.
 $D402 JR NZ,$D3F9    ; Jump to #R$D3F9 if #REGd is not zero.
 $D404 INC C          ; Increment #REGc by one.
 $D405 LD A,$82       ; {Jump to #R$D3F5 if #REGc is not equal to #N$82.
 $D407 CP C           ;
 $D408 JR NZ,$D3F5    ; }
 $D40A CALL $DABF     ; Call #R$DABF.
*$D40D LD IX,$D83A    ; #REGix=#R$D83A.
 $D411 BIT 3,(IX+$00) ; {Jump to #R$D4A5 if bit 3 of *#REGix+#N$00 is not set.
 $D415 JP Z,$D4A5     ; }
 $D418 CALL $E9DA     ; Call #R$E9DA.
 $D41B CALL $E775     ; Call #R$E775.
; This entry point is used by the routine at #R$F39E.
*$D41E LD A,($D82E)   ; {Write *#R$D82E to *#R$E75D.
 $D421 LD ($E75D),A   ; }
 $D424 LD A,($D82F)   ; {Write *#R$D82F to *#R$E75E.
 $D427 LD ($E75E),A   ; }
 $D42A LD A,($D834)   ; {Jump to #R$D456 if *#R$D834 is not equal to #N$09.
 $D42D CP $09         ;
 $D42F JR NZ,$D456    ; }
 $D431 LD A,($E75D)   ; #REGa=*#R$E75D.
 $D434 LD ($E762),A   ; Write #REGa to *#R$E762.
 $D437 INC A          ; Increment #REGa by one.
 $D438 LD ($E763),A   ; Write #REGa to *#R$E763.
 $D43B LD A,($E75E)   ; #REGa=*#R$E75E.
 $D43E LD ($E764),A   ; Write #REGa to *#R$E764.
 $D441 INC A          ; Increment #REGa by one.
 $D442 LD ($E765),A   ; Write #REGa to *#R$E765.
 $D445 CALL $E9DA     ; Call #R$E9DA.
 $D448 LD A,$2F       ; #REGa=#COLOUR$2F.
 $D44A CALL $E682     ; Call #R$E682.
 $D44D CALL $E9A5     ; Call #R$E9A5.
 $D450 HALT           ; Halt operation (suspend CPU until the next interrupt).
 $D451 CALL $E7CC     ; Call #R$E7CC.
 $D454 JR $D45F       ; Jump to #R$D45F.
*$D456 CALL $E658     ;
 $D459 CALL $E9DA     ;
 $D45C CALL $E775     ;
*$D45F LD HL,$D6FC    ;
 $D462 LD B,$08       ;
 $D464 DI             ;
 $D465 CALL $EF4A     ;
 $D468 EI             ;

; Start Game
;
; Used by the routine at #R$D1D0.
@label=StartGame
c$D469 LD A,$02      ; {Write #N$02 to: #LIST { *#R$D830 } { *#R$D831 } {
 $D46B LD ($D830),A  ; *#R$D82E } { *#R$D82F } LIST#
 $D46E LD ($D831),A  ;
 $D471 LD ($D82E),A  ;
 $D474 LD ($D82F),A  ; }
 $D477 LD A,$09      ; {Write #N$09 to *#R$D834.
 $D479 LD ($D834),A  ; }
; See #POKE#infinitelives(Infinite Lives) and #POKE#infinitelivesalt(Infinite
; Lives (alternative)).
; .
; Spend a life to play the game.
 $D47C LD HL,$D827   ; #REGhl=#R$D827.
 $D47F DEC (HL)      ; Decrease *#REGhl by one.
 $D480 JP Z,$D4D6    ; Jump to #R$D4D6 if the player is out of lives.
 $D483 LD HL,$D83A   ; {Write #N$00 to *#R$D83A.
 $D486 LD (HL),$00   ; }
 $D488 CALL $F31E    ; Call #R$F31E.
 $D48B LD HL,($D872) ; #REGhl=*#R$D872.
 $D48E LD (HL),$2D   ; Write #N$2D to *#REGhl.
 $D490 INC HL        ; Increment #REGhl by one.
 $D491 LD (HL),$2D   ; Write #N$2D to *#REGhl.
 $D493 INC HL        ; Increment #REGhl by one.
 $D494 LD ($D872),HL ; Write #REGhl to *#R$D872.
 $D497 LD DE,$001E   ; {#REGhl+=#N($001E,$04,$04).
 $D49A ADD HL,DE     ; }
 $D49B LD (HL),$2D   ; Write #N$2D to *#REGhl.
 $D49D INC HL        ; Increment #REGhl by one.
 $D49E LD (HL),$2D   ; Write #N$2D to *#REGhl.
 $D4A0 LD HL,$D83A   ; #REGhl=#R$D83A.
 $D4A3 SET 0,(HL)    ; Set bit 0 of *#REGhl.
; This entry point is used by the routine at #R$D352.
*$D4A5 LD A,($D83A)  ; #REGa=*#R$D83A.
 $D4A8 AND %11110001 ; Keep only bits 0, 4-7.
 $D4AA LD ($D83A),A  ; Write #REGa to *#R$D83A.
 $D4AD LD A,($D830)  ; {Write *#R$D830 to *#R$D82C.
 $D4B0 LD ($D82C),A  ; }
 $D4B3 LD A,($D831)  ; {Write *#R$D831 to *#R$D82D.
 $D4B6 LD ($D82D),A  ; }
 $D4B9 LD A,($D824)  ; {Write *#R$D824 to *#R$D832.
 $D4BC LD ($D832),A  ; }
 $D4BF LD A,($D835)  ; {Jump to #R$D4D0 if *#R$D835 is not equal to #N$00.
 $D4C2 CP $00        ;
 $D4C4 JR NZ,$D4D0   ; }
 $D4C6 LD A,($D834)  ; {Jump to #R$D4D0 if *#R$D834 is equal to #N$09.
 $D4C9 CP $09        ;
 $D4CB JR Z,$D4D0    ; }
 $D4CD CALL $E661    ; Call #R$E661.
*$D4D0 CALL $D97E    ; Call #R$D97E.
 $D4D3 JP $D352      ; Jump to #R$D352.

; Game Over
;
; Used by the routine at #R$D469.
@label=GameOver
c$D4D6 LD HL,$D839   ; #REGhl=#R$D839.
 $D4D9 SET 7,(HL)    ; Set bit 7 of *#REGhl.
 $D4DB LD B,$4B      ; #REGb=#N$4B.
@label=Halt_Loop
*$D4DD HALT          ; Halt operation (suspend CPU until the next interrupt).
 $D4DE DJNZ $D4DD    ; Decrease counter by one and loop back to #R$D4DD until
                     ; counter is zero.
 $D4E0 DI            ; Disable interrupts.
 $D4E1 CALL $ECBF    ; Call #R$ECBF.
; Long pause...
 $D4E4 LD BC,$0000   ; #REGbc=#N($0000,$04,$04).
@label=GameOver_Pause_Loop
*$D4E7 DEC BC        ; Decrease #REGbc by one.
 $D4E8 LD A,B        ; {Jump to #R$D4E7 until #REGbc is zero.
 $D4E9 OR C          ;
 $D4EA JR NZ,$D4E7   ; }
 $D4EC POP IY        ; Restore #REGiy from the stack.
 $D4EE JP $D1D0      ; Jump to #R$D1D0.

; Data block at D4F1
b$D4F1 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $D4F9 DEFB $FF,$00,$00,$00,$00,$FF,$FF,$00
 $D501 DEFB $00,$00,$00,$00,$FF,$FF,$00,$00
 $D509 DEFB $00,$00,$00,$40,$FF,$00,$00,$00
 $D511 DEFB $00,$00,$FF,$FF,$00,$00,$00,$00
 $D519 DEFB $00,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $D521 DEFB $FF

; Data: Level 01
@label=Data_Level_01
b$D522 DEFB $0D                             ; Length of data.
 $D523 DEFB $1F,$20,$21,$22,$21,$22,$15,$3D ; {Data.
 $D52B DEFB $3E,$3F,$16,$16,$1E             ; }
 $D530 DEFB $F7,$4A,$80,$00,$00,$00,$00,$00 ; {Timer states.
 $D538 DEFB $60,$00,$00,$0C,$00,$00,$00,$03 ;
 $D540 DEFB $21,$21                         ; }
 $D542 DEFW $5B00                           ; Graphics data pointer.

; Data: Level 02
@label=Data_Level_02
b$D544 DEFB $0E                             ; Length of data.
 $D545 DEFB $23,$24,$25,$26,$24,$15,$3D,$3E ; {Data.
 $D54D DEFB $3F,$16,$16,$16,$18,$1A         ; }
 $D553 DEFB $3F,$E0,$10,$C0,$00,$C0,$00,$00 ; {Timer states.
 $D55B DEFB $00,$18,$00,$18,$00,$00,$00,$03 ;
 $D563 DEFB $22,$22                         ; }
 $D565 DEFW $6182                           ; Graphics data pointer.

; Data: Level 03
@label=Data_Level_03
b$D567 DEFB $11                             ; Length of data.
 $D568 DEFB $27,$28,$27,$28,$28,$15,$3D,$3E ; {Data.
 $D570 DEFB $3F,$16,$16,$16,$1D,$1E,$18,$1B ;
 $D578 DEFB $17                             ; }
 $D579 DEFB $F2,$19,$AC,$C0,$C0,$C0,$30,$30 ; {Timer states.
 $D581 DEFB $0C,$0C,$0C,$0C,$03,$03,$03,$03 ;
 $D589 DEFB $25,$25                         ; }
 $D58B DEFW $6AFF                           ; Graphics data pointer.

; Data: Level 04
@label=Data_Level_04
b$D58D DEFB $14                             ; Length of data.
 $D58E DEFB $29,$2A,$29,$2A,$29,$15,$3D,$3E ; {Data.
 $D596 DEFB $3F,$16,$16,$16,$17,$17,$1B,$1C ;
 $D59E DEFB $1D,$1E,$19,$1A                 ; }
 $D5A2 DEFB $0F,$5B,$A9,$40,$40,$40,$04,$10 ; {Timer states.
 $D5AA DEFB $00,$00,$00,$00,$04,$10,$00,$01 ;
 $D5B2 DEFB $28,$28                         ; }
 $D5B4 DEFW $730A                           ; Graphics data pointer.

; Data: Level 05
@label=Data_Level_05
b$D5B6 DEFB $13                             ; Length of data.
 $D5B7 DEFB $2B,$2C,$2B,$2C,$15,$3D,$3E,$3F ; {Data.
 $D5BF DEFB $16,$16,$16,$16,$17,$1B,$1C,$1D ;
 $D5C7 DEFB $1E,$19,$18                     ; }
 $D5CA DEFB $07,$F8,$2B,$70,$07,$07,$70,$70 ; {Timer states.
 $D5D2 DEFB $70,$70,$07,$07,$07,$07,$70,$01 ;
 $D5DA DEFB $27,$27                         ; }
 $D5DC DEFW $783C                           ; Graphics data pointer.

; Data: Level 06
@label=Data_Level_06
b$D5DE DEFB $15                             ; Length of data.
 $D5DF DEFB $2D,$2E,$2D,$2E,$15,$3D,$3E,$3F ; {Data.
 $D5E7 DEFB $16,$16,$16,$16,$17,$17,$1B,$1C ;
 $D5EF DEFB $1D,$1E,$1D,$1E,$17             ; }
 $D5F4 DEFB $A9,$56,$F3,$C0,$0C,$FF,$03,$30 ; {Timer states.
 $D5FC DEFB $00,$C0,$0C,$C0,$03,$30,$03,$01 ;
 $D604 DEFB $29,$29                         ; }
 $D606 DEFW $7CFD                           ; Graphics data pointer.

; Data: Level 07
@label=Data_Level_07
b$D608 DEFB $17                             ; Length of data.
 $D609 DEFB $2F,$30,$2F,$30,$2F,$30,$15,$3D ; {Data.
 $D611 DEFB $3E,$3F,$16,$16,$16,$17,$17,$1D ;
 $D619 DEFB $1E,$1D,$1E,$18,$19,$1A,$1C     ; }
 $D620 DEFB $F0,$F0,$1F,$02,$02,$02,$B0,$06 ; {Timer states.
 $D628 DEFB $F8,$F8,$F8,$F8,$B0,$06,$FD,$01 ;
 $D630 DEFB $2B,$2B                         ; }
 $D632 DEFW $8106                           ; Graphics data pointer.

; Data: Level 08
@label=Data_Level_08
b$D634 DEFB $17                             ; Length of data.
 $D635 DEFB $31,$32,$31,$32,$31,$32,$15,$3D ; {Data.
 $D63D DEFB $3E,$3F,$16,$16,$16,$16,$17,$17 ;
 $D645 DEFB $1D,$1E,$1B,$1C,$19,$17,$1E     ; }
 $D64C DEFB $E0,$30,$88,$00,$00,$00,$00,$70 ; {Timer states.
 $D654 DEFB $FF,$FF,$FF,$FF,$07,$00,$00,$01 ;
 $D65C DEFB $2B,$2B                         ; }
 $D65E DEFW $89D2                           ; Graphics data pointer.

; Data: Level 09
@label=Data_Level_09
b$D660 DEFB $14                             ; Length of data.
 $D661 DEFB $33,$34,$33,$34,$33,$34,$15,$3D ; {Data.
 $D669 DEFB $3E,$3F,$16,$16,$16,$17,$17,$17 ;
 $D671 DEFB $17,$1D,$1E,$19                 ; }
 $D675 DEFB $EF,$42,$24,$00,$00,$00,$00,$20 ; {Timer states.
 $D67D DEFB $FF,$FF,$FF,$FF,$00,$FE,$FF,$01 ;
 $D685 DEFB $28,$28                         ; }
 $D687 DEFW $9110                           ; Graphics data pointer.

; Data: Level 10
@label=Data_Level_10
b$D689 DEFB $16                             ; Length of data.
 $D68A DEFB $35,$36,$35,$36,$35,$36,$15,$3D ; {Data.
 $D692 DEFB $3E,$3F,$16,$16,$16,$17,$17,$17 ;
 $D69A DEFB $17,$1D,$1E,$1B,$1C,$1A         ; }
 $D6A0 DEFB $44,$FF,$FF,$00,$00,$00,$00,$20 ; {Timer states.
 $D6A8 DEFB $20,$FF,$FF,$FF,$01,$FF,$FF,$01 ;
 $D6B0 DEFB $2A,$2A                         ; }
 $D6B2 DEFW $9772                           ; Graphics data pointer.

; Data block at D6B4
b$D6B4 DEFB $06,$58,$07,$58,$0E,$58,$0F,$58
 $D6BC DEFB $12,$58,$13,$58,$D5,$59,$F5,$59
 $D6C4 DEFB $55,$5A,$75,$5A,$B2,$5A,$B3,$5A
 $D6CC DEFB $AE,$5A,$AF,$5A,$A6,$5A,$A7,$5A
 $D6D4 DEFB $A2,$5A,$A3,$5A,$40,$5A,$60,$5A
 $D6DC DEFB $C0,$59,$E0,$59,$C0,$58,$E0,$58
 $D6E4 DEFB $63,$E2,$65,$E2,$66,$E2,$83,$E2
 $D6EC DEFB $8A,$E2,$90,$E2,$8F,$E2,$8D,$E2
 $D6F4 DEFB $8C,$E2,$84,$E2,$7D,$E2,$6F,$E2
 $D6FC DEFB $0C,$0A,$0C,$0A,$0C,$08,$0C,$08
 $D704 DEFB $0C,$06,$0C,$06,$0C,$05,$24,$03

; Unpack Screen Data
;
; Used by the routine at #R$D1D0.
;
; HL Pointer to image data
;
; Start by clearing the screen and attribute buffers.
@label=UnpackScreenData
c$D70C PUSH HL       ; Stash the pointer to the image data on the stack
                     ; temporarily.
 $D70D LD HL,$5800   ; #REGhl=#R$5800(#N$5800) (attribute buffer location).
 $D710 LD DE,$5801   ; #REGde=#N$5801.
 $D713 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $D715 LD BC,$02FF   ; {Copy #N$00 to #N$02FF more bytes, filling the whole of the
 $D718 LDIR          ; attribute buffer.}
 $D71A POP HL        ; Restore the pointer to the image data from the stack.
 $D71B LD DE,$4000   ; Initialise the target screen buffer location
                     ; (#R$4000(#N$4000)) in #REGde.
; The main loop
@label=UnpackScreenData_Loop
*$D71E LD A,(HL)     ; {Jump to #R$D728 if *#REGhl is equal to #N$00.
 $D71F CP $00        ;
 $D721 JR Z,$D728    ; }
 $D723 LD (DE),A     ; Write #REGa to *#REGde.
 $D724 INC HL        ; Increment #REGhl by one.
 $D725 INC DE        ; Increment #REGde by one.
 $D726 JR $D71E      ; Jump to #R$D71E.
; Handle multiple zeroes.
@label=Handler_Zeroes
*$D728 INC HL        ; Move the pointer to the length byte.
 $D729 LD A,(HL)     ; Load the length into #REGa.
 $D72A CP $00        ; {Jump to #R$D737 if *#REGa is equal to #N$00.
 $D72C JR Z,$D737    ; }
 $D72E LD B,A        ; Store the length in #REGb.
 $D72F XOR A         ; Set #REGa to #N$00 the value to write.
; Write the zeroes to the screen buffer.
@label=Write_Zeroes
*$D730 LD (DE),A     ; Write #N$00 to the screen buffer location held by
                     ; *#REGde.
 $D731 INC DE        ; Increment the screen buffer pointer by one.
 $D732 DJNZ $D730    ; Decrease counter by one and loop back to #R$D730 until
                     ; counter is zero.
 $D734 INC HL        ; Increment #REGhl by one.
 $D735 JR $D71E      ; Jump to #R$D71E.
; Process attributes.
@label=Handler_Attributes
*$D737 INC HL        ; Increment #REGhl by one.
 $D738 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $D739 POP IX        ; }
 $D73B LD HL,$5800   ; #REGhl=#R$5800(#N$5800) (attribute buffer location).
 $D73E LD B,$18      ; Initialise #REGb to #N$18 (number of character rows).
@label=Handler_Attributes_Loop
*$D740 PUSH BC       ; {Stash the row counter and attribute buffer pointer on
 $D741 PUSH HL       ; the stack.}
 $D742 LD A,$00      ; Initialise the column counter in #REGa to #N$00.
; Process the attribute bytes in a row.
@label=UnpackScreenData_ProcessAttributesRow
*$D744 LD C,(IX+$00) ; {#REGc=attribute value.
 $D747 INC IX        ; }
 $D749 LD B,(IX+$00) ; {#REGb=run length.
 $D74C INC IX        ; }
 $D74E ADD A,B       ; #REGa=run length plus the column counter.
; Write the run of attributes.
@label=UnpackScreenData_WriteAttributes_Loop
*$D74F LD (HL),C     ; Write attribute byte to the attribute buffer.
 $D750 INC HL        ; Increment the attribute pointer by one.
 $D751 DJNZ $D74F    ; Decrease the length counter by one and loop back to #R$D74F until
                     ; counter is zero.
 $D753 CP $20        ; {Jump to #R$D744 if #REGa is not equal to #N$20.
 $D755 JR NZ,$D744   ; }
 $D757 POP HL        ; Restore the start of the row into #REGhl from the stack.
 $D758 LD BC,$0020   ; {Move #REGhl #N($0020,$04,$04) bytes to point to the
 $D75B ADD HL,BC     ; next row.}
 $D75C POP BC        ; Restore the row counter from the stack.
 $D75D DJNZ $D740    ; Decrease the row counter by one and loop back to #R$D740 until all
                     ; the rows have been processed.
 $D75F PUSH IX       ; {#REGbc=current position in attribute data (using the
 $D761 POP BC        ; stack).}
 $D762 RET           ; Return.

; Handler: Bonus
;
; Used by the routine at #R$D352.
@label=Handler_Bonus
c$D763 LD A,($E75D)  ; #REGa=*#R$E75D.
 $D766 DEC A         ; Decrease #REGa by one.
 $D767 LD B,A        ; #REGb=#REGa.
 $D768 LD A,($E75E)  ; #REGa=*#R$E75E.
 $D76B DEC A         ; Decrease #REGa by one.
 $D76C LD C,A        ; #REGc=#REGa.
 $D76D CALL $DCC2    ; Call #R$DCC2.
 $D770 CALL $DCD1    ; Call #R$DCD1.
 $D773 PUSH DE       ; Stash #REGde on the stack.
 $D774 LD IX,($D88E) ; #REGix=*#R$D88E.
 $D778 LD DE,$B765   ; {#REGix+=#R$B765.
 $D77B ADD IX,DE     ; }
 $D77D LD D,$04      ; Set a counter in #REGd for #N$04 rows.
*$D77F PUSH BC       ; Stash the co-ordinates on the stack.
 $D780 LD B,$08      ; Set a counter in #REGb for #N$08 columns.
*$D782 PUSH BC       ; Stash the column counter on the stack.
 $D783 LD B,$04      ; Set a counter in #REGb for #N$04 bytes per character.
 $D785 PUSH HL       ; Stash the screen position on the stack.
*$D786 LD A,(IX+$00) ; {Write a byte from the object data to the screen buffer
 $D789 LD (HL),A     ; position.}
 $D78A INC IX        ; Increment the object data pointer by one.
 $D78C INC HL        ; Increment the screen position by one.
 $D78D DJNZ $D786    ; Decrease the object byte counter by one and loop back to
                     ; #R$D786 until counter is zero.
 $D78F POP HL        ; Restore the original screen position for this row from
                     ; the stack.
 $D790 INC H         ; Increment #REGh by one.
 $D791 LD BC,$0010   ; {#REGix+=#N($0010,$04,$04).
 $D794 ADD IX,BC     ; }
 $D796 POP BC        ; Restore the column counter from the stack.
 $D797 DJNZ $D782    ; Decrease the column counter by one and loop back to
                     ; #R$D782 until the column counter is zero.
 $D799 POP BC        ; Restore the co-ordinates from the stack.
 $D79A INC B         ; Increment #REGb by one.
 $D79B CALL $DCC2    ; Call #R$DCC2.
 $D79E DEC D         ; Decrease #REGd by one.
 $D79F JR NZ,$D77F   ; Jump to #R$D77F if #REGd is not zero.
 $D7A1 LD IX,($D890) ; #REGix=*#R$D890.
 $D7A5 LD DE,$B765   ; {#REGix+=#R$B765.
 $D7A8 ADD IX,DE     ; }
 $D7AA POP HL        ; Restore #REGhl from the stack.
 $D7AB LD B,$04      ; #REGb=#N$04.
 $D7AD LD DE,$001C   ; #REGde=#N($001C,$04,$04).
*$D7B0 PUSH BC       ; Stash #REGbc on the stack.
 $D7B1 LD B,$04      ; #REGb=#N$04.
*$D7B3 LD A,(IX+$00) ; {Write *#REGix+#N$00 to *#REGhl.
 $D7B6 LD (HL),A     ; }
 $D7B7 INC IX        ; Increment #REGix by one.
 $D7B9 INC HL        ; Increment #REGhl by one.
 $D7BA DJNZ $D7B3    ; Decrease counter by one and loop back to #R$D7B3 until
                     ; counter is zero.
 $D7BC ADD HL,DE     ; #REGhl+=#REGde.
 $D7BD LD BC,$0010   ; {#REGix+=#N($0010,$04,$04).
 $D7C0 ADD IX,BC     ; }
 $D7C2 POP BC        ; Restore #REGbc from the stack.
 $D7C3 DJNZ $D7B0    ; Decrease counter by one and loop back to #R$D7B0 until
                     ; counter is zero.
 $D7C5 RET           ; Return.

; Routine at D7C6
;
; Used by the routine at #R$F130.
c$D7C6 CP $1F        ; {Jump to #R$D7CE if #REGa is equal to #N$1F.
 $D7C8 JR Z,$D7CE    ; }
 $D7CA CP $21        ; {Jump to #R$D7DD if #REGa is not equal to #N$21.
 $D7CC JR NZ,$D7DD   ; }
*$D7CE LD DE,$0784   ; {Write #N($0784,$04,$04) to *#R$D88E.
 $D7D1 LD ($D88E),DE ; }
 $D7D5 LD DE,$0AF4   ; {Write #N($0AF4,$04,$04) to *#R$D890.
 $D7D8 LD ($D890),DE ; }
 $D7DC RET           ; Return.
*$D7DD CP $25        ; {Jump to #R$D7F0 if #REGa is not equal to #N$25.
 $D7DF JR NZ,$D7F0   ; }
 $D7E1 LD DE,$0788   ; {Write #N($0788,$04,$04) to *#R$D88E.
 $D7E4 LD ($D88E),DE ; }
 $D7E8 LD DE,$0AF8   ; {Write #N($0AF8,$04,$04) to *#R$D890.
 $D7EB LD ($D890),DE ; }
 $D7EF RET           ; Return.
*$D7F0 CP $2D        ; {Jump to #R$D803 if #REGa is not equal to #N$2D.
 $D7F2 JR NZ,$D803   ; }
 $D7F4 LD DE,$078C   ; {Write #N($078C,$04,$04) to *#R$D88E.
 $D7F7 LD ($D88E),DE ; }
 $D7FB LD DE,$0AFC   ; {Write #N($0AFC,$04,$04) to *#R$D890.
 $D7FE LD ($D890),DE ; }
 $D802 RET           ; Return.
*$D803 CP $33        ; {Return if #REGa is not equal to #N$33.
 $D805 RET NZ        ; }
 $D806 LD DE,$0790   ; {Write #N($0790,$04,$04) to *#R$D88E.
 $D809 LD ($D88E),DE ; }
 $D80D LD DE,$0B00   ; {Write #N($0B00,$04,$04) to *#R$D890.
 $D810 LD ($D890),DE ; }
 $D814 RET           ; Return.

; Object Timers
@label=Timer_DoorTop
g$D815 DEFB $00
@label=Timer_DoorBottom
 $D816 DEFB $00
@label=Timer_DoorLeft
 $D817 DEFB $00
@label=Timer_Crack_01
 $D818 DEFB $00
@label=Timer_Crack_02
 $D819 DEFB $00
@label=Timer_Crack_03
 $D81A DEFB $00
@label=Timer_Crack_04
 $D81B DEFB $00
@label=Timer_Crack_05
 $D81C DEFB $00
@label=Timer_Crack_06
 $D81D DEFB $00
@label=Timer_Crack_07
 $D81E DEFB $00
@label=Timer_Crack_08
 $D81F DEFB $00
@label=Timer_Crack_09
 $D820 DEFB $00
@label=Timer_Crack_10
 $D821 DEFB $00
@label=Timer_Crack_11
 $D822 DEFB $00
@label=Timer_Crack_12
 $D823 DEFB $00
@label=Timer_Crack_13
 $D824 DEFB $00
 $D825 DEFB $00
 $D826 DEFB $00

; Lives
@label=Lives
g$D827 DEFB $00

; Game status buffer entry at D828
g$D828 DEFB $00

; Game status buffer entry at D829
g$D829 DEFB $00

; Game status buffer entry at D82A
g$D82A DEFB $00

; Game status buffer entry at D82B
g$D82B DEFB $00

; Game status buffer entry at D82C
g$D82C DEFB $00

; Game status buffer entry at D82D
g$D82D DEFB $00

; Player Cursor Position
@label=PlayerCursor_Y_Position
g$D82E DEFB $00
@label=PlayerCursor_X_Position
 $D82F DEFB $00

; Game status buffer entry at D830
g$D830 DEFB $00

; Game status buffer entry at D831
g$D831 DEFB $00

; Game status buffer entry at D832
g$D832 DEFB $00

; Game status buffer entry at D833
g$D833 DEFB $00

; Game status buffer entry at D834
g$D834 DEFB $00

; Player Cursor Flag
;
; Used by the routines at #R$D352, #R$D469, #R$E396, #R$E658, #R$E661 and #R$F39E.
; #TABLE(default,centre,centre)
; { =h Byte | =h Meaning }
; { #N$00 | Off }
; { #N$01 | On }
; TABLE#
@label=PlayerCursor_Flag
g$D835 DEFB $00

; Home Arrow Attribute Table Offset
;
; Used by the routine at #R$E320.
@label=HomeArrow_AttributeTable_Offset
g$D836 DEFB $00

; Game status buffer entry at D837
g$D837 DEFB $00

; Bomb?
@label=Bomb
g$D838 DEFB $00

; Game status buffer entry at D839
g$D839 DEFB $00

; Time?
@label=Time
g$D83A DEFB $00

; Game status buffer entry at D83B
g$D83B DEFB $00

; Game status buffer entry at D83C
g$D83C DEFB $00

; Game status buffer entry at D83D
g$D83D DEFB $00

; Game status buffer entry at D83E
g$D83E DEFB $00

; Game status buffer entry at D83F
g$D83F DEFB $00

; Game status buffer entry at D840
g$D840 DEFB $00

; Game status buffer entry at D841
g$D841 DEFB $00

; Game status buffer entry at D842
g$D842 DEFB $00

; Game status buffer entry at D843
g$D843 DEFB $00

; Game status buffer entry at D844
g$D844 DEFB $00

; Game status buffer entry at D845
g$D845 DEFB $00

; Game status buffer entry at D846
g$D846 DEFB $00

; Game status buffer entry at D847
g$D847 DEFB $00

; Game status buffer entry at D848
g$D848 DEFB $00

; Game status buffer entry at D849
g$D849 DEFB $00

; Game status buffer entry at D84A
g$D84A DEFB $00,$00

; Game status buffer entry at D84C
g$D84C DEFW $0000
 $D84E DEFB $00,$00

; Game status buffer entry at D850
g$D850 DEFB $00
 $D851 DEFB $00
 $D852 DEFB $00

; Game status buffer entry at D853
g$D853 DEFW $0000
 $D855 DEFW $0000
 $D857 DEFW $0000
 $D859 DEFW $0000

; Game status buffer entry at D85B
g$D85B DEFW $0000

; Game status buffer entry at D85D
g$D85D DEFB $00

; Game status buffer entry at D85E
g$D85E DEFB $00

; Game status buffer entry at D85F
g$D85F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D867 DEFB $00,$00,$00,$00

; Game status buffer entry at D86B
g$D86B DEFB $00,$00

; Game status buffer entry at D86D
g$D86D DEFB $00

; Level
@label=Level
g$D86E DEFB $00

; High Score
@label=HighScore
g$D86F DEFB $00
 $D870 DEFB $00
 $D871 DEFB $00

; Game status buffer entry at D872
g$D872 DEFW $0000

; Score
@label=Score_Digit_01
g$D874 DEFB $00
@label=Score_Digit_02
 $D875 DEFB $00
@label=Score_Digit_03
 $D876 DEFB $00

; Screen Position Selected Menu Item
@label=SelectedMenuItem_ScreenPosition
g$D877 DEFW $5843

; Defaults Of Some Kind?
;
; Used by the routine at #R$D2A1.
@label=Defaults
g$D879 DEFB $04,$04  ; #PLURAL(#PEEK(#PC))(Write #N(#PEEK(#PC+$01)) just 1
                     ; time,Repeat #N(#PEEK(#PC+$01)) x #N({count}) times).
 $D87B DEFB $06,$02  ; #PLURAL(#PEEK(#PC))(Write #N(#PEEK(#PC+$01)) just 1
                     ; time,Repeat #N(#PEEK(#PC+$01)) x #N({count}) times).
 $D87D DEFB $02,$01  ; #PLURAL(#PEEK(#PC))(Write #N(#PEEK(#PC+$01)) just 1
                     ; time,Repeat #N(#PEEK(#PC+$01)) x #N({count}) times).
 $D87F DEFB $01,$09  ; #PLURAL(#PEEK(#PC))(Write #N(#PEEK(#PC+$01)) just 1
                     ; time,Repeat #N(#PEEK(#PC+$01)) x #N({count}) times).
 $D881 DEFB $0D,$00  ; #PLURAL(#PEEK(#PC))(Write #N(#PEEK(#PC+$01)) just 1
                     ; time,Repeat #N(#PEEK(#PC+$01)) x #N({count}) times).
 $D883 DEFB $04,$03  ; #PLURAL(#PEEK(#PC))(Write #N(#PEEK(#PC+$01)) just 1
                     ; time,Repeat #N(#PEEK(#PC+$01)) x #N({count}) times).
 $D885 DEFB $04,$06  ; #PLURAL(#PEEK(#PC))(Write #N(#PEEK(#PC+$01)) just 1
                     ; time,Repeat #N(#PEEK(#PC+$01)) x #N({count}) times).
 $D887 DEFB $FF      ; Terminator.
 $D888 DEFB $0C,$40
 $D88A DEFW $50A9
 $D88C DEFB $20,$48

; Game status buffer entry at D88E
g$D88E DEFW $0000

; Game status buffer entry at D890
g$D890 DEFW $0000

; Pointer Level Graphics Data
;
; Will point to one of:
; #TABLE(default,centre,centre)
; { =h Address | =h Level }
; { #R$5B00 | Level 01 }
; { #R$6182 | Level 02 }
; { #R$6AFF | Level 03 }
; { #R$730A | Level 04 }
; { #R$783C | Level 05 }
; { #R$7CFD | Level 06 }
; { #R$8106 | Level 07 }
; { #R$89D2 | Level 08 }
; { #R$9110 | Level 09 }
; { #R$9772 | Level 10 }
; TABLE#
@label=LevelGraphicsData
g$D892 DEFW $0000

; Routine at D894
;
; Used by the routine at #R$D97E.
c$D894 LD HL,$D83A   ; #REGhl=#R$D83A.
 $D897 RES 0,(HL)    ; Reset bit 0 of *#REGhl.
 $D899 LD HL,$D839   ; #REGhl=#R$D839.
 $D89C SET 7,(HL)    ; Set bit 7 of *#REGhl.
 $D89E CALL $EC39    ; Call #R$EC39.
 $D8A1 LD HL,$5825   ; #REGhl=#N$5825 (attribute buffer location).
 $D8A4 LD B,$04      ; #REGb=#N$04.
*$D8A6 PUSH BC       ; Stash #REGbc on the stack.
 $D8A7 LD B,$10      ; #REGb=#N$10.
*$D8A9 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $D8AB INC HL        ; Increment #REGhl by one.
 $D8AC DJNZ $D8A9    ; Decrease counter by one and loop back to #R$D8A9 until
                     ; counter is zero.
 $D8AE LD DE,$0010   ; {#REGhl+=#N($0010,$04,$04).
 $D8B1 ADD HL,DE     ; }
 $D8B2 POP BC        ; Restore #REGbc from the stack.
 $D8B3 DJNZ $D8A6    ; Decrease counter by one and loop back to #R$D8A6 until
                     ; counter is zero.
 $D8B5 LD BC,$00FA   ; #REGbc=#N($00FA,$04,$04).
 $D8B8 DI            ; Disable interrupts.
*$D8B9 LD D,$0E      ; #REGd=#N$0E.
 $D8BB LD A,$05      ; #REGa=#N$05.
*$D8BD OUT ($FE),A   ; Send to the speaker.
 $D8BF XOR %00010000 ; Flip bit 4.
 $D8C1 LD E,C        ; #REGe=#REGc.
*$D8C2 DEC E         ; Decrease #REGe by one.
 $D8C3 JR NZ,$D8C2   ; Jump to #R$D8C2 if #REGe is not zero.
 $D8C5 DEC D         ; Decrease #REGd by one.
 $D8C6 JR NZ,$D8BD   ; Jump to #R$D8BD if #REGd is not zero.
 $D8C8 DEC BC        ; Decrease #REGbc by one.
 $D8C9 LD A,B        ; {Jump to #R$D8B9 if #REGbc is not zero.
 $D8CA OR C          ;
 $D8CB JR NZ,$D8B9   ; }
 $D8CD EI            ; Enable interrupts.
 $D8CE CALL $E9BF    ; Call #R$E9BF.
 $D8D1 LD B,$64      ; #REGb=#N$64.
*$D8D3 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $D8D4 DJNZ $D8D3    ; Decrease counter by one and loop back to #R$D8D3 until
                     ; counter is zero.
 $D8D6 DI            ; Disable interrupts.
 $D8D7 LD HL,$D83A   ; #REGhl=#R$D83A.
 $D8DA LD (HL),$80   ; Write #N$80 to *#REGhl.
*$D8DC CALL $FC6D    ; Call #R$FC6D.
 $D8DF LD A,($D85E)  ; #REGa=*#R$D85E.
 $D8E2 INC A         ; Increment #REGa by one.
 $D8E3 LD D,A        ; #REGd=#REGa.
 $D8E4 LD E,$7D      ; #REGe=#N$7D.
 $D8E6 LD H,$01      ; #REGh=#N$01.
*$D8E8 LD A,(HL)     ; #REGa=*#REGhl.
 $D8E9 AND %00011000 ; Keep only bits 3-4.
 $D8EB OR %00000101  ; Set bits 0, 2.
 $D8ED OUT ($FE),A   ; Set border to the colour held by #REGa.
 $D8EF INC HL        ; Increment #REGhl by one.
 $D8F0 LD B,D        ; #REGb=#REGd.
*$D8F1 DJNZ $D8F1    ; Decrease counter by one and loop back to #R$D8F1 until
                     ; counter is zero.
 $D8F3 DEC E         ; Decrease #REGe by one.
 $D8F4 JP NZ,$D8E8   ; Jump to #R$D8E8 if #REGe is not zero.
 $D8F7 LD HL,$D83A   ; #REGhl=#R$D83A.
 $D8FA BIT 4,(HL)    ; Test bit 4 of *#REGhl.
 $D8FC JR NZ,$D918   ; Jump to #R$D918 if #REGe is not zero.
 $D8FE LD A,($D840)  ; #REGa=*#R$D840.
 $D901 AND A         ; Set flags.
 $D902 INC A         ; Increment #REGa by one.
 $D903 DAA           ; DAA.
 $D904 LD ($D840),A  ; Write #REGa to *#R$D840.
 $D907 JR NC,$D912   ; Jump to #R$D912 if #REGa is higher.
 $D909 LD A,($D83F)  ; #REGa=*#R$D83F.
 $D90C CCF           ; Invert the carry flag.
 $D90D INC A         ; Increment #REGa by one.
 $D90E DAA           ; DAA.
 $D90F LD ($D83F),A  ; Write #REGa to *#R$D83F.
*$D912 CALL $EA00    ; Call #R$EA00.
 $D915 JP $D8DC      ; Jump to #R$D8DC.
*$D918 LD HL,$D841   ; #REGhl=#R$D841.
 $D91B LD A,($D876)  ; #REGa=*#R$D876.
 $D91E AND A         ; Set flags.
 $D91F ADD A,(HL)    ; #REGa+=*#REGhl.
 $D920 DAA           ; DAA.
 $D921 LD ($D876),A  ; Write #REGa to *#R$D876.
 $D924 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $D926 DEC HL        ; Decrease #REGhl by one.
 $D927 LD A,($D875)  ; #REGa=*#R$D875.
 $D92A ADC A,(HL)    ; #REGa+=*#REGhl.
 $D92B DAA           ; DAA.
 $D92C LD ($D875),A  ; Write #REGa to *#R$D875.
 $D92F LD (HL),$00   ; Write #N$00 to *#REGhl.
 $D931 DEC HL        ; Decrease #REGhl by one.
 $D932 LD A,($D874)  ; #REGa=*#R$D874.
 $D935 ADC A,(HL)    ; #REGa+=*#REGhl.
 $D936 DAA           ; DAA.
 $D937 LD ($D874),A  ; Write #REGa to *#R$D874.
 $D93A LD (HL),$00   ; Write #N$00 to *#REGhl.
 $D93C LD HL,$F0EA   ; #REGhl=#R$F0EA.
 $D93F LD B,$23      ; #REGb=#N$23.
 $D941 CALL $EF4A    ; Call #R$EF4A.
 $D944 CALL $EA00    ; Call #R$EA00.
 $D947 CALL $EA14    ; Call #R$EA14.
 $D94A LD A,($D86D)  ; {Jump to #R$D96A if *#R$D86D is not equal to #N$00.
 $D94D CP $00        ;
 $D94F JR NZ,$D96A   ; }
 $D951 LD A,($D874)  ; #REGa=*#R$D874.
 $D954 AND %11110000 ; Keep only bits 4-7.
 $D956 RRCA          ; {RRCA.
 $D957 RRCA          ;
 $D958 RRCA          ;
 $D959 RRCA          ; }
 $D95A CP $01        ; {Jump to #R$D96A if #REGa is lower than #N$01 (unsigned
 $D95C JP M,$D96A    ; comparison).}
 $D95F LD A,$01      ; {Write #N$01 to *#R$D86D.
 $D961 LD ($D86D),A  ; }
 $D964 CALL $E9BF    ; Call #R$E9BF.
 $D967 CALL $E9DA    ; Call #R$E9DA.
*$D96A LD A,$80      ; {Write #N$80 to *#R$D838.
 $D96C LD ($D838),A  ; }
*$D96F CALL $EB56    ; Call #R$EB56.
 $D972 CP $00        ; {Jump to #R$D96F if #REGa is equal to #N$00.
 $D974 JR Z,$D96F    ; }
 $D976 XOR A         ; {Write #N$00 to *#R$D838.
 $D977 LD ($D838),A  ; }
 $D97A CALL $EE61    ; Call #R$EE61.
 $D97D RET           ; Return.

; Routine at D97E
;
; Used by the routine at #R$D469.
c$D97E LD HL,$E270   ; #REGhl=#R$E270.
 $D981 LD D,$01      ; #REGd=#N$01.
 $D983 LD B,$04      ; #REGb=#N$04.
*$D985 PUSH BC       ; Stash #REGbc on the stack.
 $D986 LD B,$05      ; #REGb=#N$05.
*$D988 LD A,(HL)     ; {Jump to #R$D999 if *#REGhl is not equal to #REGd.
 $D989 CP D          ;
 $D98A JR NZ,$D999   ; }
 $D98C INC HL        ; Increment #REGhl by one.
 $D98D INC D         ; Increment #REGd by one.
 $D98E DJNZ $D988    ; Decrease counter by one and loop back to #R$D988 until
                     ; counter is zero.
 $D990 INC HL        ; {Increment #REGhl by two.
 $D991 INC HL        ; }
 $D992 POP BC        ; Restore #REGbc from the stack.
 $D993 DJNZ $D985    ; Decrease counter by one and loop back to #R$D985 until
                     ; counter is zero.
 $D995 POP BC        ; Restore #REGbc from the stack.
 $D996 JP $D894      ; Jump to #R$D894.
*$D999 POP BC        ; Restore #REGbc from the stack.
 $D99A RET           ; Return.

; Routine at D99B
;
; Used by the routine at #R$F43E.
c$D99B LD A,($E2C7)  ; #REGa=*#R$E2C7.
; This entry point is used by the routine at #R$F286.
*$D99E CP $15        ; {Jump to #R$D9A6 if #REGa is not equal to #N$15.
 $D9A0 JR NZ,$D9A6   ; }
 $D9A2 XOR A         ; {Write #N$00 to *#R$D83B.
 $D9A3 LD ($D83B),A  ; }
*$D9A6 CP $3D        ; {Jump to #R$D9AE if #REGa is not equal to #N$3D.
 $D9A8 JR NZ,$D9AE   ; }
 $D9AA XOR A         ; {Write #N$00 to *#R$D83C.
 $D9AB LD ($D83C),A  ; }
*$D9AE CP $3E        ; {Jump to #R$D9B6 if #REGa is not equal to #N$3E.
 $D9B0 JR NZ,$D9B6   ; }
 $D9B2 XOR A         ; {Write #N$00 to *#R$D83D.
 $D9B3 LD ($D83D),A  ; }
*$D9B6 CP $3F        ; {Return if #REGa is not equal to #N$3F.
 $D9B8 RET NZ        ; }
 $D9B9 XOR A         ; {Write #N$00 to *#R$D83E.
 $D9BA LD ($D83E),A  ; }
 $D9BD RET           ; Return.

; Routine at D9BE
;
; Used by the routines at #R$DA0B and #R$F43E.
c$D9BE LD A,($E2C7)  ; #REGa=*#R$E2C7.
 $D9C1 LD BC,($E75D) ; #REGbc=*#R$E75D.
 $D9C5 LD HL,$D838   ; #REGhl=#R$D838.
 $D9C8 CP $15        ; {Jump to #R$D9D9 if #REGa is not equal to #N$15.
 $D9CA JR NZ,$D9D9   ; }
 $D9CC LD ($DA15),BC ; Write #REGbc to *#R$DA15.
 $D9D0 BIT 1,(HL)    ; {Jump to #R$D9D9 if bit 1 of *#REGhl is set.
 $D9D2 JR NZ,$D9D9   ; }
 $D9D4 LD A,$01      ; {Write #N$01 to *#R$D83B.
 $D9D6 LD ($D83B),A  ; }
*$D9D9 CP $3D        ; {Jump to #R$D9EA if #REGa is not equal to #N$3D.
 $D9DB JR NZ,$D9EA   ; }
 $D9DD LD ($DA17),BC ; Write #REGbc to *#R$DA17.
 $D9E1 BIT 2,(HL)    ; {Jump to #R$D9EA if bit 2 of *#REGhl is set.
 $D9E3 JR NZ,$D9EA   ; }
 $D9E5 LD A,$01      ; {Write #N$01 to *#R$D83C.
 $D9E7 LD ($D83C),A  ; }
*$D9EA CP $3E        ; {Jump to #R$D9FB if #REGa is not equal to #N$3E.
 $D9EC JR NZ,$D9FB   ; }
 $D9EE LD ($DA19),BC ; Write #REGbc to *#R$DA19.
 $D9F2 BIT 3,(HL)    ; {Jump to #R$D9FB if bit 3 of *#REGhl is set.
 $D9F4 JR NZ,$D9FB   ; }
 $D9F6 LD A,$01      ; {Write #N$01 to *#R$D83D.
 $D9F8 LD ($D83D),A  ; }
*$D9FB CP $3F        ; {Return if #REGa is not equal to #N$3F.
 $D9FD RET NZ        ; }
 $D9FE LD ($DA1B),BC ; Write #REGbc to *#R$DA1B.
 $DA02 BIT 4,(HL)    ; {Return if bit 4 of *#REGhl is set.
 $DA04 RET NZ        ; }
 $DA05 LD A,$01      ; {Write #N$01 to *#R$D83E.
 $DA07 LD ($D83E),A  ; }
 $DA0A RET           ; Return.

; Routine at DA0B
;
; Used by the routine at #R$F801.
c$DA0B LD B,$06      ; #REGb=#N$06.
 $DA0D LD C,$02      ; #REGc=#N$02.
 $DA0F LD ($E75D),BC ; Write #REGbc to *#R$E75D.
 $DA13 JR $D9BE      ; Jump to #R$D9BE.

; Game status buffer entry at DA15
g$DA15 DEFB $00

; Game status buffer entry at DA16
g$DA16 DEFB $00

; Game status buffer entry at DA17
g$DA17 DEFB $00

; Game status buffer entry at DA18
g$DA18 DEFB $00

; Game status buffer entry at DA19
g$DA19 DEFB $00

; Game status buffer entry at DA1A
g$DA1A DEFB $00

; Game status buffer entry at DA1B
g$DA1B DEFB $00

; Game status buffer entry at DA1C
g$DA1C DEFB $00

; Game status buffer entry at DA1D
g$DA1D DEFW $0000

; Game status buffer entry at DA1F
g$DA1F DEFB $00,$00,$01,$01,$02,$02,$03,$03
 $DA27 DEFB $03,$04,$04,$05,$05,$06,$05,$07
 $DA2F DEFB $06,$08,$06,$09,$07,$0A,$07,$0B
 $DA37 DEFB $07,$0C,$08,$0D,$FF

; Routine at DA3C
;
; Used by the routines at #R$DA8F and #R$DAB1.
;
; B Pixel y-coordinate
; C Pixel x-coordinate
c$DA3C CALL $22AA    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/22AA.html">PIXEL_ADD</a>.)
 $DA3F LD E,A        ; #REGe=#REGa.
 $DA40 LD D,$08      ; #REGd=#N$08.
 $DA42 AND A         ; {Jump to #R$DA60 if #REGa is zero.
 $DA43 JP Z,$DA60    ; }
*$DA46 LD B,E        ; #REGb=#REGe.
 $DA47 LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $DA4A LD C,$00      ; #REGc=#N$00.
*$DA4C SRL A         ; Shift #REGa right.
 $DA4E RR C          ; Rotate #REGc right.
 $DA50 DJNZ $DA4C    ; Decrease counter by one and loop back to #R$DA4C until
                     ; counter is zero.
 $DA52 LD (HL),A     ; Write #REGa to *#REGhl.
 $DA53 INC HL        ; Increment #REGhl by one.
 $DA54 LD A,C        ; #REGa=#REGc.
 $DA55 LD (HL),A     ; Write #REGa to *#REGhl.
 $DA56 DEC HL        ; Decrease #REGhl by one.
 $DA57 INC IX        ; Increment #REGix by one.
 $DA59 CALL $DA6D    ; Call #R$DA6D.
 $DA5C DEC D         ; Decrease #REGd by one.
 $DA5D JR NZ,$DA46   ; Jump to #R$DA46 if #REGd is not zero.
 $DA5F RET           ; Return.
*$DA60 LD B,D        ; #REGb=#REGd.
*$DA61 LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $DA64 LD (HL),A     ; Write #REGa to *#REGhl.
 $DA65 CALL $DA6D    ; Call #R$DA6D.
 $DA68 INC IX        ; Increment #REGix by one.
 $DA6A DJNZ $DA61    ; Decrease counter by one and loop back to #R$DA61 until
                     ; counter is zero.
 $DA6C RET           ; Return.
*$DA6D INC H         ; Increment #REGh by one.
 $DA6E LD A,H        ; #REGa=#REGh.
 $DA6F AND %00000111 ; Keep only bits 0-2.
 $DA71 RET NZ        ; Return if #REGh is not zero.
 $DA72 LD A,H        ; #REGa=#REGh.
 $DA73 SUB $08       ; #REGa-=#N$08.
 $DA75 LD H,A        ; #REGh=#REGa.
 $DA76 LD A,L        ; #REGa=#REGl.
 $DA77 ADD A,$20     ; #REGa+=#N$20.
 $DA79 LD L,A        ; #REGl=#REGa.
 $DA7A RET NC        ; Return if #REGh is higher.
 $DA7B LD A,H        ; #REGa=#REGh.
 $DA7C ADD A,$08     ; #REGa+=#N$08.
 $DA7E LD H,A        ; #REGh=#REGa.
 $DA7F XOR %01011000 ; Flip bits 3-4, 6.
 $DA81 RET NZ        ; Return if #REGh is not zero.
 $DA82 LD H,$40      ; #REGh=#N$40.
 $DA84 RET           ; Return.

; Routine at DA85
;
; Used by the routine at #R$F85D.
c$DA85 RLCA          ; {RLCA.
 $DA86 RLCA          ;
 $DA87 RLCA          ; }
 $DA88 LD D,A        ; #REGd=#REGa.
 $DA89 LD A,$B7      ; #REGa=#N$B7.
 $DA8B SUB D         ; #REGa-=#REGd.
 $DA8C SUB B         ; #REGa-=#REGb.
 $DA8D LD B,A        ; #REGb=#REGa.
 $DA8E RET           ; Return.

; Routine at DA8F
;
; Used by the routine at #R$F85D.
c$DA8F RLCA          ; {RLCA.
 $DA90 RLCA          ;
 $DA91 RLCA          ; }
 $DA92 ADD A,$09     ; #REGa+=#N$09.
 $DA94 SUB C         ; #REGa-=#REGc.
 $DA95 LD C,A        ; #REGc=#REGa.
 $DA96 LD ($DA1D),BC ; Write #REGbc to *#R$DA1D.
 $DA9A LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $DA9C LD L,A        ; #REGl=#REGa.
 $DA9D LD H,$05      ; #REGh=#N$05.
 $DA9F LD A,(HL)     ; #REGa=*#REGhl.
 $DAA0 AND %00000011 ; Keep only bits 0-1.
 $DAA2 RLCA          ; {RLCA.
 $DAA3 RLCA          ;
 $DAA4 RLCA          ; }
 $DAA5 LD D,$00      ; #REGd=#N$00.
 $DAA7 LD E,A        ; #REGe=#REGa.
 $DAA8 LD IX,$F2AE   ; #REGix=#R$F2AE.
 $DAAC ADD IX,DE     ; #REGix+=#REGde.
 $DAAE JP $DA3C      ; Jump to #R$DA3C.

; Routine at DAB1
;
; Used by the routine at #R$F85D.
c$DAB1 LD IX,$3D00   ; #HTML(#REGix=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">CHARSET</a>.)
 $DAB5 LD BC,($DA1D) ; #REGbc=*#R$DA1D.
 $DAB9 PUSH HL       ; Stash #REGhl on the stack.
 $DABA CALL $DA3C    ; Call #R$DA3C.
 $DABD POP HL        ; Restore #REGhl from the stack.
 $DABE RET           ; Return.

; Routine at DABF
;
; Used by the routines at #R$D352 and #R$F39E.
c$DABF LD A,($E75D)  ; #REGa=*#R$E75D.
 $DAC2 DEC A         ; Decrease #REGa by one.
 $DAC3 LD ($E75F),A  ; Write #REGa to *#R$E75F.
 $DAC6 LD A,($E75E)  ; #REGa=*#R$E75E.
 $DAC9 DEC A         ; Decrease #REGa by one.
 $DACA LD ($E760),A  ; Write #REGa to *#R$E760.
 $DACD LD B,$04      ; #REGb=#N$04.
 $DACF HALT          ; Halt operation (suspend CPU until the next interrupt).
*$DAD0 PUSH BC       ; Stash #REGbc on the stack.
 $DAD1 LD A,($E75F)  ; {#REGb=*#R$E75F.
 $DAD4 LD B,A        ; }
 $DAD5 LD A,($E760)  ; {#REGc=*#R$E760.
 $DAD8 LD C,A        ; }
 $DAD9 CALL $DCC2    ; Call #R$DCC2.
 $DADC PUSH HL       ; Stash #REGhl on the stack.
 $DADD LD A,$00      ; #REGa=#N$00.
 $DADF LD B,$08      ; #REGb=#N$08.
*$DAE1 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $DAE2 PUSH HL       ; }
 $DAE3 LD B,$04      ; #REGb=#N$04.
*$DAE5 LD (HL),A     ; Write #REGa to *#REGhl.
 $DAE6 INC HL        ; Increment #REGhl by one.
 $DAE7 DJNZ $DAE5    ; Decrease counter by one and loop back to #R$DAE5 until
                     ; counter is zero.
 $DAE9 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $DAEA POP BC        ; }
 $DAEB INC H         ; Increment #REGh by one.
 $DAEC DJNZ $DAE1    ; Decrease counter by one and loop back to #R$DAE1 until
                     ; counter is zero.
 $DAEE POP HL        ; Restore #REGhl from the stack.
 $DAEF CALL $DCD1    ; Call #R$DCD1.
 $DAF2 LD A,$47      ; #REGa=#N$47.
 $DAF4 LD B,$04      ; #REGb=#N$04.
*$DAF6 LD (DE),A     ; Write #REGa to *#REGde.
 $DAF7 INC DE        ; Increment #REGde by one.
 $DAF8 DJNZ $DAF6    ; Decrease counter by one and loop back to #R$DAF6 until
                     ; counter is zero.
 $DAFA POP BC        ; Restore #REGbc from the stack.
 $DAFB LD HL,$E75F   ; #REGhl=#R$E75F.
 $DAFE INC (HL)      ; Increment *#REGhl by one.
 $DAFF DJNZ $DAD0    ; Decrease counter by one and loop back to #R$DAD0 until
                     ; counter is zero.
 $DB01 LD A,($D833)  ; {Return if *#R$D833 is equal to #N$00.
 $DB04 CP $00        ;
 $DB06 RET Z         ; }
 $DB07 LD B,$03      ; #REGb=#N$03.
*$DB09 PUSH BC       ; Stash #REGbc on the stack.
 $DB0A LD A,$05      ; #REGa=#N$05.
 $DB0C LD C,$1E      ; #REGc=#N$1E.
*$DB0E LD B,$28      ; #REGb=#N$28.
 $DB10 SLA B         ; Shift #REGb left (with carry).
*$DB12 DJNZ $DB12    ; Decrease counter by one and loop back to #R$DB12 until
                     ; counter is zero.
 $DB14 XOR %00010000 ; Flip bit 4.
 $DB16 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $DB18 DEC C         ; Decrease #REGc by one.
 $DB19 JR NZ,$DB0E   ; Jump to #R$DB0E if #REGc is not zero.
 $DB1B LD C,$14      ; #REGc=#N$14.
*$DB1D LD B,$3C      ; #REGb=#N$3C.
 $DB1F SLA B         ; Shift #REGb left (with carry).
*$DB21 DJNZ $DB21    ; Decrease counter by one and loop back to #R$DB21 until
                     ; counter is zero.
 $DB23 XOR %00010000 ; Flip bit 4.
 $DB25 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $DB27 DEC C         ; Decrease #REGc by one.
 $DB28 JR NZ,$DB1D   ; Jump to #R$DB1D if #REGc is not zero.
 $DB2A POP BC        ; Restore #REGbc from the stack.
 $DB2B DJNZ $DB09    ; Decrease counter by one and loop back to #R$DB09 until
                     ; counter is zero.
 $DB2D RET           ; Return.

; Print Numbers
;
; Used by the routines at #R$D352, #R$EA00 and #R$EA4A.
;
; A Number of digits to print
; BC Screen co-ordinates where to print
; DE Pointer to address of digits to print
@label=Print_Numbers
c$DB2E PUSH AF        ; Stash #REGaf on the stack.
 $DB2F CALL $DCC2     ; Call #R$DCC2.
 $DB32 POP AF         ; Restore #REGaf from the stack.
 $DB33 RRCA           ; RRCA.
 $DB34 LD B,A         ; #REGb=#REGa.
; This entry point is used by the routines at #R$EA14 and #R$EA2F.
*$DB35 LD A,(DE)      ; #REGa=*#REGde.
 $DB36 LD C,A         ; #REGc=#REGa.
 $DB37 AND %11110000  ; Keep only bits 4-7.
 $DB39 RRCA           ; RRCA.
 $DB3A CALL $DB4C     ; Call #R$DB4C.
 $DB3D INC HL         ; Increment #REGhl by one.
 $DB3E LD A,C         ; #REGa=#REGc.
 $DB3F AND %00001111  ; Keep only bits 0-3.
 $DB41 RLCA           ; {RLCA.
 $DB42 RLCA           ;
 $DB43 RLCA           ; }
 $DB44 CALL $DB4C     ; Call #R$DB4C.
 $DB47 INC DE         ; Increment #REGde by one.
 $DB48 INC HL         ; Increment #REGhl by one.
 $DB49 DJNZ $DB35     ; Decrease counter by one and loop back to #R$DB35 until
                      ; counter is zero.
 $DB4B RET            ; Return.
*$DB4C PUSH BC        ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $DB4D PUSH DE        ;
 $DB4E PUSH HL        ; }
 $DB4F LD B,$00       ; #REGb=#N$00.
 $DB51 LD C,A         ; #REGc=#REGa.
 $DB52 PUSH HL        ; Stash #REGhl on the stack.
 $DB53 LD HL,$F2CE    ; #REGhl=#R$F2CE.
 $DB56 ADD HL,BC      ; #REGhl+=#REGbc.
 $DB57 POP DE         ; Restore #REGde from the stack.
 $DB58 LD B,$08       ; #REGb=#N$08.
*$DB5A LD A,(HL)      ; #REGa=*#REGhl.
 $DB5B LD (DE),A      ; Write #REGa to *#REGde.
 $DB5C INC HL         ; Increment #REGhl by one.
 $DB5D LD IX,$D83A    ; #REGix=#R$D83A.
 $DB61 BIT 1,(IX+$00) ; Test bit 1 of *#REGix+#N$00.
 $DB65 JR Z,$DB77     ; Jump to #R$DB77 if #REGhl is zero.
 $DB67 LD A,B         ; {Jump to #R$DB77 if #REGb is not equal to #N$05.
 $DB68 CP $05         ;
 $DB6A JR NZ,$DB77    ; }
 $DB6C PUSH HL        ; Stash #REGhl on the stack.
 $DB6D EX DE,HL       ; Exchange the #REGde and #REGhl registers.
 $DB6E LD DE,$06E0    ; {#REGhl-=#N($06E0,$04,$04).
 $DB71 SBC HL,DE      ; }
 $DB73 EX DE,HL       ; Exchange the #REGde and #REGhl registers.
 $DB74 POP HL         ; Restore #REGhl from the stack.
 $DB75 JR $DB78       ; Jump to #R$DB78.
*$DB77 INC D          ; Increment #REGd by one.
*$DB78 DJNZ $DB5A     ; Decrease counter by one and loop back to #R$DB5A until
                      ; counter is zero.
 $DB7A POP HL         ; {Restore #REGhl, #REGde and #REGbc from the stack.
 $DB7B POP DE         ;
 $DB7C POP BC         ; }
 $DB7D RET            ; Return.

; Routine at DB7E
;
; Used by the routines at #R$EE61 and #R$F43E.
c$DB7E LD A,($E75D)  ; #REGa=*#R$E75D.
 $DB81 DEC A         ; Decrease #REGa by one.
 $DB82 LD ($E75F),A  ; Write #REGa to *#R$E75F.
 $DB85 LD A,($E761)  ; {#REGb=*#R$E761.
 $DB88 LD B,A        ; }
*$DB89 PUSH BC       ; Stash #REGbc on the stack.
 $DB8A LD A,($E75E)  ; #REGa=*#R$E75E.
 $DB8D ADD A,$02     ; #REGa+=#N$02.
 $DB8F LD ($E760),A  ; Write #REGa to *#R$E760.
 $DB92 LD B,$04      ; #REGb=#N$04.
*$DB94 PUSH BC       ; Stash #REGbc on the stack.
 $DB95 LD A,($E75F)  ; {#REGb=*#R$E75F.
 $DB98 LD B,A        ; }
 $DB99 LD A,($E760)  ; {#REGc=*#R$E760.
 $DB9C LD C,A        ; }
 $DB9D CALL $DCC2    ; Call #R$DCC2.
 $DBA0 LD A,$08      ; #REGa=#N$08.
 $DBA2 LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DBA5 PUSH HL       ; Stash #REGhl on the stack.
 $DBA6 POP DE        ; Restore #REGde from the stack.
 $DBA7 INC DE        ; Increment #REGde by one.
 $DBA8 PUSH HL       ; {Stash #REGhl and #REGhl on the stack.
*$DBA9 PUSH HL       ; }
 $DBAA LDDR          ; LDDR.
 $DBAC INC HL        ; Increment #REGhl by one.
 $DBAD LD (HL),C     ; Write #REGc to *#REGhl.
 $DBAE POP HL        ; Restore #REGhl from the stack.
 $DBAF INC H         ; Increment #REGh by one.
 $DBB0 PUSH HL       ; Stash #REGhl on the stack.
 $DBB1 POP DE        ; Restore #REGde from the stack.
 $DBB2 INC DE        ; Increment #REGde by one.
 $DBB3 LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DBB6 DEC A         ; Decrease #REGa by one.
 $DBB7 JP NZ,$DBA9   ; Jump to #R$DBA9 if #REGa is not zero.
 $DBBA POP HL        ; Restore #REGhl from the stack.
 $DBBB CALL $DCD1    ; Call #R$DCD1.
 $DBBE PUSH DE       ; Stash #REGde on the stack.
 $DBBF POP HL        ; Restore #REGhl from the stack.
 $DBC0 INC DE        ; Increment #REGde by one.
 $DBC1 LD BC,$0005   ; #REGbc=#N($0005,$04,$04).
 $DBC4 LDDR          ; LDDR.
 $DBC6 LD A,$47      ; #REGa=#N$47.
 $DBC8 INC DE        ; Increment #REGde by one.
 $DBC9 LD (DE),A     ; Write #REGa to *#REGde.
 $DBCA LD HL,$E75F   ; #REGhl=#R$E75F.
 $DBCD INC (HL)      ; Increment *#REGhl by one.
 $DBCE POP BC        ; Restore #REGbc from the stack.
 $DBCF DJNZ $DB94    ; Decrease counter by one and loop back to #R$DB94 until
                     ; counter is zero.
 $DBD1 POP BC        ; Restore #REGbc from the stack.
 $DBD2 PUSH BC       ; Stash #REGbc on the stack.
 $DBD3 CALL $DD52    ; Call #R$DD52.
 $DBD6 LD A,($E75D)  ; #REGa=*#R$E75D.
 $DBD9 DEC A         ; Decrease #REGa by one.
 $DBDA LD ($E75F),A  ; Write #REGa to *#R$E75F.
 $DBDD LD HL,$E75E   ; #REGhl=#R$E75E.
 $DBE0 INC (HL)      ; Increment *#REGhl by one.
 $DBE1 POP BC        ; Restore #REGbc from the stack.
 $DBE2 DJNZ $DB89    ; Decrease counter by one and loop back to #R$DB89 until
                     ; counter is zero.
 $DBE4 RET           ; Return.

; Routine at DBE5
;
; Used by the routines at #R$EE61 and #R$F43E.
c$DBE5 LD A,($E75D)  ; #REGa=*#R$E75D.
 $DBE8 DEC A         ; Decrease #REGa by one.
 $DBE9 LD ($E75F),A  ; Write #REGa to *#R$E75F.
 $DBEC LD A,($E761)  ; {#REGb=*#R$E761.
 $DBEF LD B,A        ; }
*$DBF0 PUSH BC       ; Stash #REGbc on the stack.
 $DBF1 LD A,($E75E)  ; #REGa=*#R$E75E.
 $DBF4 DEC A         ; Decrease #REGa by one.
 $DBF5 LD ($E760),A  ; Write #REGa to *#R$E760.
 $DBF8 LD B,$04      ; #REGb=#N$04.
*$DBFA PUSH BC       ; Stash #REGbc on the stack.
 $DBFB LD A,($E75F)  ; {#REGb=*#R$E75F.
 $DBFE LD B,A        ; }
 $DBFF LD A,($E760)  ; {#REGc=*#R$E760.
 $DC02 LD C,A        ; }
 $DC03 CALL $DCC2    ; Call #R$DCC2.
 $DC06 LD A,$08      ; #REGa=#N$08.
 $DC08 LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DC0B PUSH HL       ; Stash #REGhl on the stack.
 $DC0C POP DE        ; Restore #REGde from the stack.
 $DC0D DEC DE        ; Decrease #REGde by one.
 $DC0E PUSH HL       ; {Stash #REGhl and #REGhl on the stack.
*$DC0F PUSH HL       ; }
 $DC10 LDIR          ; LDIR.
 $DC12 DEC HL        ; Decrease #REGhl by one.
 $DC13 LD (HL),C     ; Write #REGc to *#REGhl.
 $DC14 POP HL        ; Restore #REGhl from the stack.
 $DC15 INC H         ; Increment #REGh by one.
 $DC16 PUSH HL       ; Stash #REGhl on the stack.
 $DC17 POP DE        ; Restore #REGde from the stack.
 $DC18 DEC DE        ; Decrease #REGde by one.
 $DC19 LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DC1C DEC A         ; Decrease #REGa by one.
 $DC1D JP NZ,$DC0F   ; Jump to #R$DC0F if #REGa is not zero.
 $DC20 POP HL        ; Restore #REGhl from the stack.
 $DC21 CALL $DCD1    ; Call #R$DCD1.
 $DC24 PUSH DE       ; Stash #REGde on the stack.
 $DC25 POP HL        ; Restore #REGhl from the stack.
 $DC26 DEC DE        ; Decrease #REGde by one.
 $DC27 LD BC,$0005   ; #REGbc=#N($0005,$04,$04).
 $DC2A LDIR          ; LDIR.
 $DC2C LD A,$47      ; #REGa=#N$47.
 $DC2E DEC DE        ; Decrease #REGde by one.
 $DC2F LD (DE),A     ; Write #REGa to *#REGde.
 $DC30 LD HL,$E75F   ; #REGhl=#R$E75F.
 $DC33 INC (HL)      ; Increment *#REGhl by one.
 $DC34 POP BC        ; Restore #REGbc from the stack.
 $DC35 DJNZ $DBFA    ; Decrease counter by one and loop back to #R$DBFA until
                     ; counter is zero.
 $DC37 POP BC        ; Restore #REGbc from the stack.
 $DC38 PUSH BC       ; Stash #REGbc on the stack.
 $DC39 CALL $DD52    ; Call #R$DD52.
 $DC3C LD A,($E75D)  ; #REGa=*#R$E75D.
 $DC3F DEC A         ; Decrease #REGa by one.
 $DC40 LD ($E75F),A  ; Write #REGa to *#R$E75F.
 $DC43 LD HL,$E75E   ; #REGhl=#R$E75E.
 $DC46 DEC (HL)      ; Decrease *#REGhl by one.
 $DC47 POP BC        ; Restore #REGbc from the stack.
 $DC48 DJNZ $DBF0    ; Decrease counter by one and loop back to #R$DBF0 until
                     ; counter is zero.
 $DC4A RET           ; Return.

; Routine at DC4B
;
; Used by the routines at #R$EE61 and #R$F43E.
c$DC4B LD A,($E75E)  ; #REGa=*#R$E75E.
 $DC4E DEC A         ; Decrease #REGa by one.
 $DC4F LD ($E760),A  ; Write #REGa to *#R$E760.
 $DC52 LD A,($E761)  ; {#REGb=*#R$E761.
 $DC55 LD B,A        ; }
*$DC56 PUSH BC       ; Stash #REGbc on the stack.
 $DC57 LD A,($E75D)  ; #REGa=*#R$E75D.
 $DC5A ADD A,$02     ; #REGa+=#N$02.
 $DC5C LD ($E75F),A  ; Write #REGa to *#R$E75F.
 $DC5F LD B,$04      ; #REGb=#N$04.
*$DC61 PUSH BC       ; Stash #REGbc on the stack.
 $DC62 LD A,($E75F)  ; {#REGb=*#R$E75F.
 $DC65 LD B,A        ; }
 $DC66 LD A,($E760)  ; {#REGc=*#R$E760.
 $DC69 LD C,A        ; }
 $DC6A CALL $DCC2    ; Call #R$DCC2.
 $DC6D PUSH HL       ; Stash #REGhl on the stack.
 $DC6E INC B         ; Increment #REGb by one.
 $DC6F CALL $DCC2    ; Call #R$DCC2.
 $DC72 PUSH HL       ; Stash #REGhl on the stack.
 $DC73 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $DC74 POP HL        ; }
 $DC75 LD A,$08      ; #REGa=#N$08.
 $DC77 LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DC7A PUSH HL       ; {Stash #REGhl, #REGhl and #REGde on the stack.
*$DC7B PUSH HL       ;
 $DC7C PUSH DE       ; }
 $DC7D LDIR          ; LDIR.
 $DC7F DEC HL        ; Decrease #REGhl by one.
 $DC80 PUSH HL       ; Stash #REGhl on the stack.
 $DC81 LD (HL),C     ; Write #REGc to *#REGhl.
 $DC82 POP DE        ; Restore #REGde from the stack.
 $DC83 DEC DE        ; Decrease #REGde by one.
 $DC84 LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $DC87 LDDR          ; LDDR.
 $DC89 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $DC8A POP HL        ; }
 $DC8B INC D         ; Increment #REGd by one.
 $DC8C INC H         ; Increment #REGh by one.
 $DC8D LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DC90 DEC A         ; Decrease #REGa by one.
 $DC91 JP NZ,$DC7B   ; Jump to #R$DC7B if #REGa is not zero.
 $DC94 POP HL        ; Restore #REGhl from the stack.
 $DC95 CALL $DCD1    ; Call #R$DCD1.
 $DC98 LD HL,$0020   ; #REGhl=#N($0020,$04,$04).
 $DC9B ADD HL,DE     ; #REGhl+=#REGde.
 $DC9C EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $DC9D LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DCA0 LDIR          ; LDIR.
 $DCA2 LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $DCA5 LD A,$47      ; #REGa=#N$47.
 $DCA7 DEC HL        ; Decrease #REGhl by one.
 $DCA8 LD (HL),A     ; Write #REGa to *#REGhl.
 $DCA9 PUSH HL       ; Stash #REGhl on the stack.
 $DCAA POP DE        ; Restore #REGde from the stack.
 $DCAB DEC DE        ; Decrease #REGde by one.
 $DCAC LDDR          ; LDDR.
 $DCAE LD HL,$E75F   ; #REGhl=#R$E75F.
 $DCB1 DEC (HL)      ; Decrease *#REGhl by one.
 $DCB2 POP BC        ; Restore #REGbc from the stack.
 $DCB3 DJNZ $DC61    ; Decrease counter by one and loop back to #R$DC61 until
                     ; counter is zero.
 $DCB5 POP BC        ; Restore #REGbc from the stack.
 $DCB6 PUSH BC       ; Stash #REGbc on the stack.
 $DCB7 CALL $DD52    ; Call #R$DD52.
 $DCBA LD HL,$E75D   ; #REGhl=#R$E75D.
 $DCBD INC (HL)      ; Increment *#REGhl by one.
 $DCBE POP BC        ; Restore #REGbc from the stack.
 $DCBF DJNZ $DC56    ; Decrease counter by one and loop back to #R$DC56 until
                     ; counter is zero.
 $DCC1 RET           ; Return.

; Calculate Screen Block Address
;
; Used by the routines at #R$D763, #R$DABF, #R$DB2E, #R$DB7E, #R$DBE5, #R$DC4B,
; #R$DCDC, #R$DD73, #R$DE69, #R$E5E4, #R$EA14, #R$EA2F and #R$EC5A.
;
;   B X co-ordinate
;   C Y co-ordinate
; O:HL Screen buffer address pointer
@label=Calculate_ScreenBlockAddress
c$DCC2 LD A,B        ; Load the X position into #REGa.
 $DCC3 AND %11111000 ; Divide X by #N$08 to extract only the column number.
 $DCC5 ADD A,$40     ; {Add #N$40 to get the high byte of screen address and
 $DCC7 LD H,A        ; store the result in #REGh.}
 $DCC8 LD A,B        ; Load the X position into #REGa again.
 $DCC9 AND %00000111 ; Extract only the pixel offset within the character
                     ; block.
 $DCCB RRCA          ; {Multiply #REGa by #N$20.
 $DCCC RRCA          ;
 $DCCD RRCA          ; }
 $DCCE ADD A,C       ; {Add the Y co-ordinate store the result in #REGl.
 $DCCF LD L,A        ; }
 $DCD0 RET           ; Return.

; Calculate Attribute Address
;
; Used by the routines at #R$D763, #R$DABF, #R$DB7E, #R$DBE5, #R$DC4B, #R$DCDC,
; #R$DE69 and #R$E5E4.
;
;   HL Screen buffer address
; O:DE Attribute buffer address
@label=Calculate_AttributeAddress
c$DCD1 LD A,H        ; #REGa=high byte of the screen address.
; Isolate the screen third area.
 $DCD2 RRCA          ; {Move the relevant bits to positions 0-1.
 $DCD3 RRCA          ;
 $DCD4 RRCA          ; }
 $DCD5 AND %00000011 ; Keep only those bits.
; This sets #N$58 on top of the result, which is the base address for the
; attribute buffer. Will result in either: #N$58#RAW(,) #N$59 or #N$5A.
 $DCD7 OR %01011000  ; Set bits 3-4 and 6.
 $DCD9 LD D,A        ; Store the result in #REGd, this is the high byte of the attribute
                     ; buffer address.
 $DCDA LD E,L        ; #REGe=low byte of the screen address.
 $DCDB RET           ; Return.

; Move Tile Up
;
; Used by the routine at #R$F43E.
@label=MoveTile_Up
c$DCDC LD A,($E75E)  ; #REGa=*#R$E75E.
 $DCDF DEC A         ; Decrease #REGa by one.
 $DCE0 LD ($E760),A  ; Write #REGa to *#R$E760.
 $DCE3 LD A,($E761)  ; {#REGb=*#R$E761.
 $DCE6 LD B,A        ; }
@label=MoveTile_Up_Loop
*$DCE7 PUSH BC       ; Stash #REGbc on the stack.
 $DCE8 LD A,($E75D)  ; #REGa=*#R$E75D.
 $DCEB DEC A         ; Decrease #REGa by one.
 $DCEC LD ($E75F),A  ; Write #REGa to *#R$E75F.
 $DCEF LD B,$04      ; #REGb=#N$04.
*$DCF1 PUSH BC       ; Stash #REGbc on the stack.
 $DCF2 LD A,($E75F)  ; {#REGb=*#R$E75F.
 $DCF5 LD B,A        ; }
 $DCF6 LD A,($E760)  ; {#REGc=*#R$E760.
 $DCF9 LD C,A        ; }
 $DCFA CALL $DCC2    ; Call #R$DCC2.
 $DCFD PUSH HL       ; Stash #REGhl on the stack.
 $DCFE DEC B         ; Decrease #REGb by one.
 $DCFF CALL $DCC2    ; Call #R$DCC2.
 $DD02 PUSH HL       ; {#REGde=#REGhl (using the stack).
 $DD03 POP DE        ; }
 $DD04 POP HL        ; Restore #REGhl from the stack.
 $DD05 LD A,$08      ; #REGa=#N$08.
 $DD07 LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DD0A PUSH HL       ; {Stash #REGhl, #REGhl and #REGde on the stack.
*$DD0B PUSH HL       ;
 $DD0C PUSH DE       ; }
 $DD0D LDIR          ; LDIR.
 $DD0F DEC HL        ; Decrease #REGhl by one.
 $DD10 PUSH HL       ; Stash #REGhl on the stack.
 $DD11 LD (HL),C     ; Write #REGc to *#REGhl.
 $DD12 POP DE        ; Restore #REGde from the stack.
 $DD13 DEC DE        ; Decrease #REGde by one.
 $DD14 LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $DD17 LDDR          ; LDDR.
 $DD19 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $DD1A POP HL        ; }
 $DD1B INC D         ; Increment #REGd by one.
 $DD1C INC H         ; Increment #REGh by one.
 $DD1D LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DD20 DEC A         ; Decrease #REGa by one.
 $DD21 JP NZ,$DD0B   ; Jump to #R$DD0B if #REGa is not zero.
 $DD24 POP HL        ; Restore #REGhl from the stack.
 $DD25 CALL $DCD1    ; Call #R$DCD1.
 $DD28 LD HL,$FFE0   ; {#REGhl=#R$FFE0+#REGde.
 $DD2B ADD HL,DE     ; }
 $DD2C EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $DD2D LD BC,$0004   ; #REGbc=#N($0004,$04,$04).
 $DD30 LDIR          ; LDIR.
 $DD32 LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $DD35 LD A,$47      ; #REGa=#N$47.
 $DD37 DEC HL        ; Decrease #REGhl by one.
 $DD38 LD (HL),A     ; Write #REGa to *#REGhl.
 $DD39 PUSH HL       ; Stash #REGhl on the stack.
 $DD3A POP DE        ; Restore #REGde from the stack.
 $DD3B DEC DE        ; Decrease #REGde by one.
 $DD3C LDDR          ; LDDR.
 $DD3E LD HL,$E75F   ; #REGhl=#R$E75F.
 $DD41 INC (HL)      ; Increment *#REGhl by one.
 $DD42 POP BC        ; Restore #REGbc from the stack.
 $DD43 DJNZ $DCF1    ; Decrease counter by one and loop back to #R$DCF1 until
                     ; counter is zero.
 $DD45 POP BC        ; Restore #REGbc from the stack.
 $DD46 PUSH BC       ; Stash #REGbc on the stack.
 $DD47 CALL $DD52    ; Call #R$DD52.
 $DD4A LD HL,$E75D   ; #REGhl=#R$E75D.
 $DD4D DEC (HL)      ; Decrease *#REGhl by one.
 $DD4E POP BC        ; Restore #REGbc from the stack.
 $DD4F DJNZ $DCE7    ; Decrease counter by one and loop back to #R$DCE7 until
                     ; counter is zero.
 $DD51 RET           ; Return.

; Routine at DD52
;
; Used by the routines at #R$DB7E, #R$DBE5, #R$DC4B and #R$DCDC.
c$DD52 LD HL,$E761   ; #REGhl=#R$E761.
 $DD55 LD A,$14      ; #REGa=#N$14.
 $DD57 SUB (HL)      ; #REGa-=*#REGhl.
 $DD58 LD C,B        ; #REGc=#REGb.
 $DD59 SLA C         ; {Shift #REGc left two positions (with carry).
 $DD5B SLA C         ; }
 $DD5D ADD A,C       ; #REGa+=#REGc.
 $DD5E LD C,A        ; #REGc=#REGa.
 $DD5F LD A,$05      ; #REGa=#N$05.
*$DD61 LD B,C        ; #REGb=#REGc.
 $DD62 SLA B         ; Shift #REGb left (with carry).
*$DD64 DJNZ $DD64    ; Decrease counter by one and loop back to #R$DD64 until
                     ; counter is zero.
 $DD66 XOR %00010000 ; Flip bits 4.
 $DD68 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $DD6A DEC C         ; Decrease #REGc by one.
 $DD6B JP NZ,$DD61   ; Jump to #R$DD61 if #REGc is not zero.
 $DD6E RET           ; Return.

; Game status buffer entry at DD6F
@label=Temp_X_Coordinate
g$DD6F DEFB $00
@label=Temp_Y_Coordinate
 $DD70 DEFB $00
@label=Temp_SourceAddress
 $DD71 DEFW $0000

; Print Helper Preview Image
;
; Used by the routine at #R$D1D0.
;
; .
;
; Takes the generated image at #R$A0E3, and creates a preview image from
; it.
; .
; #PUSHS #UDGTABLE(default,centre,centre,centre)
; #SIM(start=$D1F1,stop=$D1F7,sp=$FFFA)
; { #FOR$01,$03(n,=h Level #Nn, | ) }
; { #FOREACH($5B00,$6182,$6AFF)!!n!
;   #SIM(start=$D34E,stop=$D351,ix=n,sp=$FFFA)#SIM(start=$D22C,stop=$D232)#SCR$02{$160,$20,$A0,$A0}(helper-image-n)! | !!
; }
; { #FOR$04,$06(n,=h Level #Nn, | ) }
; { #FOREACH($730A,$783C,$7CFD)!!n!
;   #SIM(start=$D34E,stop=$D351,ix=n)#SIM(start=$D22C,stop=$D232)#SCR$02{$160,$20,$A0,$A0}(helper-image-n)! | !!
; }
; { #FOR$07,$09(n,=h Level #Nn, | ) }
; { #FOREACH($8106,$89D2,$9110)!!n!
;   #SIM(start=$D34E,stop=$D351,ix=n)#SIM(start=$D22C,stop=$D232)#SCR$02{$160,$20,$A0,$A0}(helper-image-n)! | !!
; }
; UDGTABLE#
; Marilyn Monroe has no preview image, but if she did, it would look like this:
; #UDGTABLE(default,centre) { =h Level #N$0A }
; { #SIM(start=$D34E,stop=$D351,ix=$9772)#SIM(start=$D22C,stop=$D232)#SCR$02{$160,$20,$A0,$A0}(helper-image-$9772) }
; UDGTABLE# #POPS
@label=Print_HelperPreviewImage
c$DD73 LD B,$04      ; Set the initial X co-ordinate in #REGb.
 $DD75 LD C,$16      ; Set the initial Y co-ordinate in #REGc.
*$DD77 PUSH BC       ; Stash the co-ordinates on the stack.
 $DD78 CALL $DCC2    ; Call #R$DCC2.
 $DD7B LD B,$08      ; Set a counter in #REGb for #N$08.
*$DD7D PUSH BC       ; Stash the counter on the stack.
 $DD7E LD B,$0A      ; Set a counter in #REGb for #N$0A.
 $DD80 PUSH HL       ; Stash the screen buffer address pointer on the stack.
*$DD81 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $DD83 INC HL        ; Increment the screen buffer address pointer by one.
 $DD84 DJNZ $DD81    ; Decrease the counter by one and loop back to #R$DD81
                     ; until the counter is zero.
 $DD86 POP HL        ; Restore the original screen buffer address from the
                     ; stack.
 $DD87 INC H         ; Move down one line.
 $DD88 POP BC        ; Restore the counter from the stack.
 $DD89 DJNZ $DD7D    ; Decrease the counter by one and loop back to #R$DD7D
                     ; until the counter is zero.
 $DD8B POP BC        ; Restore the original co-ordinates from the stack.
 $DD8C INC B         ; Increment #REGb by one.
 $DD8D LD A,$0C      ; {Jump to #R$DD77 if #REGb is not equal to #N$0C.
 $DD8F CP B          ;
 $DD90 JR NZ,$DD77   ; }
 $DD92 LD A,$B0      ; {Write #N$B0 to *#R$DD6F.
 $DD94 LD ($DD6F),A  ; }
 $DD97 LD A,$20      ; {Write #N$20 to *#R$DD70.
 $DD99 LD ($DD70),A  ; }
 $DD9C LD HL,$A0E3   ; {Write #R$A0E3 to *#R$DD71.
 $DD9F LD ($DD71),HL ; }
 $DDA2 LD B,$40      ; #REGb=#N$40.
*$DDA4 PUSH BC       ; Stash #REGbc on the stack.
 $DDA5 LD A,($DD6F)  ; {#REGh=*#R$DD6F.
 $DDA8 LD H,A        ; }
 $DDA9 LD A,($DD70)  ; {#REGl=*#R$DD70.
 $DDAC LD L,A        ; }
 $DDAD CALL $DE51    ; Call #R$DE51.
 $DDB0 PUSH DE       ; {Load the screen buffer address into #REGix (using the
 $DDB1 POP IX        ; stack).}
 $DDB3 LD B,$02      ; Set a counter in #REGb for #N$02.
*$DDB5 PUSH BC       ; {Stash the counter and the screen buffer address on the
 $DDB6 PUSH IX       ; stack.}
 $DDB8 LD HL,($DD71) ; #REGhl=*#R$DD71.
 $DDBB LD B,$0A      ; #REGb=#N$0A.
*$DDBD XOR A         ; #REGa=#N$00.
 $DDBE LD D,(HL)     ; #REGd=*#REGhl.
 $DDBF INC HL        ; Increment #REGhl by one.
 $DDC0 LD E,(HL)     ; #REGe=*#REGhl.
 $DDC1 INC HL        ; Increment #REGhl by one.
 $DDC2 CALL $DDE0    ; Call #R$DDE0.
 $DDC5 LD D,(IX+$00) ; #REGd=*#REGix+#N$00.
 $DDC8 OR D          ; Set the bits from #REGd.
 $DDC9 LD (IX+$00),A ; Write #REGa to *#REGix+#N$00.
 $DDCC INC IX        ; Increment #REGix by one.
 $DDCE DJNZ $DDBD    ; Decrease counter by one and loop back to #R$DDBD until
                     ; counter is zero.
 $DDD0 POP IX        ; Restore #REGix from the stack.
 $DDD2 LD ($DD71),HL ; Write #REGhl to *#R$DD71.
 $DDD5 POP BC        ; Restore #REGbc from the stack.
 $DDD6 DJNZ $DDB5    ; Decrease counter by one and loop back to #R$DDB5 until
                     ; counter is zero.
 $DDD8 LD HL,$DD70   ; #REGhl=#R$DD70.
 $DDDB INC (HL)      ; Increment *#REGhl by one.
 $DDDC POP BC        ; Restore #REGbc from the stack.
 $DDDD DJNZ $DDA4    ; Decrease counter by one and loop back to #R$DDA4 until
                     ; counter is zero.
 $DDDF RET           ; Return.
; Magic.
*$DDE0 RLC D         ; Rotate #REGd left (through the carry flag).
 $DDE2 JP NC,$DDE7   ; Jump to #R$DDE7 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DDE5 OR %10000000  ; Set bit 7.
*$DDE7 RLC D         ; Rotate #REGd left (through the carry flag).
 $DDE9 JP NC,$DDEE   ; Jump to #R$DDEE if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DDEC OR %10000000  ; Set bit 7.
*$DDEE RLC D         ; Rotate #REGd left (through the carry flag).
 $DDF0 JP NC,$DDF5   ; Jump to #R$DDF5 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DDF3 OR %01000000  ; Set bit 6.
*$DDF5 RLC D         ; Rotate #REGd left (through the carry flag).
 $DDF7 JP NC,$DDFC   ; Jump to #R$DDFC if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DDFA OR %01000000  ; Set bit 6.
*$DDFC RLC D         ; Rotate #REGd left (through the carry flag).
 $DDFE JP NC,$DE03   ; Jump to #R$DE03 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE01 OR %00100000  ; Set bit 5.
*$DE03 RLC D         ; Rotate #REGd left (through the carry flag).
 $DE05 JP NC,$DE0A   ; Jump to #R$DE0A if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE08 OR %00100000  ; Set bit 5.
*$DE0A RLC D         ; Rotate #REGd left (through the carry flag).
 $DE0C JP NC,$DE11   ; Jump to #R$DE11 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE0F OR %00010000  ; Set bit 4.
*$DE11 RLC D         ; Rotate #REGd left (through the carry flag).
 $DE13 JP NC,$DE18   ; Jump to #R$DE18 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE16 OR %00010000  ; Set bit 4.
*$DE18 RLC E         ; Rotate #REGe left (through the carry flag).
 $DE1A JP NC,$DE1F   ; Jump to #R$DE1F if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE1D OR %00001000  ; Set bit 3.
*$DE1F RLC E         ; Rotate #REGe left (through the carry flag).
 $DE21 JP NC,$DE26   ; Jump to #R$DE26 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE24 OR %00001000  ; Set bit 3.
*$DE26 RLC E         ; Rotate #REGe left (through the carry flag).
 $DE28 JP NC,$DE2D   ; Jump to #R$DE2D if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE2B OR %00000100  ; Set bit 2.
*$DE2D RLC E         ; Rotate #REGe left (through the carry flag).
 $DE2F JP NC,$DE34   ; Jump to #R$DE34 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE32 OR %00000100  ; Set bit 2.
*$DE34 RLC E         ; Rotate #REGe left (through the carry flag).
 $DE36 JP NC,$DE3B   ; Jump to #R$DE3B if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE39 OR %00000010  ; Set bit 1.
*$DE3B RLC E         ; Rotate #REGe left (through the carry flag).
 $DE3D JP NC,$DE42   ; Jump to #R$DE42 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE40 OR %00000010  ; Set bit 1.
*$DE42 RLC E         ; Rotate #REGe left (through the carry flag).
 $DE44 JP NC,$DE49   ; Jump to #R$DE49 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE47 OR %00000001  ; Set bit 0.
*$DE49 RLC E         ; Rotate #REGe left (through the carry flag).
 $DE4B JP NC,$DE50   ; Jump to #R$DE50 if the carry flag isn't set (if the leftmost bit
                     ; was 0).
 $DE4E OR %00000001  ; Set bit 0.
*$DE50 RET           ; Return.

; Calculate Screen Address
;
; Used by the routines at #R$DD73, #R$DE69 and #R$E1A1.
;
;   HL X/Y Co-ordinates
; O:DE Screen buffer address
@label=CalculateScreenAddress
c$DE51 LD A,L        ; Load the X co-ordinate into #REGa.
 $DE52 AND %11000000 ; Keep only bits 6-7.
 $DE54 RRA           ; Rotate the result right through the carry flag.
 $DE55 SCF           ; Set the carry flag.
 $DE56 RRA           ; Rotate right through the carry flag.
 $DE57 RRCA          ; Rotate right (no carry flag).
 $DE58 XOR L         ; Combine the bits with the original X co-ordinate.
 $DE59 AND %11111000 ; Keep only bits 3-7.
 $DE5B XOR L         ; Combine the bits with the original X co-ordinate again.
 $DE5C LD D,A        ; Store the result in #REGd (high byte of the screen
                     ; buffer address).
 $DE5D LD A,H        ; Load the Y co-ordinate into #REGa.
 $DE5E RLCA          ; {Multiply by #N$08.
 $DE5F RLCA          ;
 $DE60 RLCA          ; }
 $DE61 XOR L         ; Combine the bits with the original X co-ordinate.
 $DE62 AND %11000111 ; Keep only bits 0-2, 6-7.
 $DE64 XOR L         ; Combine the bits with the original X co-ordinate again.
 $DE65 RLCA          ; {Multiply by #N$04.
 $DE66 RLCA          ; }
 $DE67 LD E,A        ; Store result in #REGe (low byte of the screen buffer
                     ; address).
 $DE68 RET           ; Return.

; Draw Tile
;
; Used by the routine at #R$F801.
@label=Draw_Tile
c$DE69 LD IX,$DF58   ; Set #REGix to #R$DF58.
 $DE6D LD B,$00      ; Initialise #REGb to #N$00 for the sum below.
 $DE6F LD A,($E2C7)  ; Load *#R$E2C7 into #REGa.
; Find which spritesheet the image is located in. There are #N$14 sprites
; in each sheet, so test if the sprite ID is less than #N$15 to check if it's
; in the first one. Else, subtract #N$14 and check again.
 $DE72 LD C,$03      ; Set a counter in #REGc with #N$03 to track the three spritesheets
                     ; (two item sheets and one for the game tiles).
@label=FindSpritesheet_Loop
*$DE74 CP $15        ; {Jump to #R$DE80 if #REGa is lower than #N$15 (unsigned
 $DE76 JP M,$DE80    ; comparison).}
 $DE79 SUB $14       ; Subtract #N$14 from #REGa.
 $DE7B DEC C         ; Decrease #REGc by one.
 $DE7C JR NZ,$DE74   ; Jump back to #R$DE74 until #REGc is zero.
; Default the sprite ID to #N$01.
 $DE7E LD A,$01      ; #REGa=#N$01.
; Adjust the sprite ID for 0-based indexing.
@label=LocateSprite
*$DE80 DEC A         ; Decrease the sprite ID by one.
; There are #N$04 offset bytes, so multiply the sprite ID by #N$04 to
; find the relevant offsets in the table.
 $DE81 RLCA          ; {Multiply the sprite ID by #N$04 and store the result in
 $DE82 RLCA          ; #REGc.
 $DE83 LD C,A        ; }
; Fetch the offsets for the sprite being processed.
 $DE84 ADD IX,BC     ; Add the result to #REGix to locate the offsets for the
                     ; tile.
 $DE86 LD C,(IX+$00) ; {Fetch the graphic data offset and store it in #REGbc.
 $DE89 LD B,(IX+$01) ; }
 $DE8C LD E,(IX+$02) ; {Fetch the attribute data offset and store it in #REGde.
 $DE8F LD D,(IX+$03) ; }
; Calculate the graphic data address.
 $DE92 LD IX,($E2C8) ; {Add *#R$E2C8 and the offset in #REGbc to locate the start of the
 $DE96 ADD IX,BC     ; graphics data - store the result in #REGix.}
; Calculate the attribute address.
 $DE98 LD HL,($E2C8) ; {Add *#R$E2C8 and #N($0A00,$04,$04) to locate the start of the
 $DE9B LD BC,$0A00   ; attributes for the spritesheet. Then, add the offset held in #REGde to the
 $DE9E ADD HL,BC     ; total, this will locate the start of the attributes for the sprite currently
 $DE9F ADD HL,DE     ; being processed - store the result in #REGiy (using the stack).
 $DEA0 PUSH HL       ;
 $DEA1 POP IY        ; }
; Print the sprite to the screen.
 $DEA3 LD B,$04      ; #REGb=#N$04.
 $DEA5 LD H,$28      ; #REGh=#N$28.
*$DEA7 PUSH BC       ; Stash #REGbc on the stack.
 $DEA8 LD A,$08      ; #REGa=#N$08.
 $DEAA PUSH IX       ; Stash #REGix on the stack.
 $DEAC LD BC,$0014   ; #REGbc=#N($0014,$04,$04).
*$DEAF PUSH AF       ; Stash #REGaf on the stack.
 $DEB0 LD L,A        ; #REGl=#REGa.
 $DEB1 CALL $DE51    ; Call #R$DE51.
 $DEB4 LD A,(IX+$00) ; {Write *#REGix+#N$00 to *#REGde.
 $DEB7 LD (DE),A     ; }
 $DEB8 ADD IX,BC     ; #REGix+=#REGbc.
 $DEBA POP AF        ; Restore #REGaf from the stack.
 $DEBB INC A         ; Increment #REGa by one.
 $DEBC CP $28        ; {Jump to #R$DEAF if #REGa is not equal to #N$28.
 $DEBE JP NZ,$DEAF   ; }
; Switch #REGix to point to the attributes.
 $DEC1 PUSH IY       ; {#REGix=#REGiy (using the stack).
 $DEC3 POP IX        ; }
 $DEC5 LD DE,$5825   ; #REGde=#N$5825 (attribute buffer location).
 $DEC8 LD B,$04      ; #REGb=#N$04.
 $DECA PUSH HL       ; Stash #REGhl on the stack.
@label=Colour_Tile_Loop
*$DECB PUSH BC       ; Stash #REGbc on the stack.
 $DECC LD A,(IX+$00) ; {Write *#REGix+#N$00 to *#REGde.
 $DECF LD (DE),A     ; }
 $DED0 LD BC,$0014   ; {#REGix+=#N($0014,$04,$04).
 $DED3 ADD IX,BC     ; }
 $DED5 LD HL,$0020   ; {#REGde+=#N($0020,$04,$04).
 $DED8 ADD HL,DE     ;
 $DED9 EX DE,HL      ; }
 $DEDA POP BC        ; Restore #REGbc from the stack.
 $DEDB DJNZ $DECB    ; Decrease counter by one and loop back to #R$DECB until
                     ; counter is zero.
 $DEDD POP HL        ; {Restore #REGhl, #REGix and #REGbc from the stack.
 $DEDE POP IX        ;
 $DEE0 POP BC        ; }
 $DEE1 LD A,B        ; #REGa=#REGb.
 $DEE2 PUSH BC       ; {Stash #REGbc, #REGix and #REGhl on the stack.
 $DEE3 PUSH IX       ;
 $DEE5 PUSH HL       ; }
 $DEE6 CP $01        ; {Jump to #R$DF4B if #REGa is equal to #N$01.
 $DEE8 JP Z,$DF4B    ; }
 $DEEB LD A,$05      ; #REGa=#N$05.
 $DEED LD C,$23      ; #REGc=#N$23.
*$DEEF LD B,C        ; #REGb=#REGc.
 $DEF0 SLA B         ; Shift #REGb left (with carry).
*$DEF2 DJNZ $DEF2    ; Decrease counter by one and loop back to #R$DEF2 until
                     ; counter is zero.
 $DEF4 XOR %00010000 ; Flip bit 4.
 $DEF6 OUT ($FE),A   ; Send to the speaker.
 $DEF8 DEC C         ; Decrease #REGc by one.
 $DEF9 JP NZ,$DEEF   ; Jump to #R$DEEF until #REGc is zero.
 $DEFC LD HL,$1388   ; #REGhl=#N$1388.
 $DEFF LD DE,$04E2   ; #REGde=#N$04E2.
*$DF02 LD A,(HL)     ; #REGa=*#REGhl.
 $DF03 AND %11110000 ; Keep only bits 4-7.
 $DF05 OR %00000101  ; Set bits 0, 2.
 $DF07 OUT ($FE),A   ; Send to the speaker.
 $DF09 INC HL        ; Increment #REGhl by one.
 $DF0A DEC DE        ; Decrease #REGde by one.
 $DF0B LD A,D        ; {Jump to #R$DF02 if #REGde is not zero.
 $DF0C OR E          ;
 $DF0D JP NZ,$DF02   ; }
 $DF10 LD A,$01      ; {Write #N$01 to *#R$E75F.
 $DF12 LD ($E75F),A  ; }
 $DF15 LD B,$04      ; #REGb=#N$04.
*$DF17 PUSH BC       ; Stash #REGbc on the stack.
 $DF18 LD A,($E75F)  ; {#REGb=*#R$E75F.
 $DF1B LD B,A        ; }
 $DF1C LD C,$07      ; #REGc=#N$07.
 $DF1E CALL $DCC2    ; Call #R$DCC2.
 $DF21 LD A,$08      ; #REGa=#N$08.
 $DF23 PUSH HL       ; Stash #REGhl on the stack.
*$DF24 LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $DF27 PUSH HL       ; {#REGde=#REGhl (using the stack).
 $DF28 POP DE        ; }
 $DF29 INC DE        ; Increment #REGde by one.
 $DF2A PUSH HL       ; Stash #REGhl on the stack.
 $DF2B LDDR          ; LDDR.
 $DF2D INC HL        ; Increment #REGhl by one.
 $DF2E LD (HL),C     ; Write #REGc to *#REGhl.
 $DF2F POP HL        ; Restore #REGhl from the stack.
 $DF30 INC H         ; Increment #REGh by one.
 $DF31 DEC A         ; Decrease #REGa by one.
 $DF32 JP NZ,$DF24   ; Jump to #R$DF24 until #REGa is zero.
 $DF35 POP HL        ; Restore #REGhl from the stack.
 $DF36 CALL $DCD1    ; Call #R$DCD1.
 $DF39 PUSH DE       ; {#REGhl=#REGde (using the stack).
 $DF3A POP HL        ; }
 $DF3B INC DE        ; Increment #REGde by one.
 $DF3C LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $DF3F LDDR          ; LDDR.
 $DF41 LD A,$00      ; {Write #N$00 to *#REGde.
 $DF43 LD (DE),A     ; }
 $DF44 LD HL,$E75F   ; #REGhl=#R$E75F.
 $DF47 INC (HL)      ; Increment *#REGhl by one.
 $DF48 POP BC        ; Restore #REGbc from the stack.
 $DF49 DJNZ $DF17    ; Decrease counter by one and loop back to #R$DF17 until
                     ; counter is zero.
*$DF4B POP HL        ; {Restore #REGhl and #REGix from the stack.
 $DF4C POP IX        ; }
 $DF4E DEC IX        ; Decrease #REGix by one.
 $DF50 DEC IY        ; Decrease #REGiy by one.
 $DF52 POP BC        ; Restore #REGbc from the stack.
 $DF53 DEC B         ; Decrease #REGb by one.
 $DF54 JP NZ,$DEA7   ; Jump to #R$DEA7 until #REGb is zero.
 $DF57 RET           ; Return.

; Table: Tile Data Offsets
;
; Used by the routine at #R$DE69.
;
; .
;
; Tile: #N($01+((#PC-$DF58)/$04)).
@label=Table_TileDataOffsets
g$DF58 DEFW $0003    ; Graphics data offset.
 $DF5A DEFW $0003    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF5C DEFW $0007    ; Graphics data offset.
 $DF5E DEFW $0007    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF60 DEFW $000B    ; Graphics data offset.
 $DF62 DEFW $000B    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF64 DEFW $000F    ; Graphics data offset.
 $DF66 DEFW $000F    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF68 DEFW $0013    ; Graphics data offset.
 $DF6A DEFW $0013    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF6C DEFW $0283    ; Graphics data offset.
 $DF6E DEFW $0053    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF70 DEFW $0287    ; Graphics data offset.
 $DF72 DEFW $0057    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF74 DEFW $028B    ; Graphics data offset.
 $DF76 DEFW $005B    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF78 DEFW $028F    ; Graphics data offset.
 $DF7A DEFW $005F    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF7C DEFW $0293    ; Graphics data offset.
 $DF7E DEFW $0063    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF80 DEFW $0503    ; Graphics data offset.
 $DF82 DEFW $00A3    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF84 DEFW $0507    ; Graphics data offset.
 $DF86 DEFW $00A7    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF88 DEFW $050B    ; Graphics data offset.
 $DF8A DEFW $00AB    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF8C DEFW $050F    ; Graphics data offset.
 $DF8E DEFW $00AF    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF90 DEFW $0513    ; Graphics data offset.
 $DF92 DEFW $00B3    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF94 DEFW $0783    ; Graphics data offset.
 $DF96 DEFW $00F3    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF98 DEFW $0787    ; Graphics data offset.
 $DF9A DEFW $00F7    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DF9C DEFW $078B    ; Graphics data offset.
 $DF9E DEFW $00FB    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DFA0 DEFW $078F    ; Graphics data offset.
 $DFA2 DEFW $00FF    ; Attribute data offset.
; Tile: #N($01+((#PC-$DF58)/$04)).
 $DFA4 DEFW $0793    ; Graphics data offset.
 $DFA6 DEFW $0103    ; Attribute data offset.

; Routine at DFA8
;
; Used by the routine at #R$DFB2.
c$DFA8 LD (HL),A     ; Write #REGa to *#REGhl.
 $DFA9 INC HL        ; Increment #REGhl by one.
 $DFAA LD (HL),A     ; Write #REGa to *#REGhl.
 $DFAB LD C,$20      ; #REGc=#N$20.
 $DFAD ADD HL,BC     ; #REGhl+=#REGbc.
 $DFAE LD (HL),A     ; Write #REGa to *#REGhl.
 $DFAF DEC HL        ; Decrease #REGhl by one.
 $DFB0 LD (HL),A     ; Write #REGa to *#REGhl.
 $DFB1 RET           ; Return.

; Routine at DFB2
;
; Used by the routines at #R$E2CA and #R$F801.
c$DFB2 LD ($E2C7),A             ; Write #REGa to *#R$E2C7.
 $DFB5 CP $01                   ; {Return if #REGa is lower than #N$01
 $DFB7 RET M                    ; (unsigned comparison).}
 $DFB8 CP $15                   ; Compare #REGa with #N$15.
 $DFBA RET P                    ; Return P.
 $DFBB LD A,($D837)             ; #REGa=*#R$D837.
 $DFBE CP $00                   ; {Jump to #R$DFD4 if #REGa is equal to #N$00.
 $DFC0 JR Z,$DFD4               ; }
 $DFC2 LD HL,$DFEE              ; #REGhl=#R$DFEF(#N$DFEE).
 $DFC5 LD B,$00                 ; #REGb=#N$00.
 $DFC7 LD C,A                   ; #REGc=#REGa.
 $DFC8 ADD HL,BC                ; #REGhl+=#REGbc.
 $DFC9 LD C,(HL)                ; #REGc=*#REGhl.
 $DFCA LD HL,$5896              ; #REGhl=#N$5896 (attribute buffer location).
 $DFCD ADD HL,BC                ; #REGhl+=#REGbc.
 $DFCE LD A,($E003)             ; #REGa=*#R$E003.
 $DFD1 CALL $DFA8               ; Call #R$DFA8.
*$DFD4 LD A,($E2C7)             ; #REGa=*#R$E2C7.
 $DFD7 LD ($D837),A             ; Write #REGa to *#R$D837.
 $DFDA LD HL,$DFEE              ; #REGhl=#R$DFEF(#N$DFEE).
 $DFDD LD B,$00                 ; #REGb=#N$00.
 $DFDF LD C,A                   ; #REGc=#REGa.
 $DFE0 ADD HL,BC                ; #REGhl+=#REGbc.
 $DFE1 LD C,(HL)                ; #REGc=*#REGhl.
 $DFE2 LD HL,$5896              ; #REGhl=#N$5896 (attribute buffer location).
 $DFE5 ADD HL,BC                ; #REGhl+=#REGbc.
 $DFE6 LD A,(HL)                ; {Write *#REGhl to *#R$E003.
 $DFE7 LD ($E003),A             ; }
 $DFEA LD A,$78                 ; #REGa=#COLOUR$78.
 $DFEC JP $DFA8                 ; Jump to #R$DFA8.
 $DFEF DEFB $00,$02,$04,$06,$08 ;
 $DFF4 DEFB $40,$42,$44,$46,$48 ;
 $DFF9 DEFB $80,$82,$84,$86,$88 ;
 $DFFE DEFB $C0,$C2,$C4,$C6,$C8 ;
 $E003 DEFB $00                 ;

; Generate Picture
;
; Used by the routine at #R$D2A1.
;
; IX Pointer to level graphics data
;
; #REGix will point to one of:
; #TABLE(default,centre,centre)
; { =h Address | =h Level }
; { #R$5B00 | Level 01 }
; { #R$6182 | Level 02 }
; { #R$6AFF | Level 03 }
; { #R$730A | Level 04 }
; { #R$783C | Level 05 }
; { #R$7CFD | Level 06 }
; { #R$8106 | Level 07 }
; { #R$89D2 | Level 08 }
; { #R$9110 | Level 09 }
; { #R$9772 | Level 10 }
; TABLE#
@label=GeneratePicture
c$E004 LD HL,$A0E3   ; #REGhl=#R$A0E3.
; Clear down the buffer ready for the new image to be generated.
 $E007 LD BC,$0B40   ; #REGbc=#N($0B40,$04,$04).
 $E00A LD (HL),$00   ; Write #N$00 to *#REGhl.
 $E00C PUSH HL       ; {#REGde=#R$A0E3+#N$01 (using the stack).
 $E00D POP DE        ;
 $E00E INC DE        ; }
 $E00F LDIR          ; Clear #N($0B40,$04,$04) bytes of data in #R$A0E3.
 $E011 LD A,$80      ; {Write #N$80 to *#R$E0DE.
 $E013 LD ($E0DE),A  ; }
@label=GeneratePicture_Loop
*$E016 LD A,$80      ; {#REGa=#N$80-*#R$E0DE.
 $E018 LD HL,$E0DE   ;
 $E01B SUB (HL)      ; }
 $E01C LD B,$14      ; #REGb=#N$14.
 $E01E LD D,$00      ; {Load #REGa into #REGde.
 $E020 LD E,A        ; }
 $E021 LD HL,$A0E3   ; Starting from the first address at #R$A0E3, stored in
                     ; #REGhl...
@label=GeneratePicture_CurrentLine_Loop
*$E024 ADD HL,DE     ; Keep adding #REGde to #REGhl.
 $E025 DJNZ $E024    ; Decrease counter by one and loop back to #R$E024 until
                     ; counter is zero.
 $E027 LD ($E0E0),HL ; Write #REGhl to *#R$E0E0.
 $E02A LD A,(IX+$00) ; Fetch a byte from the level graphics data pointer.
 $E02D INC IX        ; Increment the level graphics data pointer by one.
 $E02F CP $C9        ; {Jump to #R$E067 if #REGa is equal to #N$C9.
 $E031 JR Z,$E067    ; }
 $E033 CP $CA        ; {Jump to #R$E045 if #REGa is equal to #N$CA.
 $E035 JR Z,$E045    ; }
 $E037 PUSH IX       ; {Copy the level graphics data pointer into #REGde (using
 $E039 POP DE        ; the stack).}
 $E03A EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $E03B LD BC,$0014   ; {Copy #N($0014,$04,$04) bytes of data from #REGhl to
 $E03E LDIR          ; #REGde.}
 $E040 PUSH HL       ; {Update the level graphics data pointer in #REGix with the progress
 $E041 POP IX        ; made from #REGhl (using the stack).}
 $E043 JR $E0B0      ; Jump to #R$E0B0.
; Run-length decoding.
@label=GeneratePicture_RLE_Decoding
*$E045 PUSH IX       ; {Copy the level graphics data pointer into #REGde (using
 $E047 POP DE        ; the stack).}
@label=GeneratePicture_RLE_NormalData
*$E048 LD A,(DE)     ; Fetch a byte from the level graphics data pointer in
                     ; #REGde.
 $E049 CP $00        ; {Jump to #R$E052 if the byte is #N$00.
 $E04B JR Z,$E052    ; }
 $E04D LD (HL),A     ; Else, write the byte to the image buffer.
 $E04E INC HL        ; Increment the image buffer pointer by one.
 $E04F INC DE        ; Increment the level graphics data pointer (in #REGde) by
                     ; one.
 $E050 JR $E048      ; Jump to #R$E048.
@label=GeneratePicture_RLE_RepeatZero
*$E052 INC DE        ; Increment the level graphics data pointer (in #REGde) by
                     ; one.
 $E053 LD A,(DE)     ; Fetch a byte from the level graphics data pointer in
                     ; #REGde.
 $E054 CP $00        ; {Jump to #R$E061 if the byte is #N$00.
 $E056 JR Z,$E061    ; }
 $E058 LD B,A        ; Copy the fetched byte into #REGb as a repeat counter
 $E059 XOR A         ; {Write #N$00 to the image buffer.
@label=GeneratePicture_RLE_RepeatZero_Loop
*$E05A LD (HL),A     ; }
 $E05B INC HL        ; Increment the image buffer pointer by one.
 $E05C DJNZ $E05A    ; Decrease the byte repeat counter by one and loop back to #R$E05A
                     ; until the counter is zero.
 $E05E INC DE        ; Increment the level graphics data pointer (in #REGde) by
                     ; one.
 $E05F JR $E048      ; Jump to #R$E048.
@label=GeneratePicture_RLE_Next
*$E061 INC DE        ; Increment the level graphics data pointer (in #REGde) by
                     ; one.
 $E062 PUSH DE       ; {Update the level graphics data pointer in #REGix with the progress
 $E063 POP IX        ; made from #REGde (using the stack).}
 $E065 JR $E0B0      ; Jump to #R$E0B0.
; Second
@label=ProcessCompressedImageData
*$E067 LD B,(IX+$01) ; Load the repeat count into #REGb.
 $E06A LD A,(IX+$00) ; {Write the operation code to *#R$E0DF.
 $E06D LD ($E0DF),A  ; }
@label=ProcessOperationBlock_Loop
*$E070 PUSH BC       ; Stash the repeat count on the stack.
 $E071 LD A,($E0DF)  ; Load the operation code into #REGa.
 $E074 CP $C9        ; {Jump to #R$E080 if the operation code is #N$C9.
 $E076 JR Z,$E080    ; }
 $E078 CP $CA        ; {Jump to #R$E080 if the operation code is #N$CA.
 $E07A JR Z,$E080    ; }
 $E07C CP $CB        ; {Jump to #R$E083 if the operation code is not #N$CB.
 $E07E JR NZ,$E083   ; }
@label=ProcessCompressedImageData_Next
*$E080 POP BC        ; Restore the repeat count from the stack.
 $E081 JR $E0B0      ; Jump to #R$E0B0.
@label=ProcessBitOperation
*$E083 AND %11111000 ; {Mask to get the byte offset within the current line,
 $E085 LD D,A        ; store this in #REGd.}
 $E086 RRCA          ; {Divide the byte offset by #N$08 to get the pixel
 $E087 RRCA          ; offset, store this in #REGe.
 $E088 RRCA          ;
 $E089 LD E,A        ; }
 $E08A LD A,($E0DF)  ; Reload the operation code into #REGa.
 $E08D SUB D         ; Subtract to calculate the number of bits to modify.
 $E08E LD D,$00      ; #REGd=#N$00.
 $E090 ADD HL,DE     ; #REGhl+=#REGde.
 $E091 LD B,A        ; Set the bit count in #REGb.
 $E092 INC B         ; Adjust #REGb for the loop.
 $E093 LD A,(HL)     ; #REGa=*#REGhl.
 $E094 AND A         ; Clear the carry flag.
 $E095 PUSH BC       ; Stash the bit count on the stack.
@label=RotateBitsLeft_Loop
*$E096 RLA           ; Rotate left, moving bits one position to the left.
 $E097 DJNZ $E096    ; Decrease counter by one and loop back to #R$E096 until
                     ; counter is zero.
 $E099 SCF           ; Set the carry flag.
 $E09A POP BC        ; Restore the bit count from the stack.
@label=RotateBitsRight_Loop
*$E09B RRA           ; Rotate right, moving bits back and inserting #N$01.
 $E09C DJNZ $E09B    ; Decrease the bit count by one and loop back to #R$E09B until all
                     ; bits have been processed.
 $E09E LD (HL),A     ; Write #REGa to *#REGhl.
 $E09F LD HL,$E0DF   ; {Increment *#R$E0DF by one.
 $E0A2 INC (HL)      ; }
 $E0A3 LD HL,($E0E0) ; #REGhl=*#R$E0E0.
 $E0A6 POP BC        ; Restore the repeat count from the stack.
 $E0A7 DJNZ $E070    ; Decrease the repeat count by one and loop back to
                     ; #R$E070 until all operations are done.
 $E0A9 INC IX        ; {Increment #REGix by two.
 $E0AB INC IX        ; }
 $E0AD JP $E067      ; Jump to #R$E067.
; Has all the image been decompressed now? If not, loop back again.
@label=GeneratePicture_Next
*$E0B0 LD HL,$E0DE   ; #REGhl=#R$E0DE.
 $E0B3 DEC (HL)      ; Decrease *#REGhl by one.
 $E0B4 JP NZ,$E016   ; Jump to #R$E016 until *#REGhl is zero.
 $E0B7 INC IX        ; Move #REGix to the start of the attribute data.
 $E0B9 LD B,$10      ; Set a counter in #REGb to process #N$10 rows of
                     ; attribute data.
 $E0BB LD HL,$AAE3   ; Store the start of #R$AAE3 in #REGhl.
@label=GeneratePicture_Attributes_Loop
*$E0BE PUSH BC       ; {Stash the attribute row counter and the image attributes buffer
 $E0BF PUSH HL       ; pointer on the stack.}
 $E0C0 LD A,$00      ; Initialise the column counter in #REGa.
@label=GeneratePicture_Attribute_Row
*$E0C2 LD C,(IX+$00) ; Load the attribute value into #REGc.
 $E0C5 INC IX        ; {Load the repeat length into #REGb.
 $E0C7 LD B,(IX+$00) ; }
 $E0CA INC IX        ; Move #REGix to the next attribute/ repeat length pair.
 $E0CC ADD A,B       ; Add the repeat length to the column counter.
@label=GeneratePicture_Attribute_Run
*$E0CD LD (HL),C     ; Write the attribute to the image attributes buffer.
 $E0CE INC HL        ; Increment the image attributes buffer pointer by one.
 $E0CF DJNZ $E0CD    ; Decrease the repeat counter by one and loop back to
                     ; #R$E0CD until counter is zero.
 $E0D1 CP $14        ; {Jump to #R$E0C2 if #N$14 columns have been processed.
 $E0D3 JR NZ,$E0C2   ; }
 $E0D5 POP HL        ; Restore the start of the current attribute row from the
                     ; stack.
 $E0D6 LD BC,$0014   ; {Move #REGhl to the next row in the attribute buffer.
 $E0D9 ADD HL,BC     ; }
 $E0DA POP BC        ; Restore the attribute row counter from the stack.
 $E0DB DJNZ $E0BE    ; Decrease the attribute row counter by one and loop back to #R$E0BE
                     ; until counter is zero.
 $E0DD RET           ; Return.
; Variables specifically for this routine.
@label=Line_Counter
 $E0DE DEFB $00      ;
@label=Operation_Code
 $E0DF DEFB $00      ;
@label=Buffer_Position
 $E0E0 DEFW $0000    ;

; Routine at E0E2
;
; Used by the routine at #R$F43E.
c$E0E2 LD L,A        ; #REGl=#REGa.
 $E0E3 LD ($E16B),HL ; Write #REGhl to *#R$E16B.
 $E0E6 LD A,($E761)  ; #REGa=*#R$E761.
 $E0E9 RRCA          ; {RRCA.
 $E0EA RRCA          ; }
 $E0EB LD ($E16D),A  ; Write #REGa to *#R$E16D.
 $E0EE CALL $E0F2    ; Call #R$E0F2.
 $E0F1 RET           ; Return.
*$E0F2 LD HL,($E16B) ; #REGhl=*#R$E16B.
 $E0F5 LD A,$47      ; {Write #N$47 to *#R$E19E.
 $E0F7 LD ($E19E),A  ; }
 $E0FA LD A,$00      ; {Write #N$00 to *#R$E1A0.
 $E0FC LD ($E1A0),A  ; }
 $E0FF LD B,$02      ; #REGb=#N$02.
*$E101 PUSH BC       ; Stash #REGbc on the stack.
 $E102 LD B,$02      ; #REGb=#N$02.
 $E104 HALT          ; Halt operation (suspend CPU until the next interrupt).
*$E105 PUSH BC       ; Stash #REGbc on the stack.
 $E106 LD A,($E16D)  ; {#REGb=*#R$E16D.
 $E109 LD B,A        ; }
 $E10A LD A,$05      ; {#REGa=#N$05-#REGb.
 $E10C SUB B         ; }
 $E10D CP $04        ; {Jump to #R$E115 if #REGa is not equal to #N$04.
 $E10F JR NZ,$E115   ; }
 $E111 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $E112 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $E113 RLCA          ; {RLCA.
 $E114 RLCA          ;
*$E115 RLCA          ;
 $E116 RLCA          ;
 $E117 RLCA          ; }
 $E118 INC A         ; Increment #REGa by one.
 $E119 LD ($E16A),A  ; Write #REGa to *#R$E16A.
*$E11C PUSH BC       ; Stash #REGbc on the stack.
 $E11D LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $E120 ADD A,H       ; #REGa+=#REGh.
 $E121 LD B,A        ; #REGb=#REGa.
 $E122 LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $E125 ADD A,L       ; #REGa+=#REGl.
 $E126 LD C,A        ; #REGc=#REGa.
 $E127 CALL $E1D9    ; Call #R$E1D9.
 $E12A LD A,(IX+$02) ; #REGa=*#REGix+#N$02.
 $E12D ADD A,H       ; #REGa+=#REGh.
 $E12E LD B,A        ; #REGb=#REGa.
 $E12F LD A,(IX+$03) ; #REGa=*#REGix+#N$03.
 $E132 ADD A,L       ; #REGa+=#REGl.
 $E133 LD C,A        ; #REGc=#REGa.
 $E134 CALL $E1D9    ; Call #R$E1D9.
 $E137 LD A,(IX+$04) ; #REGa=*#REGix+#N$04.
 $E13A ADD A,H       ; #REGa+=#REGh.
 $E13B LD B,A        ; #REGb=#REGa.
 $E13C LD A,(IX+$05) ; #REGa=*#REGix+#N$05.
 $E13F ADD A,L       ; #REGa+=#REGl.
 $E140 LD C,A        ; #REGc=#REGa.
 $E141 CALL $E1D9    ; Call #R$E1D9.
 $E144 POP BC        ; Restore #REGbc from the stack.
 $E145 DJNZ $E11C    ; Decrease counter by one and loop back to #R$E11C until
                     ; counter is zero.
 $E147 LD A,$47      ; {Write #N$47 to *#R$E19E.
 $E149 LD ($E19E),A  ; }
 $E14C LD A,$08      ; {Write #N$08 to *#R$E1A0.
 $E14E LD ($E1A0),A  ; }
 $E151 LD HL,($E16B) ; #REGhl=*#R$E16B.
 $E154 POP BC        ; Restore #REGbc from the stack.
 $E155 DJNZ $E105    ; Decrease counter by one and loop back to #R$E105 until
                     ; counter is zero.
 $E157 LD A,$00      ; {Write #N$00 to *#R$E1A0.
 $E159 LD ($E1A0),A  ; }
 $E15C LD BC,$0006   ; {#REGix+=#N($0006,$04,$04).
 $E15F ADD IX,BC     ; }
 $E161 LD A,$45      ; {Write #N$45 to *#R$E19E.
 $E163 LD ($E19E),A  ; }
 $E166 POP BC        ; Restore #REGbc from the stack.
 $E167 DJNZ $E101    ; Decrease counter by one and loop back to #R$E101 until
                     ; counter is zero.
 $E169 RET           ; Return.

; Data block at E16A
b$E16A DEFB $00
 $E16B DEFB $00,$00
 $E16D DEFB $00
 $E16E DEFB $16,$F9,$F2,$0D,$16,$F9,$16,$07
 $E176 DEFB $F3,$F4,$16,$06
 $E17A DEFB $EA,$07,$0E,$F3,$EA,$07,$EA,$F9
 $E182 DEFB $0D,$0C,$EA,$FA
 $E186 DEFB $07,$16,$F3,$F2,$07,$17,$F9,$16
 $E18E DEFB $0D,$F2,$F9,$17
 $E192 DEFB $F9,$EA,$0D,$0E,$F9,$E9,$07,$EA
 $E19A DEFB $F3,$0E,$07,$E9
 $E19E DEFB $47,$00
 $E1A0 DEFB $02

; Routine at E1A1
;
; Used by the routine at #R$E1D9.
c$E1A1 CALL $DE51    ; Call #R$DE51.
 $E1A4 PUSH DE       ; Stash #REGde on the stack.
 $E1A5 LD A,D        ; #REGa=#REGd.
 $E1A6 RRCA          ; {RRCA.
 $E1A7 RRCA          ;
 $E1A8 RRCA          ; }
 $E1A9 AND %00000011 ; Keep only bits 0-1.
 $E1AB OR %01011000  ; Set bits 3-4, 6.
 $E1AD LD D,A        ; #REGd=#REGa.
 $E1AE LD BC,($E19E) ; #REGbc=*#R$E19E.
 $E1B2 LD A,(DE)     ; #REGa=*#REGde.
 $E1B3 XOR C         ; Flip the bits according to #REGc.
 $E1B4 AND B         ; Merge the bits from #REGb.
 $E1B5 XOR C         ; Flip the bits according to #REGc.
 $E1B6 LD (DE),A     ; Write #REGa to *#REGde.
 $E1B7 POP DE        ; Restore #REGde from the stack.
 $E1B8 LD A,H        ; #REGa=#REGh.
 $E1B9 AND %00000111 ; Keep only bits 0-2.
 $E1BB LD B,A        ; #REGb=#REGa.
 $E1BC INC B         ; Increment #REGb by one.
 $E1BD LD A,$FE      ; #REGa=#N$FE.
*$E1BF RRCA          ; RRCA.
 $E1C0 DJNZ $E1BF    ; Decrease counter by one and loop back to #R$E1BF until
                     ; counter is zero.
 $E1C2 LD B,A        ; #REGb=#REGa.
 $E1C3 LD A,($E1A0)  ; {#REGc=*#R$E1A0.
 $E1C6 LD C,A        ; }
 $E1C7 LD A,(DE)     ; #REGa=*#REGde.
 $E1C8 BIT 1,C       ; {Jump to #R$E1CD if bit 1 of #REGc is set.
 $E1CA JR NZ,$E1CD   ; }
 $E1CC AND B         ; Merge the bits from #REGb.
*$E1CD BIT 3,C       ; {Jump to #R$E1D3 if bit 3 of #REGc is set.
 $E1CF JR NZ,$E1D3   ; }
 $E1D1 XOR B         ; Flip the bits according to #REGb.
 $E1D2 CPL           ; Invert the bits in #REGa.
*$E1D3 LD (DE),A     ; Write #REGa to *#REGde.
 $E1D4 RET           ; Return.
 $E1D5 DEFW $0001    ;
 $E1D7 DEFW $0001    ;

; Routine at E1D9
;
; Used by the routine at #R$E0E2.
c$E1D9 PUSH BC       ; Stash #REGbc on the stack.
 $E1DA CALL $E1A1    ; Call #R$E1A1.
 $E1DD POP BC        ; Restore #REGbc from the stack.
 $E1DE LD DE,$0101   ; #REGde=#N($0101,$04,$04).
 $E1E1 LD A,B        ; #REGa=#REGb.
 $E1E2 SUB H         ; #REGa-=#REGh.
 $E1E3 JR NC,$E1E9   ; Jump to #R$E1E9 if  is higher.
 $E1E5 DEC D         ; {Decrease #REGd by two.
 $E1E6 DEC D         ; }
 $E1E7 NEG           ; NEG.
*$E1E9 LD B,A        ; #REGb=#REGa.
 $E1EA LD A,C        ; #REGa=#REGc.
 $E1EB SUB L         ; #REGa-=#REGl.
 $E1EC JR NC,$E1F2   ; Jump to #R$E1F2 if #REGd is higher.
 $E1EE DEC E         ; {Decrease #REGe by two.
 $E1EF DEC E         ; }
 $E1F0 NEG           ; NEG.
*$E1F2 LD C,A        ; #REGc=#REGa.
 $E1F3 OR B          ; Set the bits from #REGb.
 $E1F4 RET Z         ; Return if #REGe is zero.
 $E1F5 LD A,C        ; #REGa=#REGc.
 $E1F6 CP B          ; Compare #REGa with #REGb.
 $E1F7 PUSH HL       ; Stash #REGhl on the stack.
 $E1F8 LD H,D        ; #REGh=#REGd.
 $E1F9 LD L,E        ; #REGl=#REGe.
 $E1FA LD ($E1D5),HL ; Write #REGhl to *#R$E1D5.
 $E1FD LD L,$00      ; #REGl=#N$00.
 $E1FF JR C,$E205    ; Jump to #R$E205 if #REGa is lower.
 $E201 LD H,L        ; #REGh=#REGl.
 $E202 LD L,E        ; #REGl=#REGe.
 $E203 LD C,B        ; #REGc=#REGb.
 $E204 LD B,A        ; #REGb=#REGa.
*$E205 LD ($E1D7),HL ; Write #REGhl to *#R$E1D7.
 $E208 LD H,B        ; #REGh=#REGb.
 $E209 LD A,B        ; #REGa=#REGb.
 $E20A SRL A         ; Shift #REGa right.
 $E20C LD L,A        ; #REGl=#REGa.
*$E20D LD A,L        ; #REGa=#REGl.
 $E20E ADD A,C       ; #REGa+=#REGc.
 $E20F JR C,$E214    ; Jump to #R$E214 if #REGa is lower.
 $E211 CP B          ; Compare #REGa with #REGb.
 $E212 JR C,$E21C    ; Jump to #R$E21C if #REGa is lower.
*$E214 SUB B         ; #REGa-=#REGb.
 $E215 LD L,A        ; #REGl=#REGa.
 $E216 LD DE,($E1D5) ; #REGde=*#R$E1D5.
 $E21A JR $E221      ; Jump to #R$E221.
*$E21C LD L,A        ; #REGl=#REGa.
 $E21D LD DE,($E1D7) ; #REGde=*#R$E1D7.
*$E221 EX (SP),HL    ; Exchange the *#REGsp with the #REGhl register.
 $E222 LD A,H        ; #REGa=#REGh.
 $E223 ADD A,D       ; #REGa+=#REGd.
 $E224 LD H,A        ; #REGh=#REGa.
 $E225 LD A,L        ; #REGa=#REGl.
 $E226 ADD A,E       ; #REGa+=#REGe.
 $E227 LD L,A        ; #REGl=#REGa.
 $E228 PUSH BC       ; Stash #REGbc on the stack.
 $E229 CALL $E1A1    ; Call #R$E1A1.
 $E22C CALL $E236    ; Call #R$E236.
 $E22F POP BC        ; Restore #REGbc from the stack.
 $E230 EX (SP),HL    ; Exchange the *#REGsp with the #REGhl register.
 $E231 DEC H         ; Decrease #REGh by one.
 $E232 JR NZ,$E20D   ; Jump to #R$E20D if #REGh is not zero.
 $E234 POP HL        ; Restore #REGhl from the stack.
 $E235 RET           ; Return.

; Routine at E236
;
; Used by the routine at #R$E1D9.
c$E236 PUSH AF       ; {Stash #REGaf and #REGhl on the stack.
 $E237 PUSH HL       ; }
 $E238 LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $E23A RLCA          ; RLCA.
 $E23B LD L,A        ; #REGl=#REGa.
 $E23C LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $E23E RRCA          ; RRCA.
 $E23F RRCA          ; RRCA.
 $E240 RRCA          ; RRCA.
 $E241 LD H,A        ; #REGh=#REGa.
 $E242 LD A,(HL)     ; #REGa=*#REGhl.
 $E243 AND %00011000 ; Keep only bits 3-4.
 $E245 OR %00000101  ; Set bits 0, 2.
 $E247 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $E249 XOR %00010000 ; Flip bits 4.
 $E24B OUT ($FE),A   ; Set border to the colour held by #REGa.
 $E24D POP HL        ; {Restore #REGhl and #REGaf from the stack.
 $E24E POP AF        ; }
 $E24F RET           ; Return.

; Sound: Tile Moving
;
; Used by the routine at #R$F43E.
@label=Sound_TileMoving
c$E250 LD A,$05      ; #REGa=#N$05.
 $E252 LD C,$AF      ; Set the frequency control (#REGc) to #N$AF.
@label=Sound_TileMoving_Loop
*$E254 LD B,C        ; Set duration for this cycle to current frequency value.
 $E255 SLA B         ; Double the duration.
@label=Sound_TileMoving_PulseLoop
*$E257 DJNZ $E257    ; Generate a single tone pulse.
 $E259 XOR %00010000 ; Flip bit 4.
 $E25B OUT ($FE),A   ; Send to the speaker.
 $E25D DEC C         ; Decrease frequency (raises pitch, shortens next cycle).
 $E25E JR NZ,$E254   ; Jump to #R$E254 until the frequency is zero.
 $E260 RET           ; Return.

; Data block at E261
b$E261 DEFB $00,$00,$00

; Data block at E264
b$E264 DEFB $00,$00,$00,$00,$00,$00

; Data block at E26A
b$E26A DEFB $00,$00,$00,$00,$00,$00

; Data block at E270
b$E270 DEFB $00,$00,$00,$00,$00,$00

; Data block at E276
b$E276 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E27E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E286 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Game status buffer entry at E28E
g$E28E DEFB $00,$00,$00,$00

; Data block at E292
b$E292 DEFB $00

; Tile Table
;
; Populated by #R$D2A1.
@label=Table_Tiles
b$E293 DEFB $00,$00,$00,$00,$00
 $E298 DEFB $00,$00,$00,$00,$00
 $E29D DEFB $00,$00,$00,$00,$00
 $E2A2 DEFB $00,$00,$00,$00,$00

; Data block at E2A7
b$E2A7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E2BF DEFB $00,$00,$00,$00,$00,$00

; Random Number Seed
@label=RandomNumberSeed
g$E2C5 DEFW $0000

; Item ID
@label=Item_ID
g$E2C7 DEFB $00

; Item Sprite Bank
;
; Will point to either of: #R$A0E3, #R$AC24 or #R$B765.
@label=Item_SpriteBank
g$E2C8 DEFW $0000

; Routine at E2CA
;
; Used by the routine at #R$E396.
c$E2CA LD HL,$D834   ; #REGhl=#R$D834.
 $E2CD LD A,(HL)     ; #REGa=*#REGhl.
 $E2CE LD HL,$E260   ; #REGhl=#R$E260.
 $E2D1 LD B,$00      ; #REGb=#N$00.
 $E2D3 LD C,A        ; #REGc=#REGa.
 $E2D4 ADD HL,BC     ; #REGhl+=#REGbc.
 $E2D5 LD A,(HL)     ; #REGa=*#REGhl.
 $E2D6 CALL $DFB2    ; Call #R$DFB2.
 $E2D9 RET           ; Return.

; Routine at E2DA
;
; Used by the routine at #R$F43E.
c$E2DA LD HL,($E5B0) ; #REGhl=*#R$E5B0.
 $E2DD LD A,(HL)     ; #REGa=*#REGhl.
 $E2DE LD ($E2C7),A  ; Write #REGa to *#R$E2C7.
 $E2E1 PUSH HL       ; Stash #REGhl on the stack.
 $E2E2 CALL $E741    ; Call #R$E741.
 $E2E5 POP HL        ; Restore #REGhl from the stack.
 $E2E6 LD A,$00      ; {Write #N$00 to *#REGhl.
 $E2E8 LD (HL),A     ; }
 $E2E9 LD B,$04      ; #REGb=#N$04.
 $E2EB LD A,$01      ; {Write #N$01 to *#R$E761.
 $E2ED LD ($E761),A  ; }
 $E2F0 RET           ; Return.

; Routine at E2F1
;
; Used by the routine at #R$F43E.
c$E2F1 PUSH DE       ; Stash #REGde on the stack.
 $E2F2 LD DE,($E5B0) ; #REGde=*#R$E5B0.
 $E2F6 LD A,(DE)     ; #REGa=*#REGde.
 $E2F7 LD (HL),A     ; Write #REGa to *#REGhl.
 $E2F8 LD A,$00      ; {Write #N$00 to *#REGde.
 $E2FA LD (DE),A     ; }
 $E2FB POP DE        ; Restore #REGde from the stack.
 $E2FC RET           ; Return.

; Routine at E2FD
;
; Used by the routine at #R$F43E.
c$E2FD LD A,($E5B2)  ; {Return if *#R$E5B2 is equal to #N$10.
 $E300 CP $10        ;
 $E302 RET Z         ; }
 $E303 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$02.
 $E306 CP $02        ;
 $E308 RET Z         ; }
 $E309 CP $00        ; {Return if *#R$D832 is equal to #N$00.
 $E30B RET Z         ; }
 $E30C LD A,($D82C)  ; #REGa=*#R$D82C.
 $E30F LD HL,$D830   ; #REGhl=#R$D830.
 $E312 CP (HL)       ; {Return if #REGa is not equal to *#REGhl.
 $E313 RET NZ        ; }
 $E314 LD A,($D82D)  ; #REGa=*#R$D82D.
 $E317 LD HL,$D831   ; #REGhl=#R$D831.
 $E31A CP (HL)       ; {Return if #REGa is not equal to *#REGhl.
 $E31B RET NZ        ; }
 $E31C CALL $E658    ; Call #R$E658.
 $E31F RET           ; Return.

; Handler: Home Arrow
;
; Used by the routines at #R$F39E and #R$F801.
;
; .
;
; To indicate when the cursor is "docked", the home box cycles through a
; bunch of attribute values:
; .
; #PUSHS #UDGTABLE {
;   #SIM(start=$D1F1,stop=$D1F7)#POKES$E337,$00
;   #FOR$00,$0E||x|#SIM(start=$E320,stop=$E33C)
;     #SCR$02{$00,$00,$50,$50}(*home-arrow-x)#PLOT(0,0,0)(home-arrow-x)
;   ||
;   #UDGARRAY#(#ANIMATE$02,$0E(home-arrow))
; } UDGTABLE# #POPS
@label=Handler_HomeArrow
c$E320 LD HL,$E695   ; Point #REGhl at #R$E695 where the attributes are stored.
; Validate the attribute offset value.
 $E323 LD A,($D836)  ; {Jump to #R$E32F if *#R$D836 is not equal to #N$0E.
 $E326 CP $0E        ;
 $E328 JR NZ,$E32F   ; }
; If *#R$D836 is at the end of the table, reset it back to #N$00.
 $E32A LD A,$00      ; {Reset *#R$D836 back to the first colour.
 $E32C LD ($D836),A  ; }
; Fetch the attribute value using the offset.
@label=HomeArrow_SkipReset
*$E32F LD C,A        ; {Create an offset in #REGbc against the arrow attribute
 $E330 LD B,$00      ; table.}
 $E332 ADD HL,BC     ; Add the offset to the arrow attribute table pointer.
 $E333 LD A,(HL)     ; Fetch the attribute byte from the table and store it in
                     ; #REGa.
 $E334 CALL $E682    ; Call #R$E682.
 $E337 HALT          ; Halt operation (suspend CPU until the next interrupt).
; Move the attribute offset to the next value in the attribute table.
 $E338 LD HL,$D836   ; #REGhl=#R$D836.
 $E33B INC (HL)      ; Increment the attribute offset value to the next colour
                     ; value.
; Set up playing a sound.
 $E33C LD A,(HL)     ; {Multiply the attribute offset value by #N$04 and store the result
 $E33D RLCA          ; in #REGc.
 $E33E RLCA          ;
 $E33F LD C,A        ; }
 $E340 LD B,$06      ; Set a counter in #REGb for the number of times to make
                     ; the sound.
 $E342 LD A,$05      ; Set the initial border/ speaker state in #REGa.
@label=HomeArrow_Sound_Loop
*$E344 OUT ($FE),A   ; Set the border colour/ play sound.
 $E346 XOR %00010000 ; Flip the speaker bit.
 $E348 PUSH BC       ; Stash the loop counter on the stack.
 $E349 LD B,C        ; Set the delay counter to the value held in REGc.
@label=HomeArrow_Sound_Delay
*$E34A DJNZ $E34A    ; Decrease the delay counter by one and loop back to #R$E34A until
                     ; the delay counter is zero.
 $E34C POP BC        ; Restore the loop counter from the stack.
 $E34D DJNZ $E344    ; Decrease the loop counter by one and loop back to #R$E344 until the
                     ; loop counter is zero.
 $E34F JP $F39E      ; Jump to #R$F39E.

; Routine at E352
;
; Used by the routines at #R$F255, #R$F39E and #R$F43E.
c$E352 LD A,R        ; {Set the low byte in #REGl to the contents of the Memory
 $E354 LD L,A        ; Refresh Register.}
 $E355 LD H,$C8      ; Set the high byte in #REGh to #N$C8.
 $E357 LD B,$32      ; Set a loop counter in #REGb to #N$32.
 $E359 LD D,$05      ; Set a delay counter in #REGd of #N$05.
*$E35B LD A,(HL)     ; #REGa=*#REGhl.
 $E35C AND %00011000 ; Keep only bits 3-4.
 $E35E OR %00000101  ; Set bits 0, 2.
 $E360 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $E362 INC HL        ; Increment #REGhl by one.
 $E363 PUSH BC       ; Stash the loop counter on the stack.
 $E364 LD B,D        ; Set the delay loop counter.
@label=Delay_Loop_01
*$E365 DJNZ $E365    ; Decrease the delay counter by one and loop back to #R$E365 until
                     ; the delay counter is zero.
 $E367 POP BC        ; Restore the loop counter from the stack.
 $E368 DJNZ $E35B    ; Decrease the loop counter by one and loop back to #R$E35B until the
                     ; loop counter is zero.
 $E36A HALT          ; {Halt operation (suspend CPU until the next interrupt)
 $E36B HALT          ; twice.}
 $E36C CALL $EB56    ; Call #R$EB56.
 $E36F CP $01        ; {Return if the player has pressed any direction key.
 $E371 RET Z         ;
 $E372 CP $02        ;
 $E374 RET Z         ;
 $E375 CP $04        ;
 $E377 RET Z         ;
 $E378 CP $08        ;
 $E37A RET Z         ; }
 $E37B HALT          ; {Halt operation (suspend CPU until the next interrupt)
 $E37C HALT          ; twice.}
 $E37D LD A,R        ; {Set the low byte in #REGl to the contents of the Memory
 $E37F LD L,A        ; Refresh Register.}
 $E380 LD H,$0A      ; Set the high byte in #REGh to #N$0A.
 $E382 LD B,$23      ; Set a loop counter in #REGb to #N$23.
 $E384 LD C,$64      ; Set a delay counter in #REGc this time of #N$64.
*$E386 LD A,(HL)     ; #REGa=*#REGhl.
 $E387 AND %00011000 ; Keep only bits 3-4.
 $E389 OR %00000101  ; Set bits 0, 2.
 $E38B OUT ($FE),A   ; Set border to the colour held by #REGa.
 $E38D INC HL        ; Increment #REGhl by one.
 $E38E PUSH BC       ; Stash the loop counter on the stack.
 $E38F LD B,C        ; Set the delay loop counter.
@label=Delay_Loop_02
*$E390 DJNZ $E390    ; Decrease the delay counter by one and loop back to #R$E390 until
                     ; the delay counter is zero.
 $E392 POP BC        ; Restore the loop counter from the stack.
 $E393 DJNZ $E386    ; Decrease the loop counter by one and loop back to #R$E386 until the
                     ; loop counter is zero.
 $E395 RET           ; Return.

; Routine at E396
;
; Used by the routine at #R$F39E.
c$E396 LD A,($E5B2)  ; #REGa=*#R$E5B2.
 $E399 LD HL,$D834   ; #REGhl=#R$D834.
 $E39C CP $01        ; {Jump to #R$E3F9 if #REGa is not equal to #N$01.
 $E39E JR NZ,$E3F9   ; }
*$E3A0 LD A,($D82D)  ; #REGa=*#R$D82D.
 $E3A3 CP $0F        ; Compare #REGa with #N$0F.
 $E3A5 JP P,$E53C    ; Jump to #R$E53C P.
 $E3A8 CP $02        ; Compare #REGa with #N$02.
 $E3AA JR NZ,$E3F0   ; Jump to #R$E3F0 if #REGa is not zero.
 $E3AC LD A,($D82C)  ; {Compare *#R$D82C with #N$02.
 $E3AF CP $02        ; }
 $E3B1 LD A,($D82D)  ; #REGa=*#R$D82D.
 $E3B4 JR NZ,$E3F0   ; Jump to #R$E3F0 if *#R$D82C is not equal to #N$02.
 $E3B6 ADD A,$04     ; #REGa+=#N$04.
 $E3B8 LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $E3BB INC (HL)      ; Increment *#REGhl by one.
 $E3BC LD A,$00      ; {Write #N$00 to *#R$D835.
 $E3BE LD ($D835),A  ; }
 $E3C1 LD A,$2F      ; #REGa=#COLOUR$2F.
 $E3C3 CALL $E682    ; Call #R$E682.
 $E3C6 LD HL,$D82F   ; #REGhl=#R$D82F.
 $E3C9 INC (HL)      ; Increment *#REGhl by one.
 $E3CA LD B,$03      ; #REGb=#N$03.
*$E3CC PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $E3CD PUSH HL       ; }
 $E3CE CALL $E5E4    ; Call #R$E5E4.
 $E3D1 CALL $E66A    ; Call #R$E66A.
 $E3D4 CALL $E5B3    ; Call #R$E5B3.
 $E3D7 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $E3D8 CALL $E63F    ; Call #R$E63F.
 $E3DB POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $E3DC POP BC        ; }
 $E3DD INC (HL)      ; Increment *#REGhl by one.
 $E3DE DJNZ $E3CC    ; Decrease counter by one and loop back to #R$E3CC until
                     ; counter is zero.
 $E3E0 CALL $E661    ; Call #R$E661.
 $E3E3 LD A,($D82C)  ; {Write *#R$D82C to *#R$D830.
 $E3E6 LD ($D830),A  ; }
 $E3E9 LD A,($D82D)  ; {Write *#R$D82D to *#R$D831.
 $E3EC LD ($D831),A  ; }
 $E3EF RET           ; Return.
*$E3F0 ADD A,$04     ; #REGa+=#N$04.
 $E3F2 LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $E3F5 INC (HL)      ; Increment *#REGhl by one.
 $E3F6 JP $E53C      ; Jump to #R$E53C.
*$E3F9 CP $02        ; {Jump to #R$E454 if #REGa is not equal to #N$02.
 $E3FB JR NZ,$E454   ; }
*$E3FD LD A,($D82D)  ; #REGa=*#R$D82D.
 $E400 CP $05        ; Compare #REGa with #N$05.
 $E402 JP M,$E53C    ; Jump to #R$E53C M.
 $E405 CP $06        ; {Jump to #R$E44B if #REGa is not equal to #N$06.
 $E407 JR NZ,$E44B   ; }
 $E409 LD A,($D82C)  ; #REGa=*#R$D82C.
 $E40C CP $02        ; Compare #REGa with #N$02.
 $E40E LD A,($D82D)  ; #REGa=*#R$D82D.
 $E411 JR NZ,$E44B   ; Jump to #R$E44B if #REGa is not zero.
 $E413 SUB $04       ; #REGa-=#N$04.
 $E415 LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $E418 DEC (HL)      ; Decrease *#REGhl by one.
 $E419 CALL $E658    ; Call #R$E658.
 $E41C LD HL,$D82F   ; #REGhl=#R$D82F.
 $E41F LD B,$04      ; #REGb=#N$04.
 $E421 CP $02        ; {Jump to #R$E3FD if #REGa is equal to #N$02.
 $E423 JR Z,$E3FD    ; }
*$E425 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $E426 PUSH HL       ; }
 $E427 CALL $E5E4    ; Call #R$E5E4.
 $E42A CALL $E66A    ; Call #R$E66A.
 $E42D CALL $E5B3    ; Call #R$E5B3.
 $E430 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $E431 CALL $E63F    ; Call #R$E63F.
 $E434 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $E435 POP BC        ; }
 $E436 DEC (HL)      ; Decrease *#REGhl by one.
 $E437 DJNZ $E425    ; Decrease counter by one and loop back to #R$E425 until
                     ; counter is zero.
 $E439 LD A,$00      ; {Write #N$00 to *#R$D835.
 $E43B LD ($D835),A  ; }
 $E43E LD A,($D82C)  ; {Write *#R$D82C to *#R$D830.
 $E441 LD ($D830),A  ; }
 $E444 LD A,($D82D)  ; {Write *#R$D82D to *#R$D831.
 $E447 LD ($D831),A  ; }
 $E44A RET           ; Return.
*$E44B SUB $04       ; #REGa-=#N$04.
 $E44D LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $E450 DEC (HL)      ; Decrease *#REGhl by one.
 $E451 JP $E53C      ; Jump to #R$E53C.
*$E454 CP $04        ; {Jump to #R$E47B if #REGa is not equal to #N$04.
 $E456 JR NZ,$E47B   ; }
*$E458 LD A,($D82C)  ; #REGa=*#R$D82C.
 $E45B CP $0F        ; Compare #REGa with #N$0F.
 $E45D JP P,$E53C    ; Jump to #R$E53C P.
 $E460 CP $02        ; {Jump to #R$E46F if #REGa is not equal to #N$02.
 $E462 JR NZ,$E46F   ; }
 $E464 LD A,($D82D)  ; {Jump to #R$E53C if *#R$D82D is equal to #N$02.
 $E467 CP $02        ;
 $E469 JP Z,$E53C    ; }
 $E46C LD A,($D82C)  ; #REGa=*#R$D82C.
*$E46F ADD A,$04     ; #REGa+=#N$04.
 $E471 LD ($D82C),A  ; Write #REGa to *#R$D82C.
 $E474 LD A,(HL)     ; #REGa=*#REGhl.
 $E475 ADD A,$07     ; #REGa+=#N$07.
 $E477 LD (HL),A     ; Write #REGa to *#REGhl.
 $E478 JP $E53C      ; Jump to #R$E53C.
*$E47B CP $08        ; {Jump to #R$E4A2 if #REGa is not equal to #N$08.
 $E47D JR NZ,$E4A2   ; }
*$E47F LD A,($D82C)  ; #REGa=*#R$D82C.
 $E482 CP $05        ; Compare #REGa with #N$05.
 $E484 JP M,$E53C    ; Jump to #R$E53C M.
 $E487 CP $06        ; {Jump to #R$E496 if #REGa is not equal to #N$06.
 $E489 JR NZ,$E496   ; }
 $E48B LD A,($D82D)  ; {Jump to #R$E53C if *#R$D82D is equal to #N$02.
 $E48E CP $02        ;
 $E490 JP Z,$E53C    ; }
 $E493 LD A,($D82C)  ; #REGa=*#R$D82C.
*$E496 SUB $04       ; #REGa-=#N$04.
 $E498 LD ($D82C),A  ; Write #REGa to *#R$D82C.
 $E49B LD A,(HL)     ; #REGa=*#REGhl.
 $E49C SUB $07       ; #REGa-=#N$07.
 $E49E LD (HL),A     ; Write #REGa to *#REGhl.
 $E49F JP $E53C      ; Jump to #R$E53C.
*$E4A2 CP $05        ; {Jump to #R$E4C5 if #REGa is not equal to #N$05.
 $E4A4 JR NZ,$E4C5   ; }
 $E4A6 LD A,($D82D)  ; #REGa=*#R$D82D.
 $E4A9 CP $0F        ; Compare #REGa with #N$0F.
 $E4AB JP P,$E458    ; Jump to #R$E458 P.
 $E4AE CP $02        ; {Jump to #R$E4BD if #REGa is not equal to #N$02.
 $E4B0 JR NZ,$E4BD   ; }
 $E4B2 LD A,($D82C)  ; {Jump to #R$E3A0 if *#R$D82C is equal to #N$02.
 $E4B5 CP $02        ;
 $E4B7 JP Z,$E3A0    ; }
 $E4BA LD A,($D82D)  ; #REGa=*#R$D82D.
*$E4BD ADD A,$04     ; #REGa+=#N$04.
 $E4BF LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $E4C2 INC (HL)      ; Increment *#REGhl by one.
 $E4C3 JR $E458      ; Jump to #R$E458.
*$E4C5 CP $06        ; {Jump to #R$E4E9 if #REGa is not equal to #N$06.
 $E4C7 JR NZ,$E4E9   ; }
 $E4C9 LD A,($D82D)  ; #REGa=*#R$D82D.
 $E4CC CP $05        ; Compare #REGa with #N$05.
 $E4CE JP M,$E458    ; Jump to #R$E458 M.
 $E4D1 CP $06        ; {Jump to #R$E4E0 if #REGa is not equal to #N$06.
 $E4D3 JR NZ,$E4E0   ; }
 $E4D5 LD A,($D82C)  ; {Jump to #R$E3FD if *#R$D82C is equal to #N$02.
 $E4D8 CP $02        ;
 $E4DA JP Z,$E3FD    ; }
 $E4DD LD A,($D82D)  ; #REGa=*#R$D82D.
*$E4E0 SUB $04       ; #REGa-=#N$04.
 $E4E2 LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $E4E5 DEC (HL)      ; Decrease *#REGhl by one.
 $E4E6 JP $E458      ; Jump to #R$E458.
*$E4E9 CP $09        ; {Jump to #R$E512 if #REGa is not equal to #N$09.
 $E4EB JR NZ,$E512   ; }
 $E4ED LD A,($D82D)  ; #REGa=*#R$D82D.
 $E4F0 CP $0F        ; Compare #REGa with #N$0F.
 $E4F2 JP P,$E47F    ; Jump to #R$E47F P.
 $E4F5 CP $02        ; {Jump to #R$E509 if #REGa is not equal to #N$02.
 $E4F7 JR NZ,$E509   ; }
 $E4F9 LD A,($D82C)  ; {Jump to #R$E3A0 if *#R$D82C is equal to #N$06.
 $E4FC CP $06        ;
 $E4FE JP Z,$E3A0    ; }
 $E501 CP $02        ; {Jump to #R$E3A0 if *#R$D82C is equal to #N$02.
 $E503 JP Z,$E3A0    ; }
 $E506 LD A,($D82D)  ; #REGa=*#R$D82D.
*$E509 ADD A,$04     ; #REGa+=#N$04.
 $E50B LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $E50E INC (HL)      ; Increment *#REGhl by one.
 $E50F JP $E47F      ; Jump to #R$E47F.
*$E512 CP $0A        ; Compare #REGa with #N$0A.
 $E514 JP NZ,$F43E   ; Jump to #R$F43E if #REGa is not zero.
 $E517 LD A,($D82D)  ; #REGa=*#R$D82D.
 $E51A CP $05        ; Compare #REGa with #N$05.
 $E51C JP M,$E47F    ; Jump to #R$E47F M.
 $E51F CP $06        ; Compare #REGa with #N$06.
 $E521 JR NZ,$E533   ; Jump to #R$E533 if #REGa is not zero.
 $E523 LD A,($D82C)  ; #REGa=*#R$D82C.
 $E526 CP $06        ; Compare #REGa with #N$06.
 $E528 JP Z,$E53C    ; Jump to #R$E53C if #REGa is zero.
 $E52B CP $02        ; Compare #REGa with #N$02.
 $E52D JP Z,$E3FD    ; Jump to #R$E3FD if #REGa is zero.
 $E530 LD A,($D82D)  ; #REGa=*#R$D82D.
*$E533 SUB $04       ; #REGa-=#N$04.
 $E535 LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $E538 DEC (HL)      ; Decrease *#REGhl by one.
 $E539 JP $E47F      ; Jump to #R$E47F.
*$E53C CALL $E2CA    ; Call #R$E2CA.
 $E53F LD A,($D82C)  ; {Write *#R$D82C to *#R$D830.
 $E542 LD ($D830),A  ; }
 $E545 LD A,($D82D)  ; {Write *#R$D82D to *#R$D831.
 $E548 LD ($D831),A  ; }
 $E54B LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $E54D RLCA          ; RLCA.
 $E54E LD L,A        ; #REGl=#REGa.
 $E54F LD H,$00      ; #REGh=#N$00.
 $E551 LD B,$46      ; #REGb=#N$46.
 $E553 LD D,$05      ; #REGd=#N$05.
*$E555 LD A,(HL)     ; #REGa=*#REGhl.
 $E556 AND %00011000 ; Keep only bits 3-4.
 $E558 OR %00000101  ; Set bits 0, 2.
 $E55A OUT ($FE),A   ; Set border to the colour held by #REGa.
 $E55C INC HL        ; Increment #REGhl by one.
 $E55D PUSH BC       ; Stash #REGbc on the stack.
 $E55E LD B,D        ; #REGb=#REGd.
*$E55F DJNZ $E55F    ; Decrease counter by one and loop back to #R$E55F until
                     ; counter is zero.
 $E561 POP BC        ; Restore #REGbc from the stack.
 $E562 DJNZ $E555    ; Decrease counter by one and loop back to #R$E555 until
                     ; counter is zero.
 $E564 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $E565 LD A,($D82C)  ; {Jump to #R$E575 if *#R$D82C is equal to *#R$D82E.
 $E568 LD HL,$D82E   ;
 $E56B CP (HL)       ;
 $E56C JR Z,$E575    ; }
 $E56E JP P,$E574    ; Jump to #R$E574 P.
 $E571 DEC (HL)      ; Decrease *#REGhl by one.
 $E572 JR $E575      ; Jump to #R$E575.
*$E574 INC (HL)      ; Increment *#REGhl by one.
*$E575 LD A,($D82D)  ; {Jump to #R$E585 if *#R$D82D is equal to *#R$D82F.
 $E578 LD HL,$D82F   ;
 $E57B CP (HL)       ;
 $E57C JR Z,$E585    ; }
 $E57E JP P,$E584    ; Jump to #R$E584 P.
 $E581 DEC (HL)      ; Decrease *#REGhl by one.
 $E582 JR $E585      ; Jump to #R$E585.
*$E584 INC (HL)      ; Increment *#REGhl by one.
*$E585 LD A,($D82E)  ; {Jump to #R$E53C if *#R$D82E is not equal to *#R$D82C.
 $E588 LD HL,$D82C   ;
 $E58B CP (HL)       ;
 $E58C JR NZ,$E53C   ; }
 $E58E LD A,($D82F)  ; {Jump to #R$E53C if *#R$D82F is not equal to *#R$D82D.
 $E591 LD HL,$D82D   ;
 $E594 CP (HL)       ;
 $E595 JR NZ,$E53C   ; }
 $E597 LD A,R        ; {#REGl=the contents of the Memory Refresh Register.
 $E599 LD L,A        ; }
 $E59A LD H,$0A      ; #REGh=#N$0A.
 $E59C LD B,$23      ; #REGb=#N$23.
 $E59E LD C,$64      ; #REGc=#N$64.
*$E5A0 LD A,(HL)     ; #REGa=*#REGhl.
 $E5A1 INC HL        ; Increment #REGhl by one.
 $E5A2 AND %00011000 ; Keep only bits 3-4.
 $E5A4 OR %00000101  ; Set bits 0, 2.
 $E5A6 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $E5A8 PUSH BC       ; Stash #REGbc on the stack.
 $E5A9 LD B,C        ; #REGb=#REGc.
*$E5AA DJNZ $E5AA    ; Decrease counter by one and loop back to #R$E5AA until
                     ; counter is zero.
 $E5AC POP BC        ; Restore #REGbc from the stack.
 $E5AD DJNZ $E5A0    ; Decrease counter by one and loop back to #R$E5A0 until
                     ; counter is zero.
 $E5AF RET           ; Return.

; Game status buffer entry at E5B0
g$E5B0 DEFW $0000

; Data: Control Byte
;
; Used by the routines at #R$E2FD, #R$EB56 and #R$EBF5.
; #TABLE(default,centre,centre)
; { =h Byte | =h Meaning }
; { #N$00 | No input }
; { #N$01 | Right }
; { #N$02 | Left }
; { #N$04 | Down }
; { #N$08 | Up }
; { #N$10 | Fire }
; TABLE#
@label=Data_Control
g$E5B2 DEFB $00

; Routine at E5B3
;
; Used by the routine at #R$E396.
c$E5B3 LD A,($D82F)  ; #REGa=*#R$D82F.
 $E5B6 RLCA          ; {RLCA.
 $E5B7 RLCA          ;
 $E5B8 RLCA          ;
 $E5B9 RLCA          ; }
 $E5BA LD C,A        ; #REGc=#REGa.
 $E5BB LD B,$64      ; #REGb=#N$64.
 $E5BD LD HL,$03E8   ; #REGhl=#N($03E8,$04,$04).
*$E5C0 LD A,(HL)     ; #REGa=*#REGhl.
 $E5C1 AND %00011000 ; Keep only bits 3-4.
 $E5C3 OR %00000101  ; Set bits 0, 2.
 $E5C5 OUT ($FE),A   ; Send to the speaker.
 $E5C7 INC HL        ; Increment #REGhl by one.
 $E5C8 PUSH BC       ; Stash #REGbc on the stack.
 $E5C9 LD B,C        ; #REGb=#REGc.
*$E5CA DJNZ $E5CA    ; Decrease counter by one and loop back to #R$E5CA until
                     ; counter is zero.
 $E5CC POP BC        ; Restore #REGbc from the stack.
 $E5CD DJNZ $E5C0    ; Decrease counter by one and loop back to #R$E5C0 until
                     ; counter is zero.
 $E5CF RET           ; Return.

; Saved Attributes Block For Cursor
;
; Saves the attributes before painting the players cursor, this allows it
; to more easily be "undrawn".
; .
; Used by the routines at #R$E5E4 and #R$E63F.
@label=SavedAttributesBlock
g$E5D0 DEFB $00,$00,$00,$00
 $E5D4 DEFB $00,$00,$00,$00
 $E5D8 DEFB $00,$00,$00,$00
 $E5DC DEFB $00,$00,$00,$00

; Cursor Attribute Position
@label=Cursor_AttributePosition_Y
g$E5E0 DEFB $00
@label=Cursor_AttributePosition_X
 $E5E1 DEFB $00

; Cursor Attribute Buffer Pointer
@label=Cursor_AttributePointer
g$E5E2 DEFW $0000

; Draw Cursor
;
; Used by the routines at #R$E396, #R$E661 and #R$F85D.
;
; .
;
; #PUSHS #SIM(start=$D1F1,stop=$D1F7)#POKES$D82E,$06;$D82F,$06
; #UDGTABLE { #SIM(start=$E5E4,stop=$E63E)#SCR$02{$50,$50,$40,$40}(game-cursor) }
; UDGTABLE# #POPS
@label=Draw_Cursor
c$E5E4 LD A,($D82E)  ; {#REGb=*#R$D82E-#N$01.
 $E5E7 DEC A         ;
 $E5E8 LD B,A        ; }
 $E5E9 LD ($E5E0),A  ; Write #REGb to *#R$E5E0.
 $E5EC LD A,($D82F)  ; {#REGc=*#R$D82F-#N$01.
 $E5EF DEC A         ;
 $E5F0 LD C,A        ; }
 $E5F1 LD ($E5E1),A  ; Write #REGc to *#R$E5E1.
 $E5F4 CALL $DCC2    ; Call #R$DCC2.
 $E5F7 CALL $DCD1    ; Call #R$DCD1.
 $E5FA LD ($E5E2),DE ; Write the calculated attribute buffer address to
                     ; *#R$E5E2.
 $E5FE LD B,$04      ; #REGb=#N$04.
 $E600 LD HL,$E5D0   ; #REGhl=#R$E5D0.
 $E603 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
*$E604 PUSH BC       ; Stash #REGbc on the stack.
 $E605 LD BC,$0004   ; {Copy #N($0004,$04,$04) bytes from *#REGhl to *#REGde.
 $E608 LDIR          ; }
 $E60A LD BC,$001C   ; {#REGhl+=#N($001C,$04,$04).
 $E60D ADD HL,BC     ; }
 $E60E POP BC        ; Restore #REGbc from the stack.
 $E60F DJNZ $E604    ; Decrease counter by one and loop back to #R$E604 until
                     ; counter is zero.
; Paint the top section of the cursor.
 $E611 LD HL,$E6AF   ; {Copy #N($0004,$04,$04) bytes from #R$E6AF to *#R$E5E2.
 $E614 LD DE,($E5E2) ;
 $E618 LD BC,$0004   ;
 $E61B LDIR          ; }
; Paint the middle section of the cursor.
 $E61D LD B,$02      ; #REGb=#N$02.
@label=Draw_Cursor_Loop
*$E61F PUSH BC       ; Stash #REGbc on the stack.
 $E620 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $E621 LD BC,$001C   ; {#REGhl+=#N($001C,$04,$04).
 $E624 ADD HL,BC     ; }
 $E625 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $E626 LD A,(HL)     ; {Write *#REGhl to *#REGde.
 $E627 LD (DE),A     ; }
 $E628 INC HL        ; Increment #REGhl by one.
 $E629 INC DE        ; {Increment #REGde by three.
 $E62A INC DE        ;
 $E62B INC DE        ; }
 $E62C LD A,(HL)     ; {Write *#REGhl to *#REGde.
 $E62D LD (DE),A     ; }
 $E62E INC HL        ; Increment #REGhl by one.
 $E62F INC DE        ; Increment #REGde by one.
 $E630 POP BC        ; Restore #REGbc from the stack.
 $E631 DJNZ $E61F    ; Decrease counter by one and loop back to #R$E61F until
                     ; counter is zero.
 $E633 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $E634 LD BC,$001C   ; {#REGhl+=#N($001C,$04,$04).
 $E637 ADD HL,BC     ; }
 $E638 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
; Paint the bottom section of the cursor.
 $E639 LD BC,$0004   ; {Copy #N($0004,$04,$04) bytes from *#REGhl to *#REGde.
 $E63C LDIR          ; }
 $E63E RET           ; Return.

; Remove Player Cursor Attributes
;
; Used by the routines at #R$E396, #R$E658 and #R$F85D.
;
; .
;
; Less "remove" and more "replace"; this routine erases the players
; cursor attributes, but it doesn't leave a hole - it replaces the attributes
; with the values they were prior to it being originally drawn.
; .
; This is the 4x4 block of attributes which were behind the cursor before
; it was initially painted.
@label=Remove_PlayerCursorAttributes
c$E63F LD HL,$E5D0   ; Load #REGhl with #R$E5D0.
; This is a pointer to the starting attribute buffer location of the
; players cursor.
 $E642 LD DE,($E5E2) ; Load #REGde with *#R$E5E2.
; The cursor block is #N$04x#N$04 (#N$04 rows of #N$04 bytes).
 $E646 LD B,$04      ; Set a counter in #REGb for #N$04 rows.
@label=Remove_PlayerCursorAttributes_Loop
*$E648 PUSH BC       ; Stash the row counter on the stack.
 $E649 LD BC,$0004   ; {Copy #N($0004,$04,$04) bytes from the stored attributes to the
 $E64C LDIR          ; attribute buffer.}
; One full row is #N$20 bytes, so this is #N$04 bytes less than one row.
; Hence this moves down one row, but back to the start of the line.
 $E64E EX DE,HL      ; {Add #N($001C,$04,$04) to the attribute buffer position.
 $E64F LD BC,$001C   ;
 $E652 ADD HL,BC     ;
 $E653 EX DE,HL      ; }
 $E654 POP BC        ; Restore the row counter from the stack.
 $E655 DJNZ $E648    ; Decrease the row counter by one and loop back to #R$E648 until
                     ; all the rows have been updated.
 $E657 RET           ; Return.

; Remove Player Cursor
;
; Used by the routines at #R$D352, #R$E2FD and #R$E396.
@label=Remove_PlayerCursor
c$E658 LD A,$00      ; {Set *#R$D835 to OFF (#N$00).
 $E65A LD ($D835),A  ; }
 $E65D CALL $E63F    ; Call #R$E63F.
 $E660 RET           ; Return.

; Display Player Cursor
;
; Used by the routines at #R$D352, #R$D469 and #R$E396.
@label=Display_PlayerCursor
c$E661 CALL $E5E4    ; Call #R$E5E4.
 $E664 LD A,$01      ; {Set *#R$D835 to ON (#N$01).
 $E666 LD ($D835),A  ; }
 $E669 RET           ; Return.

; Routine at E66A
;
; Used by the routine at #R$E396.
c$E66A LD DE,$5822   ; #REGde=#N$5822 (attribute buffer location).
 $E66D LD HL,$E6A3   ; #REGhl=#R$E6A3.
; The home block is #N$04x#N$04 (#N$04 rows of #N$04 bytes) but not all
; of it cycles attributes. Only #N$03x#N$04 is used here.
 $E670 LD B,$04      ; Set a counter in #REGb for #N$04 rows.
*$E672 PUSH BC       ; Stash the row counter on the stack.
 $E673 LD BC,$0003   ; {Copy #N($0003,$04,$04) bytes from the attribute buffer
 $E676 LDIR          ; to #R$E6A3.}
; One full row is #N$20 bytes, so this is #N$03 bytes less than one row.
; Hence this moves down one row, but back to the start of the line.
 $E678 EX DE,HL      ; {Add #N($001D,$04,$04) to the attribute buffer position.
 $E679 LD BC,$001D   ;
 $E67C ADD HL,BC     ;
 $E67D EX DE,HL      ; }
 $E67E POP BC        ; Restore the row counter from the stack.
 $E67F DJNZ $E672    ; Decrease the row counter by one and loop back to #R$E672 until all
                     ; the rows have been updated.
 $E681 RET           ; Return.

; Colourise Home
;
; Used by the routines at #R$D352, #R$E320 and #R$E396.
;
; A The attribute value to write
@label=ColouriseHome
c$E682 LD HL,$5821   ; #REGhl=#N$5821 (attribute buffer location).
 $E685 LD B,$02      ; Set a counter in #REGb for #N$02 rows.
@label=ColouriseHome_Loop
*$E687 PUSH BC       ; Stash the row counter on the stack.
 $E688 LD B,$03      ; Set a counter in #REGb for #N$03 character blocks.
@label=Home_WriteAttribute
*$E68A LD (HL),A     ; Write the value stored in #REGa to the address held by the
                     ; attribute buffer pointer.
 $E68B INC HL        ; Increment the attribute buffer pointer by one.
 $E68C DJNZ $E68A    ; Decrease the character block counter by one and loop back to
                     ; #R$E68A until all three byte values have been written.
 $E68E LD HL,$5841   ; #REGhl=#N$5841 (attribute buffer location).
 $E691 POP BC        ; Restore the row counter from the stack.
 $E692 DJNZ $E687    ; Decrease the row counter by one and loop back to #R$E687 until all
                     ; the rows have been updated.
 $E694 RET           ; Return.

; Home Arrow Attributes
;
; Used by the routine at #R$E320.
@label=HomeArrowAttributes
g$E695 DEFB $28      ; #COLOUR(#PEEK(#PC)).
 $E696 DEFB $29      ; #COLOUR(#PEEK(#PC)).
 $E697 DEFB $2A      ; #COLOUR(#PEEK(#PC)).
 $E698 DEFB $2B      ; #COLOUR(#PEEK(#PC)).
 $E699 DEFB $2C      ; #COLOUR(#PEEK(#PC)).
 $E69A DEFB $2D      ; #COLOUR(#PEEK(#PC)).
 $E69B DEFB $2E      ; #COLOUR(#PEEK(#PC)).
 $E69C DEFB $2F      ; #COLOUR(#PEEK(#PC)).
 $E69D DEFB $2E      ; #COLOUR(#PEEK(#PC)).
 $E69E DEFB $2D      ; #COLOUR(#PEEK(#PC)).
 $E69F DEFB $2C      ; #COLOUR(#PEEK(#PC)).
 $E6A0 DEFB $2B      ; #COLOUR(#PEEK(#PC)).
 $E6A1 DEFB $2A      ; #COLOUR(#PEEK(#PC)).
 $E6A2 DEFB $29      ; #COLOUR(#PEEK(#PC)).

; Home Attributes
;
; Used by the routine at #R$E66A.
@label=HomeAttributes
g$E6A3 DEFB $2F,$2F,$69 ; Top line.
 $E6A6 DEFB $2F,$2F,$69 ; Middle line (upper).
 $E6A9 DEFB $2F,$2F,$69 ; Middle line (lower).
 $E6AC DEFB $68,$68,$69 ; Bottom line.

; Cursor Attributes
;
; Used by the routine at #R$E5E4.
@label=CursorAttributes
g$E6AF DEFB $09,$49,$12,$52 ; Top line.
 $E6B3 DEFB $76,$1B         ; {Left/ right middle.
 $E6B5 DEFB $36,$5B         ; }
 $E6B7 DEFB $6D,$2D,$64,$24 ; Bottom line.

; Table: Cursor Attribute Positions
;
; Used by the routine at #R$E6C8.
@label=Table_CursorAttributePositions
g$E6BB DEFB $04,$06,$08,$09,$0A,$0B,$07,$05
 $E6C3 DEFB $03,$02,$01

; Temporary Cursor Attribute Byte Pointer
;
; Used by the routine at #R$E6C8.
@label=TempAttributeStore
g$E6C6 DEFW $0000

; Rotate Player Cursor Attributes
;
; Used by the routine at #R$F85D.
;
; .
;
; This is a pretty confusing routine, it's used for rotating the
; attribute values of the players cursor. These are stored in a table at
; #R$E6AF.
; .
; The reason why this is complicated is simply down to how the data is
; stored... Rather than hold the attribute bytes sequentially, they're held as:
; top row x 4 bytes, left side x 1 byte, right side x 1 byte, left side x 1
; byte, right side x 1 byte and lastly, the bottom row x 4 bytes.
; .
; This makes them a lot easier to draw, as the whole thing can then be drawn
; left-to-right one row at a time (see #R$E5E4).
; .
; Hopefully the rotation problem is clear already, this isn't a matter of just
; moving every byte along one position - in order to rotate, a look up table is
; used to track the positions at #R$E6BB.
; .
; This table should also hopefully make things clearer:
; #PUSHS #SIM(start=$E6C8,stop=$E6EB)#LET(cursor1[]=(0))
; #FOR$00,$0B||x|#LET(cursor1[x]=#PEEK($E6AF+x))||
; #SIM(start=$E6C8,stop=$E6EB)#LET(cursor2[]=(0))
; #FOR$00,$0B||x|#LET(cursor2[x]=#PEEK($E6AF+x))|| #POPS
; #TABLE(default,centre,centre,centre,centre)
; { =h,r2 Address | =h Before | =h After 1 Pass | =h After 2 Passes | =h,r2 Position }
; { =h Attribute Byte | =h Attribute Byte | =h Attribute Byte }
; #FOR$00,$0B(n,{ #N($E6AF+n) | #N(#PEEK($E6AF+n)) | #N({cursor1[n]}) | #N({cursor2[n]}) | #MAP(n)(
; ?,
; 0:Top byte 1 (left),
; 1:Top byte 2,
; 2:Top byte 3,
; 3:Top byte 4 (right),
; 4:Middle top byte 1 (left),
; 5:Middle top byte 2 (right),
; 6:Middle bottom byte 1 (left),
; 7:Middle bottom byte 2 (right),
; 8:Bottom byte 1 (left),
; 9:Bottom byte 2,
; 10:Bottom byte 3,
; 11:Bottom byte 4 (right)) })
; TABLE#
; .
; On the top row, it's very simple to shift each byte one position to the
; right but when you reach the end of that row, the subsequent address isn't
; just next in the sequence. Instead, it's "Middle top byte 2 (right)" as shown
; in the table which is two positions after "Top byte 4 (right)". Likewise, the
; next position for the middle section is again, two positions after this one
; and the bottom row moves in the opposite direction entirely in order to
; achieve the circular motion!
; .
; This creates a wonderful effect as shown here:
; #PUSHS #UDGTABLE {
;   #SIM(start=$D1F1,stop=$D1F7)#POKES$D82E,$06;$D82F,$06
;   #FOR$01,$0C||x|#SIM(start=$F874,stop=$F87D)
;     #SCR$02{$50,$50,$40,$40}(*moving-game-cursor-x)#PLOT(0,0,0)(moving-game-cursor-x)
;   ||
;   #UDGARRAY#(#ANIMATE$02,$0C(moving-game-cursor))
; } UDGTABLE# #POPS
@label=PlayerCursor_AttributesRotator
c$E6C8 LD HL,$E6AF   ; Set #REGhl to point to #R$E6AF.
 $E6CB LD IX,$E6BB   ; Set #REGix to point to #R$E6BB which is the rotation
                     ; order table.
 $E6CF LD DE,$0000   ; Initialise #REGde to #N($0000,$04,$04).
 $E6D2 LD B,$0B      ; Set a counter in #REGb for #N$0B attribute byte
                     ; positions.
; Grab the first attribute byte value and store it in #REGc for the last
; part...
 $E6D4 LD C,(HL)     ; Fetch the first byte from the cursor attributes pointer and store
                     ; it in #REGc.
; This is a loop which rotates the attributes #N$0B times, each time
; moving an attribute from the position specified in the table to the current
; position.
@label=PlayerCursor_AttributesRotator_Loop
*$E6D5 PUSH HL       ; Stash the current position in #R$E6AF on the stack.
 $E6D6 LD E,(IX+$00) ; Fetch the current position in the rotation order and
                     ; store it in #REGe.
 $E6D9 INC IX        ; Move to the next entry in rotation table.
 $E6DB LD HL,$E6AF   ; {Add #R$E6AF with #REGde and store the result in #REGhl.
 $E6DE ADD HL,DE     ; }
 $E6DF LD A,(HL)     ; Fetch a byte from the calculated attribute byte pointer
                     ; and store it in #REGa.
 $E6E0 LD ($E6C6),HL ; Store the calculated attribute byte pointer at *#R$E6C6.
 $E6E3 POP HL        ; Restore the cursor attributes pointer from the stack.
 $E6E4 LD (HL),A     ; Write the byte to the cursor attributes pointer.
 $E6E5 LD HL,($E6C6) ; Restore the calculated attribute byte pointer at
                     ; *#R$E6C6 back to #REGhl.
 $E6E8 DJNZ $E6D5    ; Decrease the attribute byte counter by one and loop back to #R$E6D5
                     ; until the attribute byte counter is zero.
; Write the first attribute byte value we stored in #REGc to the second
; position in the attributes table.
 $E6EA LD (HL),C     ; Write the stored attribute byte in #REGc to *#REGhl.
 $E6EB RET           ; Return.

; Generate Random Number
;
; Used by the routine at #R$D2A1.
;
; O:BC The generated random number
@label=GenerateRandomNumber
c$E6EC PUSH HL       ; Stash #REGhl on the stack.
 $E6ED LD HL,($E2C5) ; #REGhl=*#R$E2C5.
 $E6F0 LD A,(HL)     ; Fetch a byte from *#REGhl and store it in #REGa.
 $E6F1 RLCA          ; {Multiply #REGa by #N$10.
 $E6F2 RLCA          ;
 $E6F3 RLCA          ; }
 $E6F4 PUSH AF       ; Stash the result on the stack.
 $E6F5 LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $E6F7 AND %00011111 ; Ensure the number is between #N$00-#N$1F.
 $E6F9 LD H,A        ; Store the result in #REGh.
 $E6FA INC L         ; Increment #REGl by one.
 $E6FB LD ($E2C5),HL ; Write #REGhl to *#R$E2C5.
 $E6FE POP AF        ; Restore #REGaf from the stack.
 $E6FF LD ($E2C5),HL ; Write #REGhl to *#R$E2C5.
 $E702 LD HL,$D825   ; #REGhl=#R$D825.
 $E705 SRL A         ; Divide #REGa by #N$02.
@label=HalveRandomNumber
*$E707 SRL A         ; Divide #REGa by #N$02.
 $E709 CP (HL)       ; {Jump to #R$E707 if #REGa is greater than or equal to
 $E70A JP P,$E707    ; *#REGhl.}
 $E70D INC A         ; Increment #REGa by one.
 $E70E LD B,$00      ; {Store the result in #REGbc.
 $E710 LD C,A        ; }
 $E711 POP HL        ; Restore #REGhl from the stack.
 $E712 RET           ; Return.

; Routine at E713
;
; Used by the routine at #R$F801.
c$E713 LD HL,$E293   ; #REGhl=#R$E293.
 $E716 LD A,($D826)  ; {Jump to #R$E724 if *#R$D826 is not equal to #N$00.
 $E719 CP $00        ;
 $E71B JP NZ,$E724   ; }
 $E71E LD A,$00      ; {Write #N$00 to *#R$E2C7.
 $E720 LD ($E2C7),A  ; }
 $E723 RET           ; Return.
*$E724 LD A,(HL)     ; #REGa=*#REGhl.
 $E725 PUSH HL       ; {#REGde=#REGhl (using the stack).
 $E726 POP DE        ; }
 $E727 INC HL        ; Increment #REGhl by one.
 $E728 LD ($E2C7),A  ; Write #REGa to *#R$E2C7.
 $E72B LD A,($D826)  ; #REGa=*#R$D826.
 $E72E DEC A         ; Decrease #REGa by one.
 $E72F CP $00        ; {Jump to #R$E738 if #REGa is not equal to #N$00.
 $E731 JP NZ,$E738   ; }
 $E734 LD C,$01      ; #REGc=#N$01.
 $E736 JR $E739      ; Jump to #R$E739.
*$E738 LD C,A        ; #REGc=#REGa.
*$E739 LD B,$00      ; #REGb=#N$00.
 $E73B LDIR          ; LDIR.
 $E73D LD ($D826),A  ; Write #REGa to *#R$D826.
 $E740 RET           ; Return.

; Routine at E741
;
; Used by the routine at #R$E2DA.
c$E741 LD A,($E2C7)  ; {Jump to #R$E74A if *#R$E2C7 is less than #N$15
 $E744 CP $15        ; (unsigned comparison).
 $E746 JP M,$E74A    ; }
 $E749 RET           ; Return.
*$E74A LD HL,$E293   ; #REGhl=#R$E293.
 $E74D LD B,$00      ; #REGb=#N$00.
 $E74F LD A,($D826)  ; #REGa=*#R$D826.
 $E752 LD C,A        ; #REGc=#REGa.
 $E753 INC A         ; Increment #REGa by one.
 $E754 LD ($D826),A  ; Write #REGa to *#R$D826.
 $E757 ADD HL,BC     ; #REGhl+=#REGbc.
 $E758 LD A,($E2C7)  ; {Write *#R$E2C7 to *#REGhl.
 $E75B LD (HL),A     ; }
 $E75C RET           ; Return.

; Data block at E75D
b$E75D DEFB $00
 $E75E DEFB $00
 $E75F DEFB $00
 $E760 DEFB $00
 $E761 DEFB $00
 $E762 DEFB $00
 $E763 DEFB $00
 $E764 DEFB $00
 $E765 DEFB $00
 $E766 DEFB $00
 $E767 DEFB $00
 $E768 DEFB $00
 $E769 DEFB $00
 $E76A DEFB $00
 $E76B DEFB $00
 $E76C DEFB $00
 $E76D DEFB $00
 $E76E DEFB $00
 $E76F DEFB $00
 $E770 DEFB $00

; Data block at E771
b$E771 DEFB $00,$00,$00,$00

; Routine at E775
;
; Used by the routines at #R$D352 and #R$F39E.
c$E775 LD A,($E75D)  ; #REGa=*#R$E75D.
 $E778 LD ($E762),A  ; Write #REGa to *#R$E762.
 $E77B INC A         ; Increment #REGa by one.
 $E77C LD ($E763),A  ; Write #REGa to *#R$E763.
 $E77F LD A,($E75E)  ; #REGa=*#R$E75E.
 $E782 LD ($E764),A  ; Write #REGa to *#R$E764.
 $E785 INC A         ; Increment #REGa by one.
 $E786 LD ($E765),A  ; Write #REGa to *#R$E765.
 $E789 LD A,($E75D)  ; {#REGb=*#R$E75D.
 $E78C LD B,A        ; }
 $E78D LD A,($E75E)  ; {#REGc=*#R$E75E.
 $E790 LD C,A        ; }
 $E791 CALL $E992    ; Call #R$E992.
 $E794 LD E,$7F      ; #REGe=#N$7F.
 $E796 PUSH HL       ; Stash #REGhl on the stack.
 $E797 LD A,(HL)     ; #REGa=*#REGhl.
 $E798 LD (HL),E     ; Write #REGe to *#REGhl.
 $E799 LD ($E766),A  ; Write #REGa to *#R$E766.
 $E79C INC HL        ; Increment #REGhl by one.
 $E79D LD A,(HL)     ; #REGa=*#REGhl.
 $E79E LD (HL),E     ; Write #REGe to *#REGhl.
 $E79F LD ($E767),A  ; Write #REGa to *#R$E767.
 $E7A2 LD BC,$001F   ; {#REGhl+=#N($001F,$04,$04).
 $E7A5 ADD HL,BC     ; }
 $E7A6 LD A,(HL)     ; #REGa=*#REGhl.
 $E7A7 LD (HL),E     ; Write #REGe to *#REGhl.
 $E7A8 LD ($E768),A  ; Write #REGa to *#R$E768.
 $E7AB INC HL        ; Increment #REGhl by one.
 $E7AC LD A,(HL)     ; #REGa=*#REGhl.
 $E7AD LD (HL),E     ; Write #REGe to *#REGhl.
 $E7AE LD ($E769),A  ; Write #REGa to *#R$E769.
 $E7B1 CALL $E9A5    ; Call #R$E9A5.
 $E7B4 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $E7B5 POP HL        ; Restore #REGhl from the stack.
 $E7B6 LD A,($E766)  ; {Write *#R$E766 to *#REGhl.
 $E7B9 LD (HL),A     ; }
 $E7BA INC HL        ; Increment #REGhl by one.
 $E7BB LD A,($E767)  ; {Write *#R$E767 to *#REGhl.
 $E7BE LD (HL),A     ; }
 $E7BF LD BC,$001F   ; {#REGhl+=#N($001F,$04,$04).
 $E7C2 ADD HL,BC     ; }
 $E7C3 LD A,($E768)  ; {Write *#R$E768 to *#REGhl.
 $E7C6 LD (HL),A     ; }
 $E7C7 INC HL        ; Increment #REGhl by one.
 $E7C8 LD A,($E769)  ; {Write *#R$E769 to *#REGhl.
 $E7CB LD (HL),A     ; }
; This entry point is used by the routine at #R$D352.
*$E7CC LD D,$00      ; #REGd=#N$00.
 $E7CE LD A,($E762)  ; #REGa=*#R$E762.
 $E7D1 CP $00        ; {Jump to #R$E7DB if #REGa is equal to #N$00.
 $E7D3 JR Z,$E7DB    ; }
 $E7D5 DEC A         ; Decrease #REGa by one.
 $E7D6 LD ($E762),A  ; Write #REGa to *#R$E762.
 $E7D9 SET 1,D       ; Set bit 1 of #REGd.
*$E7DB LD A,($E763)  ; #REGa=*#R$E763.
 $E7DE CP $17        ; {Jump to #R$E7E8 if #REGa is equal to #N$17.
 $E7E0 JR Z,$E7E8    ; }
 $E7E2 INC A         ; Increment #REGa by one.
 $E7E3 LD ($E763),A  ; Write #REGa to *#R$E763.
 $E7E6 SET 2,D       ; Set bit 2 of #REGd.
*$E7E8 LD A,($E765)  ; #REGa=*#R$E765.
 $E7EB CP $1F        ; {Jump to #R$E7F5 if #REGa is equal to #N$1F.
 $E7ED JR Z,$E7F5    ; }
 $E7EF INC A         ; Increment #REGa by one.
 $E7F0 LD ($E765),A  ; Write #REGa to *#R$E765.
 $E7F3 SET 3,D       ; Set bit 3 of #REGd.
*$E7F5 LD A,($E764)  ; #REGa=*#R$E764.
 $E7F8 CP $00        ; {Jump to #R$E802 if #REGa is equal to #N$00.
 $E7FA JR Z,$E802    ; }
 $E7FC DEC A         ; Decrease #REGa by one.
 $E7FD LD ($E764),A  ; Write #REGa to *#R$E764.
 $E800 SET 4,D       ; Set bit 4 of #REGd.
*$E802 LD A,D        ; #REGa=#REGd.
 $E803 CP $00        ; {Return if #REGa is equal to #N$00.
 $E805 RET Z         ; }
 $E806 LD B,$02      ; #REGb=#N$02.
 $E808 LD E,$52      ; #REGe=#N$52.
*$E80A PUSH BC       ; Stash #REGbc on the stack.
 $E80B BIT 1,D       ; Test bit 1 of #REGd.
 $E80D JR Z,$E859    ; Jump to #R$E859 if #REGa is zero.
 $E80F LD A,($E762)  ; {#REGb=*#R$E762.
 $E812 LD B,A        ; }
 $E813 LD A,($E75E)  ; {#REGc=*#R$E75E.
 $E816 LD C,A        ; }
 $E817 CALL $E992    ; Call #R$E992.
 $E81A POP BC        ; Restore #REGbc from the stack.
 $E81B PUSH BC       ; Stash #REGbc on the stack.
 $E81C LD A,B        ; {Jump to #R$E82C if #REGb is equal to #N$02.
 $E81D CP $02        ;
 $E81F JR Z,$E82C    ; }
 $E821 LD A,($E766)  ; {Write *#R$E766 to *#REGhl.
 $E824 LD (HL),A     ; }
 $E825 INC HL        ; Increment #REGhl by one.
 $E826 LD A,($E767)  ; {Write *#R$E767 to *#REGhl.
 $E829 LD (HL),A     ; }
 $E82A JR $E837      ; Jump to #R$E837.
*$E82C LD A,(HL)     ; {Write *#REGhl to *#R$E766.
 $E82D LD ($E766),A  ; }
 $E830 LD (HL),E     ; Write #REGe to *#REGhl.
 $E831 INC HL        ; Increment #REGhl by one.
 $E832 LD A,(HL)     ; {Write *#REGhlto *#R$E767.
 $E833 LD ($E767),A  ; }
 $E836 LD (HL),E     ; Write #REGe to *#REGhl.
*$E837 BIT 3,D       ; Test bit 3 of #REGd.
 $E839 JP Z,$E8BC    ; Jump to #R$E8BC if #REGhl is zero.
 $E83C LD A,($E762)  ; {#REGb=*#R$E762.
 $E83F LD B,A        ; }
 $E840 LD A,($E765)  ; {#REGc=*#R$E765.
 $E843 LD C,A        ; }
 $E844 CALL $E992    ; Call #R$E992.
 $E847 POP BC        ; Restore #REGbc from the stack.
 $E848 PUSH BC       ; Stash #REGbc on the stack.
 $E849 LD A,B        ; {Jump to #R$E854 if #REGb is equal to #N$02.
 $E84A CP $02        ;
 $E84C JR Z,$E854    ; }
 $E84E LD A,($E768)  ; {Write *#R$E768 to *#REGhl.
 $E851 LD (HL),A     ; }
 $E852 JR $E859      ; Jump to #R$E859.
*$E854 LD A,(HL)     ; {Write *#REGhl to *#R$E768.
 $E855 LD ($E768),A  ; }
 $E858 LD (HL),E     ; Write #REGe to *#REGhl.
*$E859 BIT 3,D       ; Test bit 3 of #REGd.
 $E85B JR Z,$E8BC    ; Jump to #R$E8BC if #REGa is zero.
 $E85D LD A,($E75D)  ; {#REGb=*#R$E75D.
 $E860 LD B,A        ; }
 $E861 LD A,($E765)  ; {#REGc=*#R$E765.
 $E864 LD C,A        ; }
 $E865 CALL $E992    ; Call #R$E992.
 $E868 POP BC        ; Restore #REGbc from the stack.
 $E869 PUSH BC       ; Stash #REGbc on the stack.
 $E86A LD A,B        ; {Jump to #R$E885 if #REGb is equal to #N$02.
 $E86B CP $02        ;
 $E86D JR Z,$E885    ; }
 $E86F LD A,($E769)  ; {Write *#R$E769 to *#REGhl.
 $E872 LD (HL),A     ; }
 $E873 LD A,($E75D)  ; {#REGb=*#R$E75D.
 $E876 LD B,A        ; }
 $E877 INC B         ; Increment #REGb by one.
 $E878 LD A,($E765)  ; {#REGc=*#R$E765.
 $E87B LD C,A        ; }
 $E87C CALL $E992    ; Call #R$E992.
 $E87F LD A,($E76A)  ; {Write *#R$E76A to *#REGhl.
 $E882 LD (HL),A     ; }
 $E883 JR $E89B      ; Jump to #R$E89B.
*$E885 LD A,(HL)     ; {Write *#REGhl to *#R$E769.
 $E886 LD ($E769),A  ; }
 $E889 LD (HL),E     ; Write #REGe to *#REGhl.
 $E88A LD A,($E75D)  ; {#REGb=*#R$E75D.
 $E88D LD B,A        ; }
 $E88E INC B         ; Increment #REGb by one.
 $E88F LD A,($E765)  ; {#REGc=*#R$E765.
 $E892 LD C,A        ; }
 $E893 CALL $E992    ; Call #R$E992.
 $E896 LD A,(HL)     ; {Write *#REGhl to *#R$E76A.
 $E897 LD ($E76A),A  ; }
 $E89A LD (HL),E     ; Write #REGe to *#REGhl.
*$E89B BIT 2,D       ; Test bit 2 of #REGd.
 $E89D JR Z,$E90A    ; Jump to #R$E90A if #REGb is zero.
 $E89F LD A,($E763)  ; {#REGb=*#R$E763.
 $E8A2 LD B,A        ; }
 $E8A3 LD A,($E765)  ; {#REGc=*#R$E765.
 $E8A6 LD C,A        ; }
 $E8A7 CALL $E992    ; Call #R$E992.
 $E8AA POP BC        ; Restore #REGbc from the stack.
 $E8AB PUSH BC       ; Stash #REGbc on the stack.
 $E8AC LD A,B        ; {Jump to #R$E8B7 if #REGb is equal to #N$02.
 $E8AD CP $02        ;
 $E8AF JR Z,$E8B7    ; }
 $E8B1 LD A,($E76B)  ; {Write *#R$E76B to *#REGhl.
 $E8B4 LD (HL),A     ; }
 $E8B5 JR $E8BC      ; Jump to #R$E8BC.
*$E8B7 LD A,(HL)     ; {Write *#REGhl to *#R$E76B.
 $E8B8 LD ($E76B),A  ; }
 $E8BB LD (HL),E     ; Write #REGe to *#REGhl.
*$E8BC BIT 2,D       ; Test bit 2 of #REGd.
 $E8BE JR Z,$E90A    ; Jump to #R$E90A if #REGa is zero.
 $E8C0 LD A,($E763)  ; {#REGb=*#R$E763.
 $E8C3 LD B,A        ; }
 $E8C4 LD A,($E75E)  ; {#REGc=*#R$E75E.
 $E8C7 LD C,A        ; }
 $E8C8 CALL $E992    ; Call #R$E992.
 $E8CB POP BC        ; Restore #REGbc from the stack.
 $E8CC PUSH BC       ; Stash #REGbc on the stack.
 $E8CD LD A,B        ; {Jump to #R$E8DD if #REGb is equal to #N$02.
 $E8CE CP $02        ;
 $E8D0 JR Z,$E8DD    ; }
 $E8D2 LD A,($E76C)  ; {Write *#R$E76C to *#REGhl.
 $E8D5 LD (HL),A     ; }
 $E8D6 INC HL        ; Increment #REGhl by one.
 $E8D7 LD A,($E76D)  ; {Write *#R$E76D to *#REGhl.
 $E8DA LD (HL),A     ; }
 $E8DB JR $E8E8      ; Jump to #R$E8E8.
*$E8DD LD A,(HL)     ; {Write *#REGhl to *#R$E76C.
 $E8DE LD ($E76C),A  ; }
 $E8E1 LD (HL),E     ; Write #REGe to *#REGhl.
 $E8E2 INC HL        ; Increment #REGhl by one.
 $E8E3 LD A,(HL)     ; {Write *#REGhl to *#R$E76D.
 $E8E4 LD ($E76D),A  ; }
 $E8E7 LD (HL),E     ; Write #REGe to *#REGhl.
*$E8E8 BIT 4,D       ; Test bit 4 of #REGd.
 $E8EA JP Z,$E96D    ; Jump to #R$E96D if #REGhl is zero.
 $E8ED LD A,($E763)  ; {#REGb=*#R$E763.
 $E8F0 LD B,A        ; }
 $E8F1 LD A,($E764)  ; {#REGc=*#R$E764.
 $E8F4 LD C,A        ; }
 $E8F5 CALL $E992    ; Call #R$E992.
 $E8F8 POP BC        ; Restore #REGbc from the stack.
 $E8F9 PUSH BC       ; Stash #REGbc on the stack.
 $E8FA LD A,B        ; {Jump to #R$E905 if #REGb is equal to #N$02.
 $E8FB CP $02        ;
 $E8FD JR Z,$E905    ; }
 $E8FF LD A,($E76E)  ; {Write *#R$E76E to *#REGhl.
 $E902 LD (HL),A     ; }
 $E903 JR $E90A      ; Jump to #R$E90A.
*$E905 LD A,(HL)     ; {Write *#REGhl to *#R$E76E.
 $E906 LD ($E76E),A  ; }
 $E909 LD (HL),E     ; Write #REGe to *#REGhl.
*$E90A BIT 4,D       ; Test bit 4 of #REGd.
 $E90C JR Z,$E96D    ; Jump to #R$E96D if #REGa is zero.
 $E90E LD A,($E75D)  ; {#REGb=*#R$E75D.
 $E911 LD B,A        ; }
 $E912 LD A,($E764)  ; {#REGc=*#R$E764.
 $E915 LD C,A        ; }
 $E916 CALL $E992    ; Call #R$E992.
 $E919 POP BC        ; Restore #REGbc from the stack.
 $E91A PUSH BC       ; Stash #REGbc on the stack.
 $E91B LD A,B        ; {Jump to #R$E936 if #REGb is equal to #N$02.
 $E91C CP $02        ;
 $E91E JR Z,$E936    ; }
 $E920 LD A,($E76F)  ; {Write *#R$E76F to *#REGhl.
 $E923 LD (HL),A     ; }
 $E924 LD A,($E75D)  ; {#REGb=*#R$E75D.
 $E927 LD B,A        ; }
 $E928 INC B         ; Increment #REGb by one.
 $E929 LD A,($E764)  ; {#REGc=*#R$E764.
 $E92C LD C,A        ; }
 $E92D CALL $E992    ; Call #R$E992.
 $E930 LD A,($E770)  ; {Write *#R$E770 to *#REGhl.
 $E933 LD (HL),A     ; }
 $E934 JR $E94C      ; Jump to #R$E94C.
*$E936 LD A,(HL)     ; {Write *#REGhl to *#R$E76F.
 $E937 LD ($E76F),A  ; }
 $E93A LD (HL),E     ; Write #REGe to *#REGhl.
 $E93B LD A,($E75D)  ; {#REGb=*#R$E75D.
 $E93E LD B,A        ; }
 $E93F INC B         ; Increment #REGb by one.
 $E940 LD A,($E764)  ; {#REGc=*#R$E764.
 $E943 LD C,A        ; }
 $E944 CALL $E992    ; Call #R$E992.
 $E947 LD A,(HL)     ; {Write *#REGhl to *#R$E770.
 $E948 LD ($E770),A  ; }
 $E94B LD (HL),E     ; Write #REGe to *#REGhl.
*$E94C BIT 1,D       ; Test bit 1 of #REGd.
 $E94E JR Z,$E96D    ; Jump to #R$E96D if #REGb is zero.
 $E950 LD A,($E762)  ; {#REGb=*#R$E762.
 $E953 LD B,A        ; }
 $E954 LD A,($E764)  ; {#REGc=*#R$E764.
 $E957 LD C,A        ; }
 $E958 CALL $E992    ; Call #R$E992.
 $E95B POP BC        ; Restore #REGbc from the stack.
 $E95C PUSH BC       ; Stash #REGbc on the stack.
 $E95D LD A,B        ; {Jump to #R$E968 if #REGb is equal to #N$02.
 $E95E CP $02        ;
 $E960 JR Z,$E968    ; }
 $E962 LD A,($E771)  ; {Write *#R$E771 to *#REGhl.
 $E965 LD (HL),A     ; }
 $E966 JR $E96D      ; Jump to #R$E96D.
*$E968 LD A,(HL)     ; {Write *#REGhl to *#R$E771.
 $E969 LD ($E771),A  ; }
 $E96C LD (HL),E     ; Write #REGe to *#REGhl.
*$E96D LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $E96F LD L,A        ; #REGl=#REGa.
 $E970 LD H,$0A      ; #REGh=#N$0A.
 $E972 LD A,($E763)  ; {#REGb=*#R$E763.
 $E975 LD B,A        ; }
 $E976 LD A,$18      ; #REGa=#N$18.
 $E978 SUB B         ; #REGa-=#REGb.
 $E979 LD B,A        ; #REGb=#REGa.
*$E97A LD A,(HL)     ; #REGa=*#REGhl.
 $E97B AND %00011000 ; Keep only bits 3-4.
 $E97D OR %00000101  ; Set bits 0, 2.
 $E97F OUT ($FE),A   ; Set border to the colour held by #REGa.
 $E981 INC HL        ; Increment #REGhl by one.
 $E982 DJNZ $E97A    ; Decrease counter by one and loop back to #R$E97A until
                     ; counter is zero.
 $E984 POP BC        ; Restore #REGbc from the stack.
 $E985 LD A,B        ; #REGa=#REGb.
 $E986 CP $02        ; {Jump to #R$E98B if #REGa is not equal to #N$02.
 $E988 JR NZ,$E98B   ; }
 $E98A HALT          ; Halt operation (suspend CPU until the next interrupt).
*$E98B DEC B         ; Decrease #REGb by one.
 $E98C JP NZ,$E80A   ; Jump to #R$E80A if #REGb is not zero.
 $E98F JP $E7CC      ; Jump to #R$E7CC.
*$E992 LD A,B        ; #REGa=#REGb.
 $E993 SRA A         ; {Shift #REGa right three positions (with carry).
 $E995 SRA A         ;
 $E997 SRA A         ; }
 $E999 ADD A,$58     ; #REGa+=#N$58.
 $E99B LD H,A        ; #REGh=#REGa.
 $E99C LD A,B        ; #REGa=#REGb.
 $E99D AND %00000111 ; Keep only bits 0-2.
 $E99F RRCA          ; {RRCA.
 $E9A0 RRCA          ;
 $E9A1 RRCA          ; }
 $E9A2 ADD A,C       ; #REGa+=#REGc.
 $E9A3 LD L,A        ; #REGl=#REGa.
 $E9A4 RET           ; Return.

; Routine at E9A5
;
; Used by the routines at #R$D352 and #R$E775.
c$E9A5 LD A,R        ; {#REGl=the contents of the Memory Refresh Register.
 $E9A7 LD L,A        ; }
 $E9A8 LD H,$01      ; #REGh=#N$01.
 $E9AA LD B,$64      ; #REGb=#N$64.
*$E9AC LD A,(HL)     ; #REGa=*#REGhl.
 $E9AD AND %00011000 ; Keep only bits 3-4.
 $E9AF OR %00000101  ; Set bits 0, 2.
 $E9B1 OUT ($FE),A   ; Send to the speaker.
 $E9B3 INC HL        ; Increment #REGhl by one.
 $E9B4 LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $E9B6 INC A         ; Increment #REGa by one.
 $E9B7 RLCA          ; RLCA.
 $E9B8 LD E,A        ; #REGe=#REGa.
*$E9B9 DEC E         ; Decrease #REGe by one.
 $E9BA JR NZ,$E9B9   ; Jump to #R$E9B9 if #REGe is not zero.
 $E9BC DJNZ $E9AC    ; Decrease counter by one and loop back to #R$E9AC until
                     ; counter is zero.
 $E9BE RET           ; Return.

; Routine at E9BF
;
; Used by the routine at #R$D894.
c$E9BF LD HL,$D827   ; #REGhl=#R$D827.
 $E9C2 INC (HL)      ; Increment *#REGhl by one.
 $E9C3 LD HL,($D872) ; #REGhl=*#R$D872.
 $E9C6 DEC HL        ; {Decrease #REGhl by two.
 $E9C7 DEC HL        ; }
 $E9C8 LD ($D872),HL ; Write #REGhl to *#R$D872.
 $E9CB LD (HL),$28   ; Write #COLOUR$28 to *#REGhl.
 $E9CD INC HL        ; Increment #REGhl by one.
 $E9CE LD (HL),$28   ; Write #N$28 to *#REGhl.
 $E9D0 LD DE,$001F   ; {#REGhl+=#N($001F,$04,$04).
 $E9D3 ADD HL,DE     ; }
 $E9D4 LD (HL),$28   ; Write #N$28 to *#REGhl.
 $E9D6 INC HL        ; Increment #REGhl by one.
 $E9D7 LD (HL),$28   ; Write #N$28 to *#REGhl.
 $E9D9 RET           ; Return.

; Routine at E9DA
;
; Used by the routines at #R$D352, #R$D894 and #R$F39E.
c$E9DA LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $E9DC PUSH AF       ; Stash #REGaf on the stack.
 $E9DD DI            ; Disable interrupts.
 $E9DE LD B,$02      ; #REGb=#N$02.
*$E9E0 PUSH BC       ; Stash #REGbc on the stack.
 $E9E1 LD BC,$1388   ; #REGbc=#N($1388,$04,$04).
*$E9E4 DEC BC        ; Decrease #REGbc by one.
 $E9E5 LD A,B        ; {Jump to #R$E9E4 if #REGbc is not zero.
 $E9E6 OR C          ;
 $E9E7 JR NZ,$E9E4   ; }
 $E9E9 LD HL,$5800   ; #REGhl=#N$5800 (screen buffer location).
 $E9EC LD BC,$0300   ; #REGbc=#N($0300,$04,$04).
*$E9EF LD A,(HL)     ; #REGa=*#REGhl.
 $E9F0 XOR %01111111 ; Flip bits 0-6.
 $E9F2 LD (HL),A     ; Write #REGa to *#REGhl.
 $E9F3 INC HL        ; Increment #REGhl by one.
 $E9F4 DEC BC        ; Decrease #REGbc by one.
 $E9F5 LD A,B        ; {Jump to #R$E9EF if #REGbc is not zero.
 $E9F6 OR C          ;
 $E9F7 JR NZ,$E9EF   ; }
 $E9F9 POP BC        ; Restore #REGbc from the stack.
 $E9FA DJNZ $E9E0    ; Decrease counter by one and loop back to #R$E9E0 until
                     ; counter is zero.
 $E9FC POP AF        ; Restore #REGaf from the stack.
 $E9FD RET PO        ; Return if #REGbc is odd.
 $E9FE EI            ; Enable interrupts.
 $E9FF RET           ; Return.

; Print Bonus
;
; Used by the routines at #R$D2A1, #R$D352 and #R$D894.
@label=Print_Bonus
c$EA00 LD B,$11       ; #REGb=#N$11.
 $EA02 LD C,$18       ; #REGc=#N$18.
 $EA04 LD DE,$D83F    ; #REGde=#R$D83F.
 $EA07 LD A,$06       ; #REGa=#N$06.
 $EA09 LD IX,$D83A    ; #REGix=#R$D83A.
 $EA0D RES 1,(IX+$00) ; Reset bit 1 of *#REGix+#N$00.
 $EA11 JP $DB2E       ; Jump to #R$DB2E.

; Print Score
;
; Used by the routines at #R$D2A1 and #R$D894.
@label=Print_Score
c$EA14 LD B,$13       ; #REGb=#N$13.
 $EA16 LD C,$18       ; #REGc=#N$18.
 $EA18 CALL $DCC2     ; Call #R$DCC2.
 $EA1B INC H          ; {Increment #REGh by four.
 $EA1C INC H          ;
 $EA1D INC H          ;
 $EA1E INC H          ; }
 $EA1F LD DE,$D874    ; #REGde=#R$D874.
 $EA22 LD IX,$D83A    ; #REGix=#R$D83A.
 $EA26 SET 1,(IX+$00) ; Set bit 1 of *#REGix+#N$00.
 $EA2A LD B,$03       ; Set the number of digits to display: #N$03.
 $EA2C JP $DB35       ; Jump to #R$DB35.

; Print Level
;
; Used by the routine at #R$D2A1.
@label=Print_Level
c$EA2F LD B,$0E       ; #REGb=#N$0E.
 $EA31 LD C,$1C       ; #REGc=#N$1C.
 $EA33 CALL $DCC2     ; Call #R$DCC2.
 $EA36 INC H          ; {Increment #REGh by four.
 $EA37 INC H          ;
 $EA38 INC H          ;
 $EA39 INC H          ; }
 $EA3A LD DE,$D86E    ; #REGde=#R$D86E.
 $EA3D LD IX,$D83A    ; #REGix=#R$D83A.
 $EA41 SET 1,(IX+$00) ; Set bit 1 of *#REGix+#N$00.
 $EA45 LD B,$01       ; #REGb=#N$01.
 $EA47 JP $DB35       ; Jump to #R$DB35.

; Handler: Main Menu
;
; Used by the routine at #R$D1D0.
;
; .
;
; #PUSHS
; #UDGTABLE
; {
; #SIM(start=$D1BF,stop=$D1DB)#SIM(start=$EA4A,stop=$EAFB)#SCR$02(main-menu-cursor)
; }
; UDGTABLE#
; #POPS
@label=Handler_MainMenu
c$EA4A LD DE,$D874     ; #REGde=#R$D874.
 $EA4D LD HL,$D86F     ; #REGhl=#R$D86F.
 $EA50 LD A,(DE)       ; Load the first byte of the current score.
 $EA51 SUB (HL)        ; Compare it with the first byte of the high score.
 $EA52 JP M,$EA62      ; Jump to #R$EA62 if the current score digit is less than the high
                       ; score digit.
; It's a new high score! Update what's stored.
 $EA55 LD A,(DE)       ; {Write the first score digit to the first highscore
 $EA56 LD (HL),A       ; digit.}
 $EA57 INC DE          ; Increment the current score pointer by one.
 $EA58 INC HL          ; Increment the high score pointer by one.
 $EA59 JR NZ,$EA60     ; Jump to #R$EA60 until the score digit is zero.
 $EA5B LD A,(DE)       ; Load the second byte of the current score.
 $EA5C SUB (HL)        ; Compare it with the second byte of the high score.
 $EA5D JP M,$EA62      ; Jump to #R$EA62 if the current score digit is less than the high
                       ; score digit.
@label=UpdateHighScore
*$EA60 LD A,(DE)       ; {Write the second score digit to the second highscore
 $EA61 LD (HL),A       ; digit.}
; Print the score of the last game and the high score.
@label=Print_Score/HighScore
*$EA62 LD B,$13        ; Set the X co-ordinate for the score display.
 $EA64 LD C,$0E        ; Set the Y co-ordinate for the score display.
 $EA66 LD DE,$D874     ; #REGde=#R$D874.
 $EA69 LD A,$06        ; Set the number of digits to print in #REGa.
 $EA6B CALL $DB2E      ; Call #R$DB2E.
 $EA6E LD B,$15        ; Set the X co-ordinate for the high score display.
 $EA70 LD C,$0E        ; Set the Y co-ordinate for the high score display.
 $EA72 LD DE,$D86F     ; #REGde=#R$D86F.
 $EA75 LD A,$06        ; Set the number of digits to print in #REGa.
 $EA77 CALL $DB2E      ; Call #R$DB2E.
; Initialise the cursor/ pointer which highlights the currently selected
; menu item.
 $EA7A LD IX,($D877)   ; #REGix=*#R$D877.
 $EA7E LD HL,$EB38     ; #REGhl=#R$EB38.
 $EA81 JR $EAE7        ; Jump to #R$EAE7.
; Maybe a debounce loop?
@label=Debounce_Loop
*$EA83 XOR A           ; {Get the player input from ALL half-rows (i.e. all the
 $EA84 IN A,($FE)      ; keys).}
 $EA86 CPL             ; Invert the bits in #REGa.
 $EA87 AND %00011111   ; Keep only bits 0-4.
 $EA89 JR NZ,$EA83     ; Jump to #R$EA83 if #REGhl is not zero.
; Get the player input.
@label=MainMenuInput_Loop
*$EA8B LD A,$F7        ; {Read from the keyboard;
 $EA8D IN A,($FE)      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                       ; { =h,r2 Port Number | =h,c5 Bit }
                       ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                       ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                       ; TABLE#}
 $EA8F CPL             ; Invert the bits in #REGa.
 $EA90 AND %00011111   ; Mask for the key bits.
 $EA92 JR Z,$EA8B      ; Jump back to #R$EA8B if no keys are being pressed.
; Check which key was pressed and handle accordingly.
; .
; Handle "KEYBOARD" being selected.
 $EA94 RRA             ; {Jump to #R$EAA8 if "1" was not pressed.
 $EA95 JR NC,$EAA8     ; }
 $EA97 LD A,$01        ; {Jump back to #R$EA83 if this menu item is already
 $EA99 CP (HL)         ; selected.
 $EA9A JR Z,$EA83      ; }
 $EA9C CALL $EAFD      ; Call #R$EAFD.
 $EA9F LD IX,$5843     ; Set the screen position for this option in #REGix.
 $EAA3 LD DE,$EB64     ; Set the address of the input control routine for this
                       ; option in #REGde (#R$EB64).
 $EAA6 JR $EAE2        ; Jump to #R$EAE2.
; Handle "KEMPSTON" being selected.
@label=MainMenuInput_Kempston
*$EAA8 RRA             ; {Jump to #R$EABC if "2" was not pressed.
 $EAA9 JR NC,$EABC     ; }
 $EAAB LD A,$02        ; {Jump back to #R$EA83 if this menu item is already
 $EAAD CP (HL)         ; selected.
 $EAAE JR Z,$EA83      ; }
 $EAB0 CALL $EAFD      ; Call #R$EAFD.
 $EAB3 LD IX,$58A3     ; Set the screen position for this option in #REGix.
 $EAB7 LD DE,$EB98     ; Set the address of the input control routine for this
                       ; option in #REGde (#R$EB98).
 $EABA JR $EAE2        ; Jump to #R$EAE2.
; Handle "CURSOR" being selected.
@label=MainMenuInput_Cursor
*$EABC RRA             ; {Jump to #R$EAD0 if "3" was not pressed.
 $EABD JR NC,$EAD0     ; }
 $EABF LD A,$03        ; {Jump back to #R$EA83 if this menu item is already
 $EAC1 CP (HL)         ; selected.
 $EAC2 JR Z,$EA83      ; }
 $EAC4 CALL $EAFD      ; Call #R$EAFD.
 $EAC7 LD IX,$5903     ; Set the screen position for this option in #REGix.
 $EACB LD DE,$EB9E     ; Set the address of the input control routine for this
                       ; option in #REGde (#R$EB9E).
 $EACE JR $EAE2        ; Jump to #R$EAE2.
; Handle "SINCLAIR" being selected.
@label=MainMenuInput_Sinclair
*$EAD0 RRA             ; {Jump to #R$EB0E if "4" was not pressed.
 $EAD1 JR NC,$EB0E     ; }
 $EAD3 LD A,$04        ; {Jump back to #R$EA83 if this menu item is already
 $EAD5 CP (HL)         ; selected.
 $EAD6 JR Z,$EA83      ; }
 $EAD8 CALL $EAFD      ; Call #R$EAFD.
 $EADB LD IX,$5963     ; Set the screen position for this option in #REGix.
 $EADF LD DE,$EBCD     ; Set the address of the input control routine for this
                       ; option in #REGde (#R$EBCD).
; Update menu selection.
@label=UpdateMenuSelection
*$EAE2 LD (HL),A       ; Write the selected menu item to *#R$EB38.
 $EAE3 LD ($EB36),DE   ; Write the address of the input control routine to
                       ; *#R$EB36.
; Point to selected menu item.
@label=HighlightSelectedMenuItem
*$EAE7 LD (IX+$00),$45 ; {Write #COLOUR$45 to: #TABLE(default,centre,centre)
 $EAEB LD (IX+$01),$45 ; { =h Offset | =h Position }
                       ; { *#REGix+#N$00 | Top-left }
                       ; { *#REGix+#N$01 | Top-right }
                       ; TABLE#}
 $EAEF LD (IX+$20),$05 ; {Write #COLOUR$05 to: #TABLE(default,centre,centre)
 $EAF3 LD (IX+$21),$05 ; { =h Offset | =h Position }
                       ; { *#REGix+#N$20 | Bottom-left }
                       ; { *#REGix+#N$21 | Bottom-right }
                       ; TABLE#}
 $EAF7 LD ($D877),IX   ; Write #REGix to #R$D877.
 $EAFB JR $EA83        ; Jump to #R$EA83.
; Clear previous selected menu item.
@label=ClearSelectedMenuItem
*$EAFD LD (IX+$00),$00 ; {Write #COLOUR$00 to: #TABLE(default,centre,centre)
 $EB01 LD (IX+$01),$00 ; { =h Offset | =h Position }
 $EB05 LD (IX+$20),$00 ; { *#REGix+#N$00 | Top-left }
 $EB09 LD (IX+$21),$00 ; { *#REGix+#N$01 | Top-right }
                       ; { *#REGix+#N$20 | Bottom-left }
                       ; { *#REGix+#N$21 | Bottom-right }
                       ; TABLE#}
 $EB0D RET             ; Return.
; Note; there's no need for the "not pressed" check, as there are only five
; options.
; .
; Handle "START GAME" being selected.
; .
; #PUSHS
; #UDGTABLE
; {
; #SIM(start=$D1BF,stop=$D1DB)#SIM(start=$EA4A,stop=$EAFB)#SIM(start=$EB0E,stop=$EB24)#SCR$02(good-luck)
; }
; UDGTABLE#
; #POPS
; .
; Uncover the "Good Luck" messaging (it's already present, just black on
; black).
@label=MainMenuInput_StartGame
*$EB0E LD HL,$5A36     ; #REGhl=#N$5A36 (attribute buffer location).
 $EB11 LD DE,$0020     ; #REGde=#N($0020,$04,$04).
 $EB14 LD B,$04        ; Set a counter in #REGb for the number of rows to
                       ; process.
@label=GoodLuck_OuterLoop
*$EB16 PUSH BC         ; Stash the row counter on the stack.
 $EB17 LD B,$08        ; Set a counter in #REGb for the width of the messaging.
 $EB19 PUSH HL         ; Stash the starting position in the attribute buffer on
                       ; the stack.
@label=GoodLuck_InnerLoop
*$EB1A LD (HL),$47     ; Write #COLOUR$47 to *#REGhl.
 $EB1C INC HL          ; Increment attribute buffer screen position by one.
 $EB1D DJNZ $EB1A      ; Decrease width counter by one and loop back to #R$EB1A until all
                       ; the width has been coloured.
 $EB1F POP HL          ; Restore the attribute buffer starting position from
                       ; the stack.
 $EB20 ADD HL,DE       ; #REGhl+=#N($0020,$04,$04) (move down one row).
 $EB21 POP BC          ; Restore the row counter from the stack.
 $EB22 DJNZ $EB16      ; Decrease the row counter by one and loop back to #R$EB16 until the
                       ; row counter is zero.
 $EB24 LD HL,$EB39     ; {Write #N$01 to #R$EB39.
 $EB27 LD (HL),$01     ; }
 $EB29 PUSH HL         ; Stash #R$EB39 on the stack.
 $EB2A LD HL,$EB3A     ; #REGhl=#R$EB3A.
 $EB2D LD B,$0E        ; #REGb=#N$0E.
 $EB2F CALL $EF4A      ; Call #R$EF4A.
 $EB32 POP HL          ; Restore #REGhl from the stack.
 $EB33 LD (HL),$00     ; Write #N$00 to *#REGhl.
 $EB35 RET             ; Return.

; Input Control Pointer
;
; Will point to one of:
; #TABLE(default,centre,centre)
; { =h Control Method | =h Address }
; { Keyboard | #R$EB64 }
; { Kempston | #R$EB98 }
; { Cursor | #R$EB9E }
; { Sinclair | #R$EBCD }
; TABLE#
@label=Pointer_InputControl
g$EB36 DEFW $EB64

; Selected Menu Item
;
; Populated by the routine at #R$EA4A (#R$EAE2).
; #TABLE(default,centre,centre)
; { =h Byte | =h Meaning }
; { #N$01 | Keyboard }
; { #N$02 | Kempston }
; { #N$03 | Cursor }
; { #N$04 | Sinclair }
; TABLE#
@label=SelectedMenuItem
g$EB38 DEFB $01

; Game status buffer entry at EB39
g$EB39 DEFB $00

; Game status buffer entry at EB3A
g$EB3A DEFB $09,$10,$09,$12,$09,$10,$09,$13
 $EB42 DEFB $09,$10,$09,$12,$09,$10,$09,$13
 $EB4A DEFB $09,$10,$09,$12,$09,$10,$09,$0E
 $EB52 DEFB $09,$10,$24,$0B

; Handler: Get Player Input
;
; Used by the routines at #R$D894, #R$E352, #R$EF4A and #R$F39E.
@label=Handler_PlayerInput
c$EB56 PUSH HL       ; {Stash #REGhl and #REGix on the stack.
 $EB57 PUSH IX       ; }
 $EB59 LD HL,$E5B2   ; #REGhl=#R$E5B2.
 $EB5C LD IX,($EB36) ; #REGix=*#R$EB36.
 $EB60 LD (HL),$00   ; Initialise *#R$E5B2 to "no input" (#N$00).
 $EB62 JP (IX)       ; Jump to the input control routine address held in
                     ; *#REGix.

; Input Handler: Keyboard
;
; .
;
;   HL Points to #R$E5B2
;   IX Points to this routine
; O:A The control byte
;
; All the handlers match the outputs of the Kempston Joystick:
; #TABLE(default,centre,centre,centre)
; { =h Byte | =h Bits | =h Action }
; { #N$01 | #EVAL($01,$02,$08) | Right }
; { #N$02 | #EVAL($02,$02,$08) | Left }
; { #N$04 | #EVAL($04,$02,$08) | Down }
; { #N$08 | #EVAL($08,$02,$08) | Up }
; { #N$10 | #EVAL($10,$02,$08) | Fire }
; TABLE#
@label=InputHandler_Keyboard
c$EB64 LD A,$DF      ; {Read from the keyboard;
 $EB66 IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$DF | P | O | I | U | Y }
                     ; TABLE#}
; If "right" has been pressed, add #N$01 to *#REGhl.
 $EB68 RRA           ; {Jump to #R$EB6C if "P" (right) is not being pressed.
 $EB69 JR C,$EB6C    ; }
 $EB6B INC (HL)      ; Increment *#REGhl by one.
; If "left" has been pressed, add #N$02 to *#REGhl.
@label=Keyboard_CheckLeft
*$EB6C RRA           ; {Jump to #R$EB71 if "O" (left) is not being pressed.
 $EB6D JR C,$EB71    ; }
 $EB6F INC (HL)      ; {Increment *#REGhl by two.
 $EB70 INC (HL)      ; }
@label=Keyboard_CheckUp
*$EB71 LD A,$FB      ; {Read from the keyboard;
 $EB73 IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FB | Q | W | E | R | T }
                     ; TABLE#}
 $EB75 RRA           ; {Jump to #R$EB7C if "Q" (up) is not being pressed.
 $EB76 JR C,$EB7C    ; }
 $EB78 LD A,$08      ; {Add #N$08 to *#REGhl and write it back.
 $EB7A ADD A,(HL)    ;
 $EB7B LD (HL),A     ; }
; If "down" has been pressed, add #N$04 to *#REGhl.
@label=Keyboard_CheckDown
*$EB7C LD A,$FD      ; {Read from the keyboard;
 $EB7E IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FD | A | S | D | F | G }
                     ; TABLE#}
 $EB80 RRA           ; {Jump to #R$EB87 if "A" (down) is not being pressed.
 $EB81 JR C,$EB87    ; }
 $EB83 LD A,$04      ; {Add #N$04 to *#REGhl and write it back.
 $EB85 ADD A,(HL)    ;
 $EB86 LD (HL),A     ; }
; If "fire" has been pressed, add #N$10 to *#REGhl.
; .
; Note; ALL these keys are fire button keys.
@label=Keyboard_CheckFire
*$EB87 LD A,$7E      ; {Read from the keyboard;
 $EB89 IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { =r2 #N$7E | SPACE | FULL-STOP | M | N | B }
                     ; { Shift | Z | X | C | V }
                     ; TABLE#}
 $EB8B CPL           ; Invert the bits in #REGa.
 $EB8C AND %00011111 ; Keep only the key bits 0-4.
 $EB8E JP Z,$EBF5    ; Jump to #R$EBF5 if none of the fire keys are being
                     ; pressed.
 $EB91 LD A,$10      ; {Add #N$10 to *#REGhl and write it back.
 $EB93 ADD A,(HL)    ;
 $EB94 LD (HL),A     ; }
 $EB95 JP $EBF5      ; Jump to #R$EBF5.

; Input Handler: Kempston
;
; .
;
;   HL Points to #R$E5B2
;   IX Points to this routine
; O:A The control byte
;
; The outputs are:
; #TABLE(default,centre,centre,centre)
; { =h Byte | =h Bits | =h Action }
; { #N$01 | #EVAL($01,$02,$08) | Right }
; { #N$02 | #EVAL($02,$02,$08) | Left }
; { #N$04 | #EVAL($04,$02,$08) | Down }
; { #N$08 | #EVAL($08,$02,$08) | Up }
; { #N$10 | #EVAL($10,$02,$08) | Fire }
; TABLE#
@label=InputHandler_Kempston
c$EB98 IN A,($1F)    ; #REGa=read from the Kempston joystick port.
 $EB9A LD (HL),A     ; Write #REGa to *#REGhl.
 $EB9B JP $EBF5      ; Jump to #R$EBF5.

; Input Handler: Cursor
;
; .
;
;   HL Points to #R$E5B2
;   IX Points to this routine
; O:A The control byte
;
; All the handlers match the outputs of the Kempston Joystick:
; #TABLE(default,centre,centre,centre)
; { =h Byte | =h Bits | =h Action }
; { #N$01 | #EVAL($01,$02,$08) | Right }
; { #N$02 | #EVAL($02,$02,$08) | Left }
; { #N$04 | #EVAL($04,$02,$08) | Down }
; { #N$08 | #EVAL($08,$02,$08) | Up }
; { #N$10 | #EVAL($10,$02,$08) | Fire }
; TABLE#
@label=InputHandler_Cursor
c$EB9E LD A,$F7      ; {Read from the keyboard;
 $EBA0 IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
 $EBA2 CPL           ; Invert the bits in #REGa.
 $EBA3 AND %00010000 ; Keep only bit 4 ("5" i.e. left).
; If "left" has been pressed, add #N$02 to *#REGhl.
 $EBA5 JR Z,$EBA9    ; Jump to #R$EBA9 if "5" (left) is not being pressed.
 $EBA7 INC (HL)      ; {Increment *#REGhl by two.
 $EBA8 INC (HL)      ; }
@label=Cursor_CheckInputs
*$EBA9 LD A,$EF      ; {Read from the keyboard;
 $EBAB IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#}
; If "fire" has been pressed, add #N$10 to *#REGhl.
 $EBAD RRA           ; {Jump to #R$EBB6 if "0" (fire) is not being pressed.
 $EBAE JR C,$EBB6    ; }
 $EBB0 PUSH AF       ; Stash the inputs on the stack.
 $EBB1 LD A,$10      ; {Add #N$10 to *#REGhl and write it back.
 $EBB3 ADD A,(HL)    ;
 $EBB4 LD (HL),A     ; }
 $EBB5 POP AF        ; Restore the inputs from the stack.
; If "right" has been pressed, add #N$01 to *#REGhl.
@label=Cursor_CheckRight
*$EBB6 RRA           ; {Jump to #R$EBBB if "8" (right) is not being pressed.
 $EBB7 RRA           ;
 $EBB8 JR C,$EBBB    ; }
 $EBBA INC (HL)      ; Increment *#REGhl by one.
; If "up" has been pressed, add #N$08 to *#REGhl.
@label=Cursor_CheckUp
*$EBBB RRA           ; {Jump to #R$EBC4 if "7" (up) is not being pressed.
 $EBBC JR C,$EBC4    ; }
 $EBBE PUSH AF       ; Stash the inputs on the stack.
 $EBBF LD A,$08      ; {Add #N$08 to *#REGhl and write it back.
 $EBC1 ADD A,(HL)    ;
 $EBC2 LD (HL),A     ; }
 $EBC3 POP AF        ; Restore the inputs from the stack.
; If "down" has been pressed, add #N$04 to *#REGhl.
@label=Cursor_CheckDown
*$EBC4 RRA           ; {Jump to #R$EBF5 if "6" (down) is not being pressed.
 $EBC5 JR C,$EBF5    ; }
 $EBC7 LD A,$04      ; {Add #N$04 to *#REGhl and write it back.
 $EBC9 ADD A,(HL)    ;
 $EBCA LD (HL),A     ; }
 $EBCB JR $EBF5      ; Jump to #R$EBF5.

; Input Handler: Sinclair
;
; .
;
;   HL Points to #R$E5B2
;   IX Points to this routine
; O:A The control byte
;
; All the handlers match the outputs of the Kempston Joystick:
; #TABLE(default,centre,centre,centre)
; { =h Byte | =h Bits | =h Action }
; { #N$01 | #EVAL($01,$02,$08) | Right }
; { #N$02 | #EVAL($02,$02,$08) | Left }
; { #N$04 | #EVAL($04,$02,$08) | Down }
; { #N$08 | #EVAL($08,$02,$08) | Up }
; { #N$10 | #EVAL($10,$02,$08) | Fire }
; TABLE#
@label=InputHandler_Sinclair
c$EBCD LD A,$EF      ; {Read from the keyboard;
 $EBCF IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#}
; If "fire" has been pressed, add #N$10 to *#REGhl.
 $EBD1 RRA           ; {Jump to #R$EBDA if "0" (fire) is not being pressed.
 $EBD2 JR C,$EBDA    ; }
 $EBD4 PUSH AF       ; Stash the inputs on the stack.
 $EBD5 LD A,$10      ; {Add #N$10 to *#REGhl and write it back.
 $EBD7 ADD A,(HL)    ;
 $EBD8 LD (HL),A     ; }
 $EBD9 POP AF        ; Restore the inputs from the stack.
; If "up" has been pressed, add #N$08 to *#REGhl.
@label=Sinclair_CheckUp
*$EBDA RRA           ; {Jump to #R$EBE3 if "9" (up) is not being pressed.
 $EBDB JR C,$EBE3    ; }
 $EBDD PUSH AF       ; Stash the inputs on the stack.
 $EBDE LD A,$08      ; {Add #N$08 to *#REGhl and write it back.
 $EBE0 ADD A,(HL)    ;
 $EBE1 LD (HL),A     ; }
 $EBE2 POP AF        ; Restore the inputs from the stack.
; If "down" has been pressed, add #N$04 to *#REGhl.
@label=Sinclair_CheckDown
*$EBE3 RRA           ; {Jump to #R$EBEC if "8" (down) is not being pressed.
 $EBE4 JR C,$EBEC    ; }
 $EBE6 PUSH AF       ; Stash the inputs on the stack.
 $EBE7 LD A,$04      ; {Add #N$04 to *#REGhl and write it back.
 $EBE9 ADD A,(HL)    ;
 $EBEA LD (HL),A     ; }
 $EBEB POP AF        ; Restore the inputs from the stack.
; If "right" has been pressed, add #N$01 to *#REGhl.
@label=Sinclair_CheckRight
*$EBEC RRA           ; {Jump to #R$EBF0 if "7" (right) is not being pressed.
 $EBED JR C,$EBF0    ; }
 $EBEF INC (HL)      ; Increment *#REGhl by one.
; If "left" has been pressed, add #N$02 to *#REGhl.
@label=Sinclair_CheckLeft
*$EBF0 RRA           ; {Jump to #R$EBF5 if "6" (left) is not being pressed.
 $EBF1 JR C,$EBF5    ; }
 $EBF3 INC (HL)      ; {Increment *#REGhl by two.
 $EBF4 INC (HL)      ; }
; Continue on to #R$EBF5.

; Input Handler: Common
;
; Used by the routines at #R$EB64, #R$EB98, #R$EB9E and #R$EBCD.
;
; .
;
; Handle game controls which are common across all input control
; routines.
@label=InputHandler_Common
c$EBF5 POP IX        ; {Housekeeping; see #R$EB56. Restore #REGix and #REGhl
 $EBF7 POP HL        ; from the stack.}
 $EBF8 LD A,($D838)  ; {Jump to #R$EC35 if bit 7 of *#R$D838 is set.
 $EBFB BIT 7,A       ;
 $EBFD JR NZ,$EC35   ; }
; Handler for HOLD ("H").
 $EBFF LD A,$BF      ; {Read from the keyboard;
 $EC01 IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$BF | ENTER | L | K | J | H }
                     ; TABLE#}
 $EC03 RRA           ; {Jump to #R$EC1D if "H" (hold) is not being pressed.
 $EC04 RRA           ;
 $EC05 RRA           ;
 $EC06 RRA           ;
 $EC07 RRA           ;
 $EC08 JR C,$EC1D    ; }
 $EC0A LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $EC0C PUSH AF       ; Stash #REGaf on the stack.
 $EC0D DI            ; Disable interrupts.
; Handler for CONTINUE ("J").
@label=Common_CheckContinue
*$EC0E LD A,$BF      ; {Read from the keyboard;
 $EC10 IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$BF | ENTER | L | K | J | H }
                     ; TABLE#}
 $EC12 RRA           ; {Jump to #R$EC0E if "J" (continue) is not being pressed.
 $EC13 RRA           ;
 $EC14 RRA           ;
 $EC15 RRA           ;
 $EC16 JR C,$EC0E    ; }
 $EC18 POP AF        ; Restore #REGaf from the stack.
 $EC19 JP PO,$EC1D   ; Jump to #R$EC1D if  is odd.
 $EC1C EI            ; Enable interrupts.
; Handler for ABORT ("R" and "T" together).
@label=Common_CheckAbort
*$EC1D LD A,$FB      ; {Read from the keyboard;
 $EC1F IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FB | Q | W | E | R | T }
                     ; TABLE#}
 $EC21 RRA           ; {Jump to #R$EC35 if "R" (abort game - first key) is not
 $EC22 RRA           ; being pressed.
 $EC23 RRA           ;
 $EC24 RRA           ;
 $EC25 JR C,$EC35    ; }
 $EC27 RRA           ; {Jump to #R$EC35 if "T" (abort game - second key) is not
 $EC28 JR C,$EC35    ; being pressed.}
; Initiate a game abort, do some housekeeping.
 $EC2A POP IY        ; {Restore #REGiy from the stack FOUR times.
 $EC2C POP IY        ;
 $EC2E POP IY        ;
 $EC30 POP IY        ; }
 $EC32 JP $D1D0      ; Jump to #R$D1D0.
; Load the control byte into the accumulator for the return to the calling
; routine.
@label=Common_Continue
*$EC35 LD A,($E5B2)  ; #REGa=*#R$E5B2.
 $EC38 RET           ; Return.

; Colourise Preview Grid
;
; Used by the routines at #R$D1D0, #R$D2A1 and #R$D894.
;
; .
;
; Colours in the green checkerboard attribute pattern. Note, it doesn't
; alter the top row at all - only the rows which will have content in them.
@label=Colourise_PreviewGrid
c$EC39 LD B,$04      ; Set a counter in #REGb for #N$04 rows.
 $EC3B LD DE,$5896   ; #REGde=#N$5896 (attribute buffer location).
 $EC3E LD HL,$ECAF   ; #REGhl=#R$ECAF.
@label=PreviewGrid_RowCounter_Loop
*$EC41 PUSH BC       ; Stash the row counter on the stack.
 $EC42 LD B,$02      ; Set a counter in #REGb for #N$02 character blocks per
                     ; square.
@label=PreviewGrid_BlockCounter_Loop
*$EC44 PUSH BC       ; {Stash the block counter and the attribute reference
 $EC45 PUSH HL       ; pointer on the stack.}
 $EC46 LD BC,$000A   ; {Copy #N($000A,$04,$04) bytes from #REGhl to #REGde.
 $EC49 LDIR          ; }
 $EC4B LD HL,$0016   ; {#REGde+=#N($0016,$04,$04).
 $EC4E ADD HL,DE     ;
 $EC4F EX DE,HL      ; }
 $EC50 POP HL        ; {Restore the attribute reference pointer and the block
 $EC51 POP BC        ; counter from the stack.}
 $EC52 DJNZ $EC44    ; Decrease block counter by one and loop back to #R$EC44
                     ; until the block counter is zero.
 $EC54 POP BC        ; Restore the row counter from the stack.
; This is how it becomes checkered, we move the pointer forward by two
; (each block is two character blocks wide) and then it can alternate between
; the two attribute values. Although we copy #N$0A bytes - the data is actually
; #N$10 bytes long, to cope with this reference movement.
 $EC55 INC HL        ; {Increment the attribute reference pointer by two.
 $EC56 INC HL        ; }
 $EC57 DJNZ $EC41    ; Decrease the row counter by one and loop back to #R$EC41 until all
                     ; the rows have been coloured in.
 $EC59 RET           ; Return.

; Static Animation
;
; Used by the routine at #R$D2A1.
;
; .
;
; #PUSHS
; #UDGTABLE
; { #SIM(start=$D1F1,stop=$D1F7)#SIM(start=$EC5A,stop=$EC83)#SCR$02(static) }
; UDGTABLE#
; #POPS
@label=StaticAnimation
c$EC5A LD B,$4B      ; #REGb=#N$4B.
*$EC5C PUSH BC       ; Stash #REGbc on the stack.
 $EC5D LD B,$04      ; #REGb=#N$04.
 $EC5F LD C,$16      ; #REGc=#N$16.
*$EC61 LD A,R        ; #REGa=the contents of the Memory Refresh Register.
 $EC63 AND %00001111 ; Keep only bits 0-3.
 $EC65 LD D,A        ; #REGd=#REGa.
 $EC66 LD A,R        ; {#REGe=the contents of the Memory Refresh Register.
 $EC68 LD E,A        ; }
 $EC69 PUSH BC       ; Stash #REGbc on the stack.
 $EC6A CALL $DCC2    ; Call #R$DCC2.
 $EC6D EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $EC6E LD B,$08      ; #REGb=#N$08.
*$EC70 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EC71 PUSH DE       ; }
 $EC72 LD BC,$000A   ; #REGbc=#N($000A,$04,$04).
 $EC75 LDIR          ; LDIR.
 $EC77 POP DE        ; Restore #REGde from the stack.
 $EC78 INC D         ; Increment #REGd by one.
 $EC79 POP BC        ; Restore #REGbc from the stack.
 $EC7A DJNZ $EC70    ; Decrease counter by one and loop back to #R$EC70 until
                     ; counter is zero.
 $EC7C POP BC        ; Restore #REGbc from the stack.
 $EC7D INC B         ; Increment #REGb by one.
 $EC7E LD A,$0C      ; {Jump to #R$EC61 if #REGb is not equal to #N$0C.
 $EC80 CP B          ;
 $EC81 JR NZ,$EC61   ; }
 $EC83 LD H,$05      ; #REGh=#N$05.
 $EC85 LD BC,$012C   ; #REGbc=#N$012C.
*$EC88 LD A,(HL)     ; #REGa=*#REGhl.
 $EC89 AND %00011000 ; Keep only bits 3-4.
 $EC8B OR %00000101  ; Set bits 0, 2.
 $EC8D OUT ($FE),A   ; Set border to the colour held by #REGa.
 $EC8F INC HL        ; Increment #REGhl by one.
 $EC90 DEC BC        ; Decrease #REGbc by one.
 $EC91 LD A,B        ; {Jump to #R$EC88 if #REGbc is not zero.
 $EC92 OR C          ;
 $EC93 JR NZ,$EC88   ; }
 $EC95 POP BC        ; Restore #REGbc from the stack.
 $EC96 DJNZ $EC5C    ; Decrease counter by one and loop back to #R$EC5C until
                     ; counter is zero.
; Now clear the display.
 $EC98 LD HL,$5896   ; #REGhl=#N$5896 (attribute buffer location).
 $EC9B LD DE,$0020   ; #REGde=#N($0020,$04,$04).
 $EC9E LD B,$08      ; #REGb=#N$08.
*$ECA0 PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $ECA1 PUSH BC       ; }
 $ECA2 LD B,$0A      ; #REGb=#N$0A.
*$ECA4 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $ECA6 INC HL        ; Increment #REGhl by one.
 $ECA7 DJNZ $ECA4    ; Decrease counter by one and loop back to #R$ECA4 until
                     ; counter is zero.
 $ECA9 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $ECAA POP HL        ; }
 $ECAB ADD HL,DE     ; #REGhl+=#REGde.
 $ECAC DJNZ $ECA0    ; Decrease counter by one and loop back to #R$ECA0 until
                     ; counter is zero.
 $ECAE RET           ; Return.

; Attribute Data: Preview Grid
;
; Used by the routine at #R$EC39.
@label=AttributeData_PreviewGrid
b$ECAF DEFB $60      ; #COLOUR(#PEEK(#PC)).
 $ECB0 DEFB $60      ; #COLOUR(#PEEK(#PC)).
 $ECB1 DEFB $20      ; #COLOUR(#PEEK(#PC)).
 $ECB2 DEFB $20      ; #COLOUR(#PEEK(#PC)).
 $ECB3 DEFB $60      ; #COLOUR(#PEEK(#PC)).
 $ECB4 DEFB $60      ; #COLOUR(#PEEK(#PC)).
 $ECB5 DEFB $20      ; #COLOUR(#PEEK(#PC)).
 $ECB6 DEFB $20      ; #COLOUR(#PEEK(#PC)).
 $ECB7 DEFB $60      ; #COLOUR(#PEEK(#PC)).
 $ECB8 DEFB $60      ; #COLOUR(#PEEK(#PC)).
 $ECB9 DEFB $20      ; #COLOUR(#PEEK(#PC)).
 $ECBA DEFB $20      ; #COLOUR(#PEEK(#PC)).
 $ECBB DEFB $60      ; #COLOUR(#PEEK(#PC)).
 $ECBC DEFB $60      ; #COLOUR(#PEEK(#PC)).
 $ECBD DEFB $20      ; #COLOUR(#PEEK(#PC)).
 $ECBE DEFB $20      ; #COLOUR(#PEEK(#PC)).

; Controller: Game Over
;
; Used by the routines at #R$D1D0 and #R$D4D6.
;
; .
;
; First draw a yellow "GAME OVER":
; #PUSHS #SIM(start=$D1F1,stop=$D1F7)
; #UDGTABLE { #SIM(start=$ECBF,stop=$ECCD)#SCR$01(game-over-01) }
; UDGTABLE#
@label=Controller_GameOver
c$ECBF LD C,$36      ; #REGc=#COLOUR$36.
 $ECC1 XOR A         ; {Set *#R$EDEF to #N$00.
 $ECC2 LD ($EDEF),A  ; }
 $ECC5 LD A,$01      ; {Set *#R$EDF0 to #N$01.
 $ECC7 LD ($EDF0),A  ; }
 $ECCA CALL $ED6F    ; Call #R$ED6F.
; Then, a little offset to the first one, draw a cyan "GAME OVER".
; #UDGTABLE { #SIM(start=$ECCD,stop=$ECD6)#SCR$01(game-over-02) }
; UDGTABLE#
 $ECCD LD C,$6D      ; #REGc=#COLOUR$6D.
 $ECCF XOR A         ; {Set *#R$EDF0 to #N$00.
 $ECD0 LD ($EDF0),A  ; }
 $ECD3 CALL $ED6F    ; Call #R$ED6F.
; Now flash the "GAME OVER" cycling down and back up through the
; following colours: #LIST #FOR$49,$7F,$09(n,{ #Nn: #COLOURn }) LIST#
; .
; #SIM(start=$ECD8,stop=$ECDE) #UDGTABLE {
;   #FOR$00,$06||x|#SIM(start=$ECE0,stop=$ECEE)
;     #SCR$01(*game-over-03-x)#PLOT(0,0,0)(game-over-03-x)
;   ||
;   #FOR$07,$0D||x|#SIM(start=$ECF0,stop=$ECFE)
;     #SCR$01(*game-over-03-x)#PLOT(0,0,0)(game-over-03-x)
;   ||
;   #UDGARRAY#(#ANIMATE$04,$0D(game-over-03))
; } UDGTABLE# #POPS
 $ECD6 LD B,$0A      ; Set a counter in #REGb of #N$0A to count the number of down/ up
                     ; cycles here.
@label=GameOver_Flash_Loop
*$ECD8 LD A,$01      ; {Set *#R$EDEF to #N$01.
 $ECDA LD ($EDEF),A  ; }
 $ECDD PUSH BC       ; Stash the colour loop counter on the stack.
; First cycle down, starting at: #COLOUR$7F (#N$7F).
 $ECDE LD C,$7F      ; Set the starting colour value in #REGc to #COLOUR$7F.
@label=CycleDown_Loop
*$ECE0 CALL $ED6F    ; Call #R$ED6F.
 $ECE3 LD A,C        ; {Jump to #R$ECF0 if the current colour is: #COLOUR$49
 $ECE4 CP $49        ; (#N$49).
 $ECE6 JR Z,$ECF0    ; }
 $ECE8 SUB $09       ; {Subtract #N$09 from the current colour value and store the result
 $ECEA LD C,A        ; back in #REGc.}
 $ECEB CALL $ED62    ; Call #R$ED62.
 $ECEE JR $ECE0      ; Jump to #R$ECE0.
; Next cycle back up again; on first entry, starting at #COLOUR$49 (#N$49).
@label=CycleUp_Loop
*$ECF0 LD A,C        ; {Jump to #R$ED00 if the current colour is: #COLOUR$76
 $ECF1 CP $76        ; (#N$76).
 $ECF3 JR Z,$ED00    ; }
 $ECF5 ADD A,$09     ; {Add #N$09 to the current colour value and store the result back in
 $ECF7 LD C,A        ; #REGc.}
 $ECF8 CALL $ED6F    ; Call #R$ED6F.
 $ECFB CALL $ED62    ; Call #R$ED62.
 $ECFE JR $ECF0      ; Jump to #R$ECF0.
; Handle the flash loop.
@label=GameOver_Cycle_Next
*$ED00 POP BC        ; Restore the cycle counter from the stack.
 $ED01 DJNZ $ECD8    ; Decrease the cycle counter by one and loop back to #R$ECD8 until
                     ; the cycle has repeated #N$0A times.
 $ED03 LD B,$02      ; #REGb=#N$02.
*$ED05 PUSH BC       ; Stash #REGbc on the stack.
 $ED06 LD HL,$ED12   ; #REGhl=#R$ED12.
 $ED09 LD B,$28      ; #REGb=#N$28.
 $ED0B CALL $EF6A    ; Call #R$EF6A.
 $ED0E POP BC        ; Restore #REGbc from the stack.
 $ED0F DJNZ $ED05    ; Decrease counter by one and loop back to #R$ED05 until
                     ; counter is zero.
 $ED11 RET           ; Return.

; Data block at ED12
b$ED12 DEFB $02,$09,$02,$15,$02,$09,$02,$15
 $ED1A DEFB $02,$09,$02,$15,$02,$09,$02,$15
 $ED22 DEFB $02,$09,$02,$15,$02,$05,$02,$11
 $ED2A DEFB $02,$05,$02,$11,$02,$05,$02,$11
 $ED32 DEFB $02,$05,$02,$11,$02,$05,$02,$11
 $ED3A DEFB $02,$04,$02,$10,$02,$04,$02,$10
 $ED42 DEFB $02,$04,$02,$10,$02,$04,$02,$10
 $ED4A DEFB $02,$04,$02,$10,$02,$00,$02,$0C
 $ED52 DEFB $02,$00,$02,$0C,$02,$00,$02,$0C
 $ED5A DEFB $02,$00,$02,$0C,$02,$00,$02,$0C

; Game Over Flash Offset
;
; Used by the routine at #R$ECBF.
@label=GameOver_FlashOffset
c$ED62 XOR A         ; {Set *#R$EDEF to #N$00.
 $ED63 LD ($EDEF),A  ; }
 $ED66 CALL $EDD2    ; Call #R$EDD2.
 $ED69 LD A,$01      ; {Set *#R$EDEF to #N$01.
 $ED6B LD ($EDEF),A  ; }
 $ED6E RET           ; Return.

; Draw Game Over
;
; Used by the routine at #R$ECBF.
;
; C Colour attribute value
@label=Draw_GameOver
c$ED6F LD IX,$EDF1   ; Set the data pointer in #REGix to the start of the data
                     ; in #R$EDF1.
 $ED73 LD DE,$0020   ; Set #REGde with #N($0020,$04,$04) (the number of character blocks
                     ; in one line).
; Set the base drawing pointer in the attribute buffer from the data.
@label=Draw_GameOver_Loop
*$ED76 LD L,(IX+$00) ; Load the low byte of the attribute buffer address into
                     ; #REGl.
 $ED79 INC IX        ; {Load the high byte of the attribute buffer address into
 $ED7B LD H,(IX+$00) ; #REGh.}
; Skip moving "up" if the offset is OFF.
 $ED7E LD A,($EDF0)  ; {Jump to #R$ED87 if *#R$EDF0 is equal to #N$00.
 $ED81 CP $00        ;
 $ED83 JR Z,$ED87    ; }
; Else, move up one row.
 $ED85 SBC HL,DE     ; Subtract #N($0020,$04,$04) from the drawing pointer.
@label=WriteAttributeToScreen
*$ED87 LD (HL),C     ; Write the attribute value to *#REGhl.
 $ED88 INC IX        ; Move the data pointer to the next item of data.
@label=Movement_Loop
*$ED8A LD B,(IX+$00) ; {Load the repeat count into #REGb.
 $ED8D INC IX        ; }
 $ED8F LD A,(IX+$00) ; Load the direction code into #REGa.
 $ED92 INC IX        ; Move the data pointer to the next item of data.
 $ED94 CP $01        ; {Jump to #R$EDAD if the direction code is "right".
 $ED96 JR Z,$EDAD    ; }
 $ED98 CP $02        ; {Jump to #R$EDB6 if the direction code is "left".
 $ED9A JR Z,$EDB6    ; }
 $ED9C CP $04        ; {Jump to #R$EDBF if the direction code is "down".
 $ED9E JR Z,$EDBF    ; }
 $EDA0 CP $08        ; {Jump to #R$EDC8 if the direction code is "up".
 $EDA2 JR Z,$EDC8    ; }
 $EDA4 CP $00        ; {Return if the terminator has been reached.
 $EDA6 RET Z         ; }
; Else, this is a new starting point, so rewind the pointer and jump back
; to the start of the loop.
 $EDA7 DEC IX        ; {Decrease the data pointer by two.
 $EDA9 DEC IX        ; }
 $EDAB JR $ED76      ; Jump to #R$ED76.
; Handle moving right:
@label=GameOver_Move_Right
*$EDAD INC HL        ; Increment the drawing pointer by one (move right).
 $EDAE LD (HL),C     ; Write the attribute value to *#REGhl.
 $EDAF CALL $EDD2    ; Call #R$EDD2.
 $EDB2 DJNZ $EDAD    ; Decrease the repeat counter by one and loop back to #R$EDAD until
                     ; the repeat counter is zero.
 $EDB4 JR $ED8A      ; Jump to #R$ED8A.
; Handle moving left:
@label=GameOver_Move_Left
*$EDB6 DEC HL        ; Decrease the drawing pointer by one (move left).
 $EDB7 LD (HL),C     ; Write the attribute value to *#REGhl.
 $EDB8 CALL $EDD2    ; Call #R$EDD2.
 $EDBB DJNZ $EDB6    ; Decrease the repeat counter by one and loop back to #R$EDB6 until
                     ; the repeat counter is zero.
 $EDBD JR $ED8A      ; Jump to #R$ED8A.
; Handle moving down:
@label=GameOver_Move_Down
*$EDBF ADD HL,DE     ; Add #N($0020,$04,$04) to the drawing pointer (move
                     ; down).
 $EDC0 LD (HL),C     ; Write the attribute value to *#REGhl.
 $EDC1 CALL $EDD2    ; Call #R$EDD2.
 $EDC4 DJNZ $EDBF    ; Decrease the repeat counter by one and loop back to #R$EDBF until
                     ; the repeat counter is zero.
 $EDC6 JR $ED8A      ; Jump to #R$ED8A.
; Handle moving up:
@label=GameOver_Move_Up
*$EDC8 SBC HL,DE     ; Subtract #N($0020,$04,$04) from the drawing pointer
                     ; (move up).
 $EDCA LD (HL),C     ; Write the attribute value to *#REGhl.
 $EDCB CALL $EDD2    ; Call #R$EDD2.
 $EDCE DJNZ $EDC8    ; Decrease the repeat counter by one and loop back to #R$EDC8 until
                     ; the repeat counter is zero.
 $EDD0 JR $ED8A      ; Jump to #R$ED8A.

; Sound: Game Over
;
; Used by the routines at #R$ED62 and #R$ED6F.
@label=Sound_GameOver
c$EDD2 LD A,($EDEF)  ; {Return if *#R$EDEF is not equal to #N$00.
 $EDD5 CP $00        ;
 $EDD7 RET NZ        ; }
 $EDD8 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $EDD9 PUSH HL       ; }
 $EDDA LD H,$02      ; #REGh=#N$02.
 $EDDC LD BC,$03E8   ; Set the repeat counter in #REGbc to #N($03E8,$04,$04).
@label=Sound_GameOver_Loop
*$EDDF LD A,(HL)     ; #REGa=*#REGhl.
 $EDE0 INC HL        ; Increment #REGhl by one.
 $EDE1 AND %00011000 ; Keep only bits 3-4.
 $EDE3 OR %00000101  ; Set bits 0, 2.
 $EDE5 OUT ($FE),A   ; Send to the speaker.
 $EDE7 DEC BC        ; Decrease the repeat counter by one.
 $EDE8 LD A,B        ; {Jump back to #R$EDDF until the repeat counter is zero.
 $EDE9 OR C          ;
 $EDEA JR NZ,$EDDF   ; }
 $EDEC POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $EDED POP BC        ; }
 $EDEE RET           ; Return.

; Game Over Variables
@label=GameOver_X_Offset
g$EDEF DEFB $00
@label=GameOver_Y_Offset
 $EDF0 DEFB $00
; Draw the "G".
@label=GameOver_Data
 $EDF1 DEFW $58C5    ; Attribute buffer starting point.
 $EDF3 DEFB $03,$02  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EDF5 DEFB $05,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EDF7 DEFB $03,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EDF9 DEFB $02,$08  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EDFB DEFB $01,$02  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
; Draw the "A".
 $EDFD DEFW $5967    ; Attribute buffer starting point.
 $EDFF DEFB $05,$08  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE01 DEFB $02,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE03 DEFB $05,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE05 DEFB $02,$08  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE07 DEFB $01,$02  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
; Draw the "M".
 $EE09 DEFW $596B    ; Attribute buffer starting point.
 $EE0B DEFB $05,$08  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE0D DEFB $02,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE0F DEFB $05,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE11 DEFW $58CE    ; Attribute buffer starting point.
 $EE13 DEFB $01,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE15 DEFB $05,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
; Draw the "E".
 $EE17 DEFW $58D3    ; Attribute buffer starting point.
 $EE19 DEFB $02,$02  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE1B DEFB $02,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE1D DEFB $01,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE1F DEFB $01,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE21 DEFB $01,$02  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE23 DEFB $02,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE25 DEFB $02,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
; Draw the "O".
 $EE27 DEFW $59C5    ; Attribute buffer starting point.
 $EE29 DEFB $03,$02  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE2B DEFB $05,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE2D DEFB $03,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE2F DEFB $04,$08  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
; Draw the "V".
 $EE31 DEFW $59C7    ; Attribute buffer starting point.
 $EE33 DEFB $04,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE35 DEFW $5A68    ; Attribute buffer starting point.
 $EE37 DEFB $01,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE39 DEFW $5A4A    ; Attribute buffer starting point.
 $EE3B DEFB $04,$08  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
; Draw the "E".
 $EE3D DEFW $59CE    ; Attribute buffer starting point.
 $EE3F DEFB $02,$02  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE41 DEFB $02,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE43 DEFB $01,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE45 DEFB $01,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE47 DEFB $01,$02  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE49 DEFB $02,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE4B DEFB $02,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
; Draw the "R".
 $EE4D DEFW $5A70    ; Attribute buffer starting point.
 $EE4F DEFB $05,$08  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE51 DEFB $03,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE53 DEFB $02,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE55 DEFB $02,$02  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE57 DEFB $01,$01  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE59 DEFB $01,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE5B DEFW $5A53    ; Attribute buffer starting point.
 $EE5D DEFB $01,$04  ; Draw: #MAP(#PEEK(#PC+$01))(?,1:right,2:left,4:down,8:up) x
                     ; #PLURAL(#PEEK(#PC))(1 time, #N({count}) times).
 $EE5F DEFB $00,$00  ; Terminator.

; Routine at EE61
;
; Used by the routine at #R$D894.
c$EE61 LD A,$80      ; {Write #N$80 to *#R$D83A.
 $EE63 LD ($D83A),A  ; }
 $EE66 LD A,$08      ; {Write #N$08 to *#R$D839.
 $EE68 LD ($D839),A  ; }
*$EE6B CALL $EF2D    ; Call #R$EF2D.
 $EE6E CALL $FA9D    ; Call #R$FA9D.
 $EE71 LD HL,$D839   ; #REGhl=#R$D839.
 $EE74 BIT 3,(HL)    ; Test bit 3 of *#REGhl.
 $EE76 JR NZ,$EE6B   ; Jump to #R$EE6B if  is not zero.
 $EE78 LD A,$12      ; {Write #N$12 to *#R$D82C.
 $EE7A LD ($D82C),A  ; }
 $EE7D LD HL,$EF45   ; #REGhl=#R$EF45.
 $EE80 LD DE,$03E8   ; #REGde=#N($03E8,$04,$04).
*$EE83 DEC DE        ; Decrease #REGde by one.
 $EE84 LD A,$64      ; #REGa=#N$64.
*$EE86 DEC A         ; Decrease #REGa by one.
 $EE87 JR NZ,$EE86   ; Jump to #R$EE86 if #REGa is not zero.
 $EE89 LD A,D        ; {Jump to #R$EE83 if #REGde is not zero.
 $EE8A OR E          ;
 $EE8B JR NZ,$EE83   ; }
 $EE8D LD B,$04      ; #REGb=#N$04.
*$EE8F PUSH BC       ; Stash #REGbc on the stack.
 $EE90 LD B,$05      ; #REGb=#N$05.
*$EE92 PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $EE93 PUSH BC       ; }
 $EE94 LD A,($D82C)  ; {Write *#R$D82C to *#R$E75D.
 $EE97 LD ($E75D),A  ; }
 $EE9A LD A,(HL)     ; #REGa=*#REGhl.
 $EE9B LD ($E75E),A  ; Write #REGa to *#R$E75E.
 $EE9E SUB $0A       ; #REGa-=#N$0A.
 $EEA0 JR Z,$EEB6    ; Jump to #R$EEB6 if #REGa is zero.
 $EEA2 JP P,$EEB0    ; Jump to #R$EEB0 P.
 $EEA5 NEG           ; NEG.
 $EEA7 LD ($E761),A  ; Write #REGa to *#R$E761.
 $EEAA CALL $DB7E    ; Call #R$DB7E.
 $EEAD JP $EEB6      ; Jump to #R$EEB6.
*$EEB0 LD ($E761),A  ; Write #REGa to *#R$E761.
 $EEB3 CALL $DBE5    ; Call #R$DBE5.
*$EEB6 LD A,($D82C)  ; #REGa=*#R$D82C.
 $EEB9 SUB $12       ; #REGa-=#N$12.
 $EEBB NEG           ; NEG.
 $EEBD INC A         ; Increment #REGa by one.
 $EEBE LD ($E761),A  ; Write #REGa to *#R$E761.
 $EEC1 CALL $DC4B    ; Call #R$DC4B.
 $EEC4 LD B,$04      ; #REGb=#N$04.
 $EEC6 LD A,$01      ; {Write #N$01 to *#R$E761.
 $EEC8 LD ($E761),A  ; }
*$EECB PUSH BC       ; Stash #REGbc on the stack.
 $EECC LD A,$12      ; {Write #N$12 to *#R$E75D.
 $EECE LD ($E75D),A  ; }
 $EED1 CALL $DC4B    ; Call #R$DC4B.
 $EED4 LD D,$32      ; #REGd=#N$32.
 $EED6 LD E,$1E      ; #REGe=#N$1E.
 $EED8 LD A,$05      ; #REGa=#N$05.
*$EEDA XOR %00010000 ; Flip bit 4.
 $EEDC OUT ($FE),A   ; Send to the speaker.
 $EEDE LD B,D        ; #REGb=#REGd.
*$EEDF DJNZ $EEDF    ; Decrease counter by one and loop back to #R$EEDF until
                     ; counter is zero.
 $EEE1 DEC E         ; Decrease #REGe by one.
 $EEE2 JR NZ,$EEDA   ; Jump to #R$EEDA if #REGe is not zero.
 $EEE4 POP BC        ; Restore #REGbc from the stack.
 $EEE5 DJNZ $EECB    ; Decrease counter by one and loop back to #R$EECB until
                     ; counter is zero.
 $EEE7 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $EEE8 POP HL        ; }
 $EEE9 INC HL        ; Increment #REGhl by one.
 $EEEA DJNZ $EE92    ; Decrease counter by one and loop back to #R$EE92 until
                     ; counter is zero.
 $EEEC POP BC        ; Restore #REGbc from the stack.
 $EEED LD HL,$EF45   ; #REGhl=#R$EF45.
 $EEF0 LD A,($D82C)  ; #REGa=*#R$D82C.
 $EEF3 SUB $04       ; #REGa-=#N$04.
 $EEF5 LD ($D82C),A  ; Write #REGa to *#R$D82C.
 $EEF8 DJNZ $EE8F    ; Decrease counter by one and loop back to #R$EE8F until
                     ; counter is zero.
 $EEFA LD DE,$03E8   ; #REGde=#N($03E8,$04,$04).
*$EEFD DEC DE        ; Decrease #REGde by one.
 $EEFE LD A,$64      ; #REGa=#N$64.
*$EF00 DEC A         ; Decrease #REGa by one.
 $EF01 JR NZ,$EF00   ; Jump to #R$EF00 if #REGa is not zero.
 $EF03 LD A,D        ; {Jump to #R$EEFD if #REGde is not zero.
 $EF04 OR E          ;
 $EF05 JR NZ,$EEFD   ; }
 $EF07 LD A,$45      ; #REGa=#COLOUR$45.
 $EF09 LD ($5AA9),A  ; Write #REGa to *#N$5AA9 (attribute buffer location).
 $EF0C LD ($5AAA),A  ; Write #REGa to *#N$5AAA (attribute buffer location).
 $EF0F LD ($5AAB),A  ; Write #REGa to *#N$5AAB (attribute buffer location).
 $EF12 LD ($5AAC),A  ; Write #REGa to *#N$5AAC (attribute buffer location).
 $EF15 LD A,$80      ; {Write #N$80 to *#R$D83A.
 $EF17 LD ($D83A),A  ; }
 $EF1A LD A,$08      ; {Write #N$08 to *#R$D839.
 $EF1C LD ($D839),A  ; }
*$EF1F CALL $EF2D    ; Call #R$EF2D.
 $EF22 CALL $FAD6    ; Call #R$FAD6.
 $EF25 LD HL,$D839   ; #REGhl=#R$D839.
 $EF28 BIT 3,(HL)    ; Test bit 3 of *#REGhl.
 $EF2A JR NZ,$EF1F   ; Jump to #R$EF1F if #REGa is not zero.
 $EF2C RET           ; Return.
*$EF2D LD BC,$03E8   ; #REGbc=#N($03E8,$04,$04).
 $EF30 LD H,$05      ; #REGh=#N$05.
*$EF32 LD A,(HL)     ; #REGa=*#REGhl.
 $EF33 INC HL        ; Increment #REGhl by one.
 $EF34 AND %00011000 ; Keep only bits 3-4.
 $EF36 OR %00000101  ; Set bits 0, 2.
 $EF38 OUT ($FE),A   ; Send to the speaker.
 $EF3A DEC BC        ; Decrease #REGbc by one.
 $EF3B LD A,B        ; {Jump to #R$EF32 if #REGbc is not zero.
 $EF3C OR C          ;
 $EF3D JR NZ,$EF32   ; }
 $EF3F LD B,$08      ; #REGb=#N$08.
 $EF41 LD HL,($D84C) ; #REGhl=*#R$D84C.
 $EF44 RET           ; Return.
 $EF45 LD A,(BC)     ;
 $EF46 LD C,$12      ;
 $EF48 LD B,$02      ;

; Routine at EF4A
;
; Used by the routines at #R$D1D0, #R$D352, #R$D894 and #R$EA4A.
c$EF4A LD DE,$07D0    ; #REGde=#N$07D0.
*$EF4D DEC DE         ; Decrease #REGde by one.
 $EF4E LD A,$32       ; #REGa=#N$32.
*$EF50 DEC A          ; Decrease #REGa by one.
 $EF51 JR NZ,$EF50    ; Jump to #R$EF50 if #REGa is not zero.
 $EF53 LD A,D         ; {Jump to #R$EF4D if #REGde is not zero.
 $EF54 OR E           ;
 $EF55 JR NZ,$EF4D    ; }
 $EF57 LD IX,$D838    ; #REGix=#R$D838.
 $EF5B SET 7,(IX+$00) ; Set bit 7 of *#REGix+#N$00.
*$EF5F CALL $EB56     ; Call #R$EB56.
 $EF62 CP $00         ; {Jump to #R$EF5F if #REGa is not equal to #N$00.
 $EF64 JR NZ,$EF5F    ; }
 $EF66 RES 7,(IX+$00) ; Reset bit 7 of *#REGix+#N$00.
; This entry point is used by the routine at #R$ECBF.
*$EF6A PUSH BC        ; Stash #REGbc on the stack.
 $EF6B INC HL         ; Increment #REGhl by one.
 $EF6C LD A,(HL)      ; #REGa=*#REGhl.
 $EF6D DEC HL         ; Decrease #REGhl by one.
 $EF6E CP $FF         ; {Jump to #R$EF80 if #REGa is not equal to #N$FF.
 $EF70 JP NZ,$EF80    ; }
 $EF73 INC HL         ; {Increment #REGhl by two.
 $EF74 INC HL         ; }
 $EF75 LD BC,$4E20    ; #REGbc=#N$4E20.
*$EF78 DEC BC         ; Decrease #REGbc by one.
 $EF79 LD A,B         ; {Jump to #R$EF78 if #REGbc is not zero.
 $EF7A OR C           ;
 $EF7B JR NZ,$EF78    ; }
 $EF7D JP $EFBF       ; Jump to #R$EFBF.
*$EF80 RLCA           ; {RLCA.
 $EF81 RLCA           ; }
 $EF82 LD IX,$F092    ; #REGix=#R$F092.
 $EF86 LD B,$00       ; #REGb=#N$00.
 $EF88 LD C,A         ; #REGc=#REGa.
 $EF89 ADD IX,BC      ; #REGix+=#REGbc.
 $EF8B PUSH HL        ; Stash #REGhl on the stack.
 $EF8C LD L,(IX+$00)  ; #REGl=*#REGix+#N$00.
 $EF8F LD H,(IX+$01)  ; #REGh=*#REGix+#N$01.
 $EF92 LD ($F04B),HL  ; Write #REGhl to *#R$F04B.
 $EF95 LD C,(IX+$02)  ; #REGc=*#REGix+#N$02.
 $EF98 LD B,(IX+$03)  ; #REGb=*#REGix+#N$03.
 $EF9B POP HL         ; Restore #REGhl from the stack.
 $EF9C LD A,(HL)      ; #REGa=*#REGhl.
 $EF9D INC HL         ; {Increment #REGhl by two.
 $EF9E INC HL         ; }
 $EF9F PUSH HL        ; {Stash #REGhl and #REGbc on the stack.
 $EFA0 PUSH BC        ; }
 $EFA1 POP DE         ; Restore #REGde from the stack.
 $EFA2 LD B,A         ; #REGb=#REGa.
 $EFA3 LD HL,$0000    ; #REGhl=#N($0000,$04,$04).
*$EFA6 ADD HL,DE      ; #REGhl+=#REGde.
 $EFA7 DJNZ $EFA6     ; Decrease counter by one and loop back to #R$EFA6 until
                      ; counter is zero.
 $EFA9 AND A          ; Set flags.
 $EFAA LD DE,$0000    ; #REGde=#N($0000,$04,$04).
 $EFAD LD BC,$0032    ; #REGbc=#N($0032,$04,$04).
*$EFB0 INC DE         ; Increment #REGde by one.
 $EFB1 SBC HL,BC      ; #REGhl-=#REGbc.
 $EFB3 JP P,$EFB0     ; Jump to #R$EFB0 P.
 $EFB6 DEC DE         ; Decrease #REGde by one.
 $EFB7 LD ($F04D),DE  ; Write #REGde to *#R$F04D.
 $EFBB CALL $EFD5     ; Call #R$EFD5.
 $EFBE POP HL         ; {Restore #REGhl and #REGbc from the stack.
*$EFBF POP BC         ; }
 $EFC0 LD IX,$D838    ; #REGix=#R$D838.
 $EFC4 SET 7,(IX+$00) ; Set bit 7 of *#REGix+#N$00.
 $EFC8 CALL $EB56     ; Call #R$EB56.
 $EFCB CP $00         ; Was there any player input?
 $EFCD RES 7,(IX+$00) ; Reset bit 7 of *#REGix+#N$00.
 $EFD1 RET NZ         ; Return there was any kind of player input.
 $EFD2 DJNZ $EF6A     ; Decrease counter by one and loop back to #R$EF6A until
                      ; counter is zero.
 $EFD4 RET            ; Return.

; Routine at EFD5
;
; Used by the routine at #R$EF4A.
c$EFD5 LD HL,$0001   ; {Write #N($0001,$04,$04) to *#R$F045.
 $EFD8 LD ($F045),HL ; }
 $EFDB LD HL,($F04B) ; {Write *#R$F04B to *#R$F049.
 $EFDE LD ($F049),HL ; }
 $EFE1 LD DE,($F04D) ; #REGde=*#R$F04D.
 $EFE5 LD BC,($F04B) ; #REGbc=*#R$F04B.
 $EFE9 DEC BC        ; Decrease #REGbc by one.
*$EFEA PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EFEB PUSH DE       ; }
 $EFEC CALL $F04F    ; Call #R$F04F.
 $EFEF POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EFF0 POP BC        ; }
 $EFF1 LD HL,($F045) ; #REGhl=*#R$F045.
 $EFF4 INC HL        ; Increment #REGhl by one.
 $EFF5 LD ($F045),HL ; Write #REGhl to *#R$F045.
 $EFF8 LD HL,($F049) ; #REGhl=*#R$F049.
 $EFFB DEC HL        ; Decrease #REGhl by one.
 $EFFC LD ($F049),HL ; Write #REGhl to *#R$F049.
 $EFFF DEC BC        ; Decrease #REGbc by one.
 $F000 LD A,B        ; {Jump to #R$F00C if #REGbc is zero.
 $F001 OR C          ;
 $F002 JP Z,$F00C    ; }
 $F005 DEC DE        ; Decrease #REGde by one.
 $F006 LD A,D        ; {Jump to #R$EFEA if #REGde is not zero.
 $F007 OR E          ;
 $F008 JP NZ,$EFEA   ; }
 $F00B RET           ; Return.
*$F00C DEC DE        ; Decrease #REGde by one.
 $F00D LD A,D        ; {Return if #REGde is zero.
 $F00E OR E          ;
 $F00F RET Z         ; }
 $F010 LD BC,($F04B) ; #REGbc=*#R$F04B.
 $F014 DEC BC        ; Decrease #REGbc by one.
*$F015 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F016 PUSH DE       ; }
 $F017 CALL $F04F    ; Call #R$F04F.
 $F01A POP DE        ; {Restore #REGde and #REGbc from the stack.
 $F01B POP BC        ; }
 $F01C LD HL,($F045) ; #REGhl=*#R$F045.
 $F01F DEC HL        ; Decrease #REGhl by one.
 $F020 LD ($F045),HL ; Write #REGhl to *#R$F045.
 $F023 LD HL,($F049) ; #REGhl=*#R$F049.
 $F026 INC HL        ; Increment #REGhl by one.
 $F027 LD ($F049),HL ; Write #REGhl to *#R$F049.
 $F02A DEC BC        ; Decrease #REGbc by one.
 $F02B LD A,B        ; {Jump to #R$F037 if #REGbc is zero.
 $F02C OR C          ;
 $F02D JP Z,$F037    ; }
 $F030 DEC DE        ; Decrease #REGde by one.
 $F031 LD A,D        ; {Jump to #R$F015 if #REGde is not zero.
 $F032 OR E          ;
 $F033 JP NZ,$F015   ; }
 $F036 RET           ; Return.
*$F037 DEC DE        ; Decrease #REGde by one.
 $F038 LD A,D        ; {Return if #REGde is zero.
 $F039 OR E          ;
 $F03A RET Z         ; }
 $F03B LD BC,($F04B) ; #REGbc=*#R$F04B.
 $F03F DEC BC        ; Decrease #REGbc by one.
 $F040 JP $EFEA      ; Jump to #R$EFEA.

; Data block at F043
w$F043 DEFW $0000
 $F045 DEFW $0000
 $F047 DEFW $0000
 $F049 DEFW $0000
 $F04B DEFW $0000
 $F04D DEFW $0000

; Routine at F04F
;
; Used by the routine at #R$EFD5.
c$F04F LD A,($EB39)  ; {Jump to #R$F059 if *#R$EB39 is equal to #N$00.
 $F052 CP $00        ;
 $F054 JR Z,$F059    ; }
 $F056 XOR A         ; #REGa=#N$00.
 $F057 JR $F05B      ; Jump to #R$F05B.
@label=SetDefault
*$F059 LD A,$05      ; #REGa=#N$05.
*$F05B LD ($F043),A  ; Write #REGa to *#R$F043.
 $F05E LD ($F047),A  ; Write #REGa to *#R$F047.
 $F061 LD B,$02      ; #REGb=#N$02.
*$F063 LD DE,($F045) ; #REGde=*#R$F045.
*$F067 DEC DE        ; Decrease #REGde by one.
 $F068 LD A,D        ; {Jump to #R$F067 if #REGde is not zero.
 $F069 OR E          ;
 $F06A JP NZ,$F067   ; }
 $F06D LD A,($F043)  ; #REGa=*#R$F043.
 $F070 XOR %00010000 ; Flip the speaker bit.
 $F072 LD ($F043),A  ; Write #REGa to *#R$F043.
 $F075 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $F077 DJNZ $F063    ; Decrease counter by one and loop back to #R$F063 until
                     ; counter is zero.
 $F079 LD B,$02      ; #REGb=#N$02.
*$F07B LD DE,($F049) ; #REGde=*#R$F049.
*$F07F DEC DE        ; Decrease #REGde by one.
 $F080 LD A,D        ; {Jump to #R$F07F if #REGde is not zero.
 $F081 OR E          ;
 $F082 JP NZ,$F07F   ; }
 $F085 LD A,($F047)  ; #REGa=*#R$F047.
 $F088 XOR %00010000 ; Flip the speaker bit.
 $F08A LD ($F047),A  ; Write #REGa to *#R$F047.
 $F08D OUT ($FE),A   ; Set border to the colour held by #REGa.
 $F08F DJNZ $F07B    ; Decrease counter by one and loop back to #R$F07B until
                     ; counter is zero.
 $F091 RET           ; Return.

; Data block at F092
w$F092 DEFW $016C
 $F094 DEFW $00C1
 $F096 DEFW $0158
 $F098 DEFW $00CC
 $F09A DEFW $0143
 $F09C DEFW $00D9
 $F09E DEFW $0131
 $F0A0 DEFW $00E4
 $F0A2 DEFW $011C
 $F0A4 DEFW $00F5
 $F0A6 DEFW $010A
 $F0A8 DEFW $0106
 $F0AA DEFW $00FC
 $F0AC DEFW $0114
 $F0AE DEFW $00ED
 $F0B0 DEFW $0123
 $F0B2 DEFW $00DF
 $F0B4 DEFW $0136
 $F0B6 DEFW $00D3
 $F0B8 DEFW $0146
 $F0BA DEFW $00C6
 $F0BC DEFW $015A
 $F0BE DEFW $00B9
 $F0C0 DEFW $0171
 $F0C2 DEFW $00AE
 $F0C4 DEFW $0187
 $F0C6 DEFW $00A4
 $F0C8 DEFW $019D
 $F0CA DEFW $009A
 $F0CC DEFW $01B5
 $F0CE DEFW $0091
 $F0D0 DEFW $01CF
 $F0D2 DEFW $0088
 $F0D4 DEFW $01EB
 $F0D6 DEFW $0080
 $F0D8 DEFW $0206
 $F0DA DEFW $0078
 $F0DC DEFW $0223
 $F0DE DEFW $0071
 $F0E0 DEFW $0242
 $F0E2 DEFW $006A
 $F0E4 DEFW $0263
 $F0E6 DEFW $0063
 $F0E8 DEFW $028C
 $F0EA DEFW $0206
 $F0EC DEFW $0406
 $F0EE DEFW $0506
 $F0F0 DEFW $0706
 $F0F2 DEFW $0912
 $F0F4 DEFW $0206
 $F0F6 DEFW $0406
 $F0F8 DEFW $0506
 $F0FA DEFW $0706
 $F0FC DEFW $0912
 $F0FE DEFW $0E06
 $F100 DEFW $0C06
 $F102 DEFW $0B06
 $F104 DEFW $0906
 $F106 DEFW $0718
 $F108 DEFW $0703
 $F10A DEFW $0803
 $F10C DEFW $0903
 $F10E DEFW $0A03
 $F110 DEFW $0B03
 $F112 DEFW $0C03
 $F114 DEFW $0D03
 $F116 DEFW $0E03
 $F118 DEFW $0F03
 $F11A DEFW $1003
 $F11C DEFW $1103
 $F11E DEFW $1203
 $F120 DEFW $1330
 $F122 DEFW $FF00
 $F124 DEFW $FF00
 $F126 DEFW $FF00
 $F128 DEFW $FF00
 $F12A DEFW $0E09
 $F12C DEFW $FF00
 $F12E DEFW $0709

; Routine at F130
;
; Used by the routine at #R$F43E.
c$F130 CP $FF         ; {Return if #REGa is equal to #N$FF.
 $F132 RET Z          ; }
 $F133 CP $80         ; {Jump to #R$F13A if #REGa is not equal to #N$80.
 $F135 JR NZ,$F13A    ; }
 $F137 SET 7,B        ; Set bit 7 of #REGb.
 $F139 RET            ; Return.
*$F13A CP $40         ; {Jump to #R$F141 if #REGa is not equal to #N$40.
 $F13C JR NZ,$F141    ; }
 $F13E SET 6,B        ; Set bit 6 of #REGb.
 $F140 RET            ; Return.
*$F141 LD C,A         ; #REGc=#REGa.
 $F142 LD A,B         ; {Return if #REGb is equal to #N$00.
 $F143 CP $00         ;
 $F145 RET Z          ; }
 $F146 LD A,C         ; #REGa=#REGc.
 $F147 CP $15         ; {Jump to #R$F249 if #REGa is lower than #N$15 (unsigned
 $F149 JP M,$F249     ; comparison).}
 $F14C CP $40         ; Compare #REGa with #N$40.
 $F14E JP P,$F249     ; Jump to #R$F249 P.
 $F151 LD C,A         ; #REGc=#REGa.
 $F152 LD A,($E2C7)   ; #REGa=*#R$E2C7.
 $F155 CP $15         ; {Jump to #R$F249 if #REGa is lower than #N$15 (unsigned
 $F157 JP M,$F249     ; comparison).}
 $F15A CP $40         ; Compare #REGa with #N$40.
 $F15C JP P,$F249     ; Jump to #R$F249 P.
 $F15F LD D,$15       ; #REGd=#N$15.
 $F161 CALL $F286     ; Call #R$F286.
 $F164 LD D,$3D       ; #REGd=#N$3D.
 $F166 LD E,$03       ; #REGe=#N$03.
 $F168 LD A,($E2C7)   ; #REGa=*#R$E2C7.
*$F16B CALL $F286     ; Call #R$F286.
 $F16E INC D          ; Increment #REGd by one.
 $F16F DEC E          ; Decrease #REGe by one.
 $F170 LD A,($E2C7)   ; #REGa=*#R$E2C7.
 $F173 JR NZ,$F16B    ; Jump to #R$F16B if #REGe is not zero.
 $F175 CP $1B         ; {Jump to #R$F180 if #REGa is not equal to #N$1B.
 $F177 JR NZ,$F180    ; }
 $F179 LD A,C         ; {Jump to #R$F194 if #REGc is not equal to #N$1C.
 $F17A CP $1C         ;
 $F17C JR NZ,$F194    ; }
 $F17E JR $F189       ; Jump to #R$F189.
*$F180 CP $1C         ; {Jump to #R$F194 if #REGa is not equal to #N$1C.
 $F182 JR NZ,$F194    ; }
 $F184 LD A,C         ; {Jump to #R$F194 if #REGc is not equal to #N$1B.
 $F185 CP $1B         ;
 $F187 JR NZ,$F194    ; }
*$F189 LD IX,$D83A    ; #REGix=#R$D83A.
 $F18D SET 3,(IX+$00) ; Set bit 3 of *#REGix+#N$00.
 $F191 JP $F231       ; Jump to #R$F231.
*$F194 LD A,($E2C7)   ; {Jump to #R$F1A2 if *#R$E2C7 is not equal to #N$1D.
 $F197 CP $1D         ;
 $F199 JR NZ,$F1A2    ; }
 $F19B LD A,C         ; {Jump to #R$F1D6 if #REGc is not equal to #N$1E.
 $F19C CP $1E         ;
 $F19E JR NZ,$F1D6    ; }
 $F1A0 JR $F1AB       ; Jump to #R$F1AB.
*$F1A2 CP $1E         ; {Jump to #R$F1D6 if #REGa is not equal to #N$1E.
 $F1A4 JR NZ,$F1D6    ; }
 $F1A6 LD A,C         ; {Jump to #R$F1D6 if #REGc is not equal to #N$1D.
 $F1A7 CP $1D         ;
 $F1A9 JR NZ,$F1D6    ; }
*$F1AB LD IX,$D83A    ; #REGix=#R$D83A.
 $F1AF SET 2,(IX+$00) ; Set bit 2 of *#REGix+#N$00.
 $F1B3 LD A,($D840)   ; #REGa=*#R$D840.
 $F1B6 AND A          ; Set flags.
 $F1B7 ADD A,A        ; #REGa+=#REGa.
 $F1B8 DAA            ; DAA.
 $F1B9 LD ($D840),A   ; Write #REGa to *#R$D840.
 $F1BC LD A,($D83F)   ; #REGa=*#R$D83F.
 $F1BF PUSH AF        ; Stash #REGaf on the stack.
 $F1C0 AND A          ; Set flags.
 $F1C1 ADD A,A        ; #REGa+=#REGa.
 $F1C2 DAA            ; DAA.
 $F1C3 LD ($D83F),A   ; Write #REGa to *#R$D83F.
 $F1C6 POP AF         ; Restore #REGaf from the stack.
 $F1C7 JP NC,$F231    ; Jump to #R$F231 if #REGa is higher.
 $F1CA CCF            ; Invert the carry flag.
 $F1CB LD A,($D83F)   ; #REGa=*#R$D83F.
 $F1CE INC A          ; Increment #REGa by one.
 $F1CF DAA            ; DAA.
 $F1D0 LD ($D83F),A   ; Write #REGa to *#R$D83F.
 $F1D3 JP $F231       ; Jump to #R$F231.
*$F1D6 LD A,($E2C7)   ; #REGa=*#R$E2C7.
 $F1D9 CP $17         ; {Jump to #R$F1EB if #REGa is not equal to #N$17.
 $F1DB JR NZ,$F1EB    ; }
 $F1DD CP C           ; {Jump to #R$F1EB if #REGa is not equal to #REGc.
 $F1DE JR NZ,$F1EB    ; }
 $F1E0 LD IX,$D83A    ; #REGix=#R$D83A.
 $F1E4 SET 6,(IX+$00) ; Set bit 6 of *#REGix+#N$00.
 $F1E8 JP $F231       ; Jump to #R$F231.
*$F1EB LD A,($E2C7)   ; #REGa=*#R$E2C7.
 $F1EE INC A          ; Increment #REGa by one.
 $F1EF CP C           ; {Jump to #R$F1F8 if #REGa is equal to #REGc.
 $F1F0 JR Z,$F1F8     ; }
 $F1F2 SUB $02        ; #REGa-=#N$02.
 $F1F4 CP C           ; {Jump to #R$F231 if #REGa is not equal to #REGc.
 $F1F5 JR NZ,$F231    ; }
 $F1F7 INC A          ; Increment #REGa by one.
*$F1F8 DEC A          ; Decrease #REGa by one.
 $F1F9 CALL $D7C6     ; Call #R$D7C6.
 $F1FC LD D,$1F       ; #REGd=#N$1F.
 $F1FE LD E,$0D       ; #REGe=#N$0D.
*$F200 CP D           ; Compare #REGa with #REGd.
 $F201 JR Z,$F20A     ; Jump to #R$F20A if #REGa is zero.
 $F203 INC D          ; {Increment #REGd by two.
 $F204 INC D          ; }
 $F205 DEC E          ; Decrease #REGe by one.
 $F206 JR NZ,$F200    ; Jump to #R$F200 if #REGe is not zero.
 $F208 JR $F231       ; Jump to #R$F231.
*$F20A LD A,$0E       ; #REGa=#N$0E.
 $F20C SUB E          ; #REGa-=#REGe.
 $F20D LD D,A         ; #REGd=#REGa.
 $F20E LD A,$05       ; #REGa=#N$05.
*$F210 ADD A,$05      ; #REGa+=#N$05.
 $F212 DAA            ; DAA.
 $F213 DEC D          ; Decrease #REGd by one.
 $F214 JR NZ,$F210    ; Jump to #R$F210 if #REGd is not zero.
; This entry point is used by the routine at #R$F286.
*$F216 PUSH AF        ; Stash #REGaf on the stack.
 $F217 SET 3,B        ; Set bit 3 of #REGb.
 $F219 LD ($D86B),A   ; Write #REGa to *#R$D86B.
 $F21C LD A,($D840)   ; {#REGd=*#R$D840.
 $F21F LD D,A         ; }
 $F220 POP AF         ; Restore #REGaf from the stack.
 $F221 ADD A,D        ; #REGa+=#REGd.
 $F222 DAA            ; DAA.
 $F223 LD ($D840),A   ; Write #REGa to *#R$D840.
 $F226 JR NC,$F231    ; Jump to #R$F231 if #REGd is higher.
 $F228 LD A,($D83F)   ; #REGa=*#R$D83F.
 $F22B CCF            ; Invert the carry flag.
 $F22C INC A          ; Increment #REGa by one.
 $F22D DAA            ; DAA.
 $F22E LD ($D83F),A   ; Write #REGa to *#R$D83F.
*$F231 INC B          ; Increment #REGb by one.
 $F232 SET 4,B        ; Set bit 4 of #REGb.
 $F234 LD A,($D832)   ; {Jump to #R$F240 if *#R$D832 is equal to #N$00.
 $F237 CP $00         ;
 $F239 JR Z,$F240     ; }
 $F23B LD A,$03       ; {Write #N$03 to *#R$D832.
 $F23D LD ($D832),A   ; }
*$F240 LD A,$00       ; #REGa=#N$00.
 $F242 LD DE,($E5B0)  ; #REGde=*#R$E5B0.
 $F246 LD (DE),A      ; Write #REGa to *#REGde.
 $F247 LD (HL),A      ; Write #REGa to *#REGhl.
 $F248 RET            ; Return.

; Routine at F249
;
; Used by the routines at #R$F130 and #R$F286.
c$F249 LD A,($D832)  ; {Return if *#R$D832 is equal to either #N$00 or #N$03.
 $F24C CP $00        ;
 $F24E RET Z         ;
 $F24F CP $03        ;
 $F251 RET Z         ; }
 $F252 SET 5,B       ; Set bit 5 of #REGb.
 $F254 RET           ; Return.

; Routine at F255
;
; Used by the routine at #R$F43E.
c$F255 LD A,B        ; {Jump to #R$F262 if #REGb is equal to #N$00.
 $F256 CP $00        ;
 $F258 JR Z,$F262    ; }
 $F25A CP $40        ; {Jump to #R$F262 if #REGb is equal to #N$40.
 $F25C JR Z,$F262    ; }
 $F25E CP $20        ; {Jump to #R$F266 if #REGb is not equal to #N$20.
 $F260 JR NZ,$F266   ; }
*$F262 POP HL        ; Restore #REGhl from the stack.
 $F263 JP $E352      ; Jump to #R$E352.
*$F266 AND %00000111 ; Keep only bits 0-2.
 $F268 RLCA          ; {RLCA.
 $F269 RLCA          ; }
 $F26A BIT 7,B       ; {Jump to #R$F276 if bit 7 of #REGb is not set.
 $F26C JR Z,$F276    ; }
 $F26E INC A         ; Increment #REGa by one.
 $F26F PUSH HL       ; Stash #REGhl on the stack.
 $F270 LD HL,$D839   ; {Set bit 0 of *#R$D839.
 $F273 SET 0,(HL)    ; }
 $F275 POP HL        ; Restore #REGhl from the stack.
*$F276 LD ($E761),A  ; Write #REGa to *#R$E761.
 $F279 LD A,($D82C)  ; {Write *#R$D82C to *#R$E75D.
 $F27C LD ($E75D),A  ; }
 $F27F LD A,($D82D)  ; {Write *#R$D82D to *#R$E75E.
 $F282 LD ($E75E),A  ; }
 $F285 RET           ; Return.

; Routine at F286
;
; Used by the routine at #R$F130.
c$F286 CP D          ; {Jump to #R$F293 if #REGa is not equal to #REGd.
 $F287 JR NZ,$F293   ; }
 $F289 LD A,C        ; {Compare #REGc with #N$16.
 $F28A CP $16        ; }
 $F28C POP IY        ; Restore #REGiy from the stack.
 $F28E JR Z,$F2A0    ; Jump to #R$F2A0 if #REGc was equal to #N$16.
 $F290 JP $F249      ; Jump to #R$F249.
*$F293 LD A,C        ; {Return if #REGc is not equal to #REGd.
 $F294 CP D          ;
 $F295 RET NZ        ; }
 $F296 LD A,($E2C7)  ; {Compare *#R$E2C7 with #N$16.
 $F299 CP $16        ; }
 $F29B POP IY        ; Restore #REGiy from the stack.
 $F29D JP NZ,$F249   ; Jump to #R$F249 if *#R$E2C7 was not equal to #N$16.
*$F2A0 LD A,$00      ; {Write #N$00 to *#R$E2C7.
 $F2A2 LD ($E2C7),A  ; }
 $F2A5 LD A,D        ; #REGa=#REGd.
 $F2A6 CALL $D99E    ; Call #R$D99E.
 $F2A9 LD A,$50      ; #REGa=#N$50.
 $F2AB JP $F216      ; Jump to #R$F216.

; Data block at F2AE
b$F2AE DEFB $00,$20,$8A,$38,$1C,$10,$24,$00 ; #UDG(#PC,attr=$46)
 $F2B6 DEFB $00,$00,$28,$38,$18,$5C,$02,$00 ; #UDG(#PC,attr=$46)
 $F2BE DEFB $00,$48,$16,$3C,$5A,$3C,$28,$10 ; #UDG(#PC,attr=$46)
 $F2C6 DEFB $00,$4A,$D8,$6E,$6C,$B8,$2C,$4A ; #UDG(#PC,attr=$46)

; Custom Font
@label=CustomFont
b$F2CE DEFB $7C,$FE,$E6,$E6,$E6,$E6,$FE,$7C ; #UDG(#PC,attr=$46)
 $F2D6 DEFB $38,$78,$78,$38,$38,$38,$7C,$7C ; #UDG(#PC,attr=$46)
 $F2DE DEFB $FC,$FE,$0E,$7E,$FC,$E0,$FE,$FE ; #UDG(#PC,attr=$46)
 $F2E6 DEFB $FC,$FE,$0E,$3C,$3E,$0E,$FE,$FC ; #UDG(#PC,attr=$46)
 $F2EE DEFB $C0,$C0,$CE,$CE,$FE,$FE,$0E,$0E ; #UDG(#PC,attr=$46)
 $F2F6 DEFB $FE,$FE,$E0,$FC,$FE,$0E,$FE,$FC ; #UDG(#PC,attr=$46)
 $F2FE DEFB $3C,$78,$F0,$FC,$EE,$EE,$EE,$7C ; #UDG(#PC,attr=$46)
 $F306 DEFB $7E,$7E,$0E,$3C,$3C,$70,$60,$60 ; #UDG(#PC,attr=$46)
 $F30E DEFB $7C,$E6,$E6,$7C,$FE,$E6,$E6,$7C ; #UDG(#PC,attr=$46)
 $F316 DEFB $7C,$EE,$EE,$EE,$7E,$1E,$3C,$78 ; #UDG(#PC,attr=$46)

; Routine at F31E
;
; Used by the routine at #R$D469.
c$F31E LD HL,$50E1   ; #REGhl=#N$50E1 (screen buffer location).
 $F321 LD B,$14      ; #REGb=#N$14.
*$F323 LD C,$04      ; #REGc=#N$04.
 $F325 PUSH HL       ; Stash #REGhl on the stack.
*$F326 SCF           ; Set the carry flag.
 $F327 RR (HL)       ; Rotate *#REGhl right.
 $F329 JP C,$F335    ; Jump to #R$F335 if  is lower.
 $F32C INC H         ; Increment #REGh by one.
 $F32D DEC C         ; Decrease #REGc by one.
 $F32E JP NZ,$F326   ; Jump to #R$F326 if #REGc is not zero.
 $F331 POP HL        ; Restore #REGhl from the stack.
 $F332 JP $F323      ; Jump to #R$F323.
*$F335 POP HL        ; Restore #REGhl from the stack.
 $F336 INC HL        ; Increment #REGhl by one.
 $F337 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $F338 DJNZ $F323    ; Decrease counter by one and loop back to #R$F323 until
                     ; counter is zero.
 $F33A DEC HL        ; Decrease #REGhl by one.
 $F33B LD ($D85B),HL ; Write #REGhl to *#R$D85B.
 $F33E LD A,$01      ; {Write #N$01 to *#R$D85D.
 $F340 LD ($D85D),A  ; }
 $F343 LD A,$14      ; {Write #N$14 to *#R$D85E.
 $F345 LD ($D85E),A  ; }
 $F348 RET           ; Return.

; Routine at F349
;
; Used by the routine at #R$D352.
c$F349 LD B,$28      ; #REGb=#N$28.
 $F34B LD HL,$D83A   ; #REGhl=#R$D83A.
 $F34E RES 5,(HL)    ; Reset bit 5 of *#REGhl.
 $F350 RES 6,(HL)    ; Reset bit 6 of *#REGhl.
 $F352 LD HL,($D85B) ; #REGhl=*#R$D85B.
*$F355 LD C,$04      ; #REGc=#N$04.
 $F357 PUSH HL       ; Stash #REGhl on the stack.
*$F358 SCF           ; Set the carry flag.
 $F359 RR (HL)       ; Rotate *#REGhl right.
 $F35B JP C,$F37C    ; Jump to #R$F37C if  is lower.
 $F35E INC H         ; Increment #REGh by one.
 $F35F DEC C         ; Decrease #REGc by one.
 $F360 JP NZ,$F358   ; Jump to #R$F358 if #REGc is not zero.
 $F363 LD A,B        ; #REGa=#REGb.
 $F364 ADD A,$1E     ; #REGa+=#N$1E.
 $F366 LD H,A        ; #REGh=#REGa.
 $F367 LD L,$14      ; #REGl=#N$14.
 $F369 LD A,$05      ; #REGa=#N$05.
*$F36B XOR %00010000 ; Flip bits 4.
 $F36D OUT ($FE),A   ; Set border to the colour held by #REGa.
 $F36F LD D,H        ; #REGd=#REGh.
*$F370 DEC D         ; Decrease #REGd by one.
 $F371 JP NZ,$F370   ; Jump to #R$F370 if #REGd is not zero.
 $F374 DEC L         ; Decrease #REGl by one.
 $F375 JP NZ,$F36B   ; Jump to #R$F36B if #REGl is not zero.
 $F378 POP HL        ; Restore #REGhl from the stack.
 $F379 DJNZ $F355    ; Decrease counter by one and loop back to #R$F355 until
                     ; counter is zero.
 $F37B RET           ; Return.
*$F37C POP HL        ; Restore #REGhl from the stack.
 $F37D LD A,($D85E)  ; #REGa=*#R$D85E.
 $F380 CP $14        ; Compare #REGa with #N$14.
 $F382 RET P         ; Return P.
 $F383 INC A         ; Increment #REGa by one.
 $F384 LD ($D85E),A  ; Write #REGa to *#R$D85E.
 $F387 INC HL        ; Increment #REGhl by one.
 $F388 LD ($D85B),HL ; Write #REGhl to *#R$D85B.
 $F38B PUSH HL       ; Stash #REGhl on the stack.
 $F38C JP $F358      ; Jump to #R$F358.

; Routine at F38F
;
; Used by the routine at #R$F39E.
c$F38F LD HL,$E261   ; #REGhl=#R$E261.
 $F392 LD B,$2A      ; #REGb=#N$2A.
*$F394 CP (HL)       ; {Jump to #R$F39B if #REGa is equal to *#REGhl.
 $F395 JR Z,$F39B    ; }
 $F397 INC HL        ; Increment #REGhl by one.
 $F398 DJNZ $F394    ; Decrease counter by one and loop back to #R$F394 until
                     ; counter is zero.
 $F39A RET           ; Return.
*$F39B LD (HL),$00   ; Write #N$00 to *#REGhl.
 $F39D RET           ; Return.

; Routine at F39E
;
; Used by the routines at #R$D352 and #R$E320.
c$F39E LD HL,$D83A   ; {Jump to #R$F3AC if bit 4 of *#R$D83A is not set.
 $F3A1 BIT 4,(HL)    ;
 $F3A3 JR Z,$F3AC    ; }
 $F3A5 RES 4,(HL)    ; Reset bit 4 of *#REGhl.
 $F3A7 POP IY        ; Restore #REGiy from the stack.
 $F3A9 JP $D41E      ; Jump to #R$D41E.
; See #POKE#bombs(Bombs Don't Explode).
*$F3AC LD A,($D838)  ; {Jump to #R$F428 if *#R$D838 is equal to #N$00.
 $F3AF CP $00        ;
 $F3B1 JR Z,$F428    ; }
 $F3B3 BIT 1,A       ; {Jump to #R$F3CB if bit 1 of #REGa is not set.
 $F3B5 JR Z,$F3CB    ; }
 $F3B7 RES 1,A       ; Reset bit 1 of #REGa.
 $F3B9 LD ($D838),A  ; Write #REGa to *#R$D838.
 $F3BC LD A,$15      ; #REGa=#N$15.
 $F3BE CALL $F38F    ; Call #R$F38F.
 $F3C1 LD BC,($DA15) ; {Write *#R$DA15 to *#R$E75D.
 $F3C5 LD ($E75D),BC ; }
 $F3C9 JR $F411      ; Jump to #R$F411.
*$F3CB BIT 2,A       ; {Jump to #R$F3E3 if bit 2 of #REGa is not set.
 $F3CD JR Z,$F3E3    ; }
 $F3CF RES 2,A       ; Reset bit 2 of #REGa.
 $F3D1 LD ($D838),A  ; Write #REGa to *#R$D838.
 $F3D4 LD A,$3D      ; #REGa=#N$3D.
 $F3D6 CALL $F38F    ; Call #R$F38F.
 $F3D9 LD BC,($DA17) ; #REGbc=*#R$DA17.
 $F3DD LD ($E75D),BC ; Write #REGbc to *#R$E75D.
 $F3E1 JR $F411      ; Jump to #R$F411.
*$F3E3 BIT 3,A       ; {Jump to #R$F3FB if bit 3 of #REGa is not set.
 $F3E5 JR Z,$F3FB    ; }
 $F3E7 RES 3,A       ; Reset bit 3 of #REGa.
 $F3E9 LD ($D838),A  ; Write #REGa to *#R$D838.
 $F3EC LD A,$3E      ; #REGa=#N$3E.
 $F3EE CALL $F38F    ; Call #R$F38F.
 $F3F1 LD BC,($DA19) ; {Write *#R$DA19 to *#R$E75D.
 $F3F5 LD ($E75D),BC ; }
 $F3F9 JR $F411      ; Jump to #R$F411.
*$F3FB BIT 4,A       ; {Jump to #R$F428 if bit 4 of #REGa is not set.
 $F3FD JR Z,$F428    ; }
 $F3FF RES 4,A       ; Reset bit 4 of #REGa.
 $F401 LD ($D838),A  ; Write #REGa to *#R$D838.
 $F404 LD A,$3F      ; #REGa=#N$3F.
 $F406 CALL $F38F    ; Call #R$F38F.
 $F409 LD BC,($DA1B) ; {Write *#R$DA1B to *#R$E75D.
 $F40D LD ($E75D),BC ; }
*$F411 XOR A         ; {Write #N$00 to *#R$D833.
 $F412 LD ($D833),A  ; }
 $F415 CALL $DABF    ; Call #R$DABF.
 $F418 LD A,$01      ; {Write #N$01 to *#R$D833.
 $F41A LD ($D833),A  ; }
 $F41D CALL $E9DA    ; Call #R$E9DA.
 $F420 CALL $E775    ; Call #R$E775.
 $F423 POP IY        ; Restore #REGiy from the stack.
 $F425 JP $D41E      ; Jump to #R$D41E.
*$F428 CALL $EB56    ; Call #R$EB56.
 $F42B CP $00        ; {Jump to #R$E396 if #REGa is not equal to #N$00.
 $F42D JP NZ,$E396   ; }
; This entry point is used by the routine at #R$F43E.
*$F430 LD A,($D835)  ; {Jump to #R$E320 if *#R$D835 is equal to #N$00.
 $F433 CP $00        ;
 $F435 JP Z,$E320    ; }
 $F438 CALL $E352    ; Call #R$E352.
 $F43B JP $F39E      ; Jump to #R$F39E.

; Routine at F43E
;
; Used by the routine at #R$E396.
c$F43E LD A,(HL)     ; #REGa=*#REGhl.
 $F43F LD HL,$E260   ; #REGhl=#R$E260.
 $F442 LD B,$00      ; #REGb=#N$00.
 $F444 LD C,A        ; #REGc=#REGa.
 $F445 ADD HL,BC     ; #REGhl+=#REGbc.
 $F446 LD A,(HL)     ; #REGa=*#REGhl.
 $F447 LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F44A CP $00        ; {Jump to #R$E352 if #REGa is equal to #N$00.
 $F44C JP Z,$E352    ; }
 $F44F LD ($E2C7),A  ; Write #REGa to *#R$E2C7.
 $F452 LD A,($D832)  ; {Jump to #R$F45E if *#R$D832 is equal to #N$03.
 $F455 CP $03        ;
 $F457 JR Z,$F45E    ; }
 $F459 LD A,$01      ; {Write #N$01 to *#R$D832.
 $F45B LD ($D832),A  ; }
*$F45E LD A,($D834)  ; #REGa=*#R$D834.
 $F461 CP $09        ; Compare #REGa with #N$09.
 $F463 LD A,($E5B2)  ; #REGa=*#R$E5B2.
 $F466 JP Z,$F801    ; Jump to #R$F801 if #REGa is zero.
 $F469 CP $11        ; {Jump to #R$F528 if #REGa is not equal to #N$11.
 $F46B JP NZ,$F528   ; }
; This entry point is used by the routine at #R$F801.
*$F46E INC HL        ; Increment #REGhl by one.
 $F46F LD A,(HL)     ; {Jump to #R$F477 if *#REGhl is not equal to #N$00.
 $F470 CP $00        ;
 $F472 JR NZ,$F477   ; }
 $F474 INC B         ; Increment #REGb by one.
 $F475 JR $F46E      ; Jump to #R$F46E.
*$F477 CALL $F130    ; Call #R$F130.
 $F47A CALL $F255    ; Call #R$F255.
 $F47D PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F47E PUSH HL       ; }
 $F47F CALL $D99B    ; Call #R$D99B.
 $F482 CALL $E2FD    ; Call #R$E2FD.
 $F485 CALL $DB7E    ; Call #R$DB7E.
 $F488 CALL $D9BE    ; Call #R$D9BE.
 $F48B POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F48C POP BC        ; }
 $F48D DEC HL        ; Decrease #REGhl by one.
 $F48E CALL $E2F1    ; Call #R$E2F1.
 $F491 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$02.
 $F494 CP $02        ;
 $F496 RET Z         ; }
 $F497 BIT 5,B       ; Test bit 5 of #REGb.
 $F499 JR Z,$F4B7    ; Jump to #R$F4B7 if #REGa is zero.
*$F49B LD A,$00      ; {Write #N$00 to *#R$D832.
 $F49D LD ($D832),A  ; }
*$F4A0 LD A,($E75E)  ; #REGa=*#R$E75E.
 $F4A3 CP $0F        ; Compare #REGa with #N$0F.
 $F4A5 RET P         ; Return P.
 $F4A6 ADD A,$04     ; #REGa+=#N$04.
 $F4A8 LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $F4AB INC HL        ; Increment #REGhl by one.
 $F4AC LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F4AF LD A,(HL)     ; {Write *#REGhl to *#R$E2C7.
 $F4B0 LD ($E2C7),A  ; }
 $F4B3 LD B,$00      ; #REGb=#N$00.
 $F4B5 JR $F46E      ; Jump to #R$F46E.
*$F4B7 LD A,($D832)  ; {Jump to #R$F4C5 if *#R$D832 is not equal to #N$00.
 $F4BA CP $00        ;
 $F4BC JR NZ,$F4C5   ; }
 $F4BE PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F4BF PUSH HL       ; }
 $F4C0 CALL $F5FB    ; Call #R$F5FB.
 $F4C3 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F4C4 POP BC        ; }
*$F4C5 LD A,($D832)  ; #REGa=*#R$D832.
 $F4C8 CP $02        ; {Return if #REGa is equal to #N$02.
 $F4CA RET Z         ; }
 $F4CB CP $03        ; {Jump to #R$F4D4 if #REGa is equal to #N$03.
 $F4CD JR Z,$F4D4    ; }
 $F4CF LD A,$01      ; {Write #N$01 to *#R$D832.
 $F4D1 LD ($D832),A  ; }
*$F4D4 BIT 6,B       ; Test bit 6 of #REGb.
 $F4D6 JR NZ,$F4E0   ; Jump to #R$F4E0 if #REGa is not zero.
 $F4D8 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$03.
 $F4DB CP $03        ;
 $F4DD RET Z         ; }
 $F4DE JR $F4A0      ; Jump to #R$F4A0.
*$F4E0 LD A,($E761)  ; {#REGc=*#R$E761.
 $F4E3 LD C,A        ; }
 $F4E4 LD A,($D82D)  ; #REGa=*#R$D82D.
 $F4E7 ADD A,C       ; #REGa+=#REGc.
 $F4E8 LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $F4EB LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F4EE CALL $E250    ; Call #R$E250.
 $F4F1 LD A,($D832)  ; {Jump to #R$F4FD if *#R$D832 is equal to #N$03.
 $F4F4 CP $03        ;
 $F4F6 JR Z,$F4FD    ; }
 $F4F8 LD A,$02      ; {Write #N$02 to *#R$D832.
 $F4FA LD ($D832),A  ; }
*$F4FD CALL $F52D    ; Call #R$F52D.
 $F500 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F501 PUSH HL       ; }
 $F502 CALL $F510    ; Call #R$F510.
 $F505 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F506 POP BC        ; }
 $F507 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$03.
 $F50A CP $03        ;
 $F50C RET Z         ; }
 $F50D JP $F586      ; Jump to #R$F586.
*$F510 LD A,($D82D)  ; #REGa=*#R$D82D.
 $F513 ADD A,$03     ; #REGa+=#N$03.
 $F515 RLCA          ; {RLCA.
 $F516 RLCA          ;
 $F517 RLCA          ; }
 $F518 DEC A         ; Decrease #REGa by one.
 $F519 LD H,A        ; #REGh=#REGa.
 $F51A LD A,($D82C)  ; #REGa=*#R$D82C.
 $F51D INC A         ; Increment #REGa by one.
 $F51E RLCA          ; {RLCA.
 $F51F RLCA          ;
 $F520 RLCA          ; }
 $F521 LD IX,$E17A   ; #REGix=#R$E17A.
 $F525 JP $E0E2      ; Jump to #R$E0E2.
*$F528 CP $12        ; {Jump to #R$F611 if #REGa is not equal to #N$12.
 $F52A JP NZ,$F611   ; }
*$F52D DEC HL        ; Decrease #REGhl by one.
 $F52E LD A,(HL)     ; {Jump to #R$F536 if *#REGhl is not equal to #N$00.
 $F52F CP $00        ;
 $F531 JR NZ,$F536   ; }
 $F533 INC B         ; Increment #REGb by one.
 $F534 JR $F52D      ; Jump to #R$F52D.
*$F536 CALL $F130    ; Call #R$F130.
 $F539 CALL $F255    ; Call #R$F255.
 $F53C PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F53D PUSH HL       ; }
 $F53E CALL $D99B    ; Call #R$D99B.
 $F541 CALL $E2FD    ; Call #R$E2FD.
 $F544 CALL $DBE5    ; Call #R$DBE5.
 $F547 CALL $D9BE    ; Call #R$D9BE.
 $F54A POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F54B POP BC        ; }
 $F54C BIT 7,B       ; Test bit 7 of #REGb.
 $F54E JR Z,$F578    ; Jump to #R$F578 if #REGb is zero.
 $F550 LD A,($E761)  ; #REGa=*#R$E761.
 $F553 PUSH AF       ; Stash #REGaf on the stack.
 $F554 CALL $E2DA    ; Call #R$E2DA.
 $F557 CALL $D99B    ; Call #R$D99B.
*$F55A PUSH BC       ; Stash #REGbc on the stack.
 $F55B LD A,$02      ; {Write #N$02 to *#R$E75E.
 $F55D LD ($E75E),A  ; }
 $F560 CALL $DBE5    ; Call #R$DBE5.
 $F563 POP BC        ; Restore #REGbc from the stack.
 $F564 DJNZ $F55A    ; Decrease counter by one and loop back to #R$F55A until
                     ; counter is zero.
 $F566 POP AF        ; Restore #REGaf from the stack.
 $F567 ADD A,$03     ; #REGa+=#N$03.
 $F569 LD ($E761),A  ; Write #REGa to *#R$E761.
 $F56C LD A,($D832)  ; #REGa=*#R$D832.
 $F56F CP $01        ; {Return if #REGa is equal to #N$01.
 $F571 RET Z         ; }
 $F572 CP $03        ; {Return if #REGa is equal to #N$03.
 $F574 RET Z         ; }
 $F575 JP $F510      ; Jump to #R$F510.
*$F578 INC HL        ; Increment #REGhl by one.
 $F579 CALL $E2F1    ; Call #R$E2F1.
 $F57C LD A,($D832)  ; {Return if *#R$D832 is equal to #N$02.
 $F57F CP $02        ;
 $F581 RET Z         ; }
 $F582 BIT 5,B       ; Test bit 5 of #REGb.
 $F584 JR Z,$F5A2    ; Jump to #R$F5A2 if #REGa is zero.
*$F586 LD A,$00      ; {Write #N$00 to *#R$D832.
 $F588 LD ($D832),A  ; }
*$F58B LD A,($E75E)  ; #REGa=*#R$E75E.
 $F58E CP $06        ; {Return if #REGa is lower than #N$06 (unsigned
 $F590 RET M         ; comparison).}
 $F591 SUB $04       ; #REGa-=#N$04.
 $F593 LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $F596 DEC HL        ; Decrease #REGhl by one.
 $F597 LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F59A LD A,(HL)     ; {Write *#REGhl to *#R$E2C7.
 $F59B LD ($E2C7),A  ; }
 $F59E LD B,$00      ; #REGb=#N$00.
 $F5A0 JR $F52D      ; Jump to #R$F52D.
*$F5A2 LD A,($D832)  ; {Jump to #R$F5B0 if *#R$D832 is not equal to #N$00.
 $F5A5 CP $00        ;
 $F5A7 JR NZ,$F5B0   ; }
 $F5A9 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F5AA PUSH HL       ; }
 $F5AB CALL $F510    ; Call #R$F510.
 $F5AE POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F5AF POP BC        ; }
*$F5B0 LD A,($D832)  ; #REGa=*#R$D832.
 $F5B3 CP $02        ; {Return if #REGa is equal to #N$02.
 $F5B5 RET Z         ; }
 $F5B6 CP $03        ; {Jump to #R$F5BF if #REGa is equal to #N$03.
 $F5B8 JR Z,$F5BF    ; }
 $F5BA LD A,$01      ; {Write #N$01 to *#R$D832.
 $F5BC LD ($D832),A  ; }
*$F5BF BIT 6,B       ; Test bit 6 of #REGb.
 $F5C1 JR NZ,$F5CB   ; Jump to #R$F5CB if #REGa is not zero.
 $F5C3 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$03.
 $F5C6 CP $03        ;
 $F5C8 RET Z         ; }
 $F5C9 JR $F58B      ; Jump to #R$F58B.
*$F5CB LD A,($E761)  ; {#REGc=*#R$E761.
 $F5CE LD C,A        ; }
 $F5CF LD A,($D82D)  ; #REGa=*#R$D82D.
 $F5D2 SUB C         ; #REGa-=#REGc.
 $F5D3 LD ($D82D),A  ; Write #REGa to *#R$D82D.
 $F5D6 LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F5D9 CALL $E250    ; Call #R$E250.
 $F5DC LD A,($D832)  ; {Jump to #R$F5E8 if *#R$D832 is equal to #N$03.
 $F5DF CP $03        ;
 $F5E1 JR Z,$F5E8    ; }
 $F5E3 LD A,$02      ; {Write #N$02 to *#R$D832.
 $F5E5 LD ($D832),A  ; }
*$F5E8 CALL $F46E    ; Call #R$F46E.
 $F5EB PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F5EC PUSH HL       ; }
 $F5ED CALL $F5FB    ; Call #R$F5FB.
 $F5F0 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F5F1 POP BC        ; }
 $F5F2 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$03.
 $F5F5 CP $03        ;
 $F5F7 RET Z         ; }
 $F5F8 JP $F49B      ; Jump to #R$F49B.
*$F5FB LD A,($D82D)  ; #REGa=*#R$D82D.
 $F5FE DEC A         ; Decrease #REGa by one.
 $F5FF RLCA          ; {RLCA.
 $F600 RLCA          ;
 $F601 RLCA          ; }
 $F602 LD H,A        ; #REGh=#REGa.
 $F603 LD A,($D82C)  ; #REGa=*#R$D82C.
 $F606 INC A         ; Increment #REGa by one.
 $F607 RLCA          ; {RLCA.
 $F608 RLCA          ;
 $F609 RLCA          ; }
 $F60A LD IX,$E16E   ; #REGix=#R$E16E.
 $F60E JP $E0E2      ; Jump to #R$E0E2.
*$F611 LD DE,$0007   ; #REGde=#N($0007,$04,$04).
 $F614 CP $14        ; {Jump to #R$F70B if #REGa is not equal to #N$14.
 $F616 JP NZ,$F70B   ; }
*$F619 ADD HL,DE     ; #REGhl+=#REGde.
 $F61A LD A,(HL)     ; {Jump to #R$F622 if *#REGhl is not equal to #N$00.
 $F61B CP $00        ;
 $F61D JR NZ,$F622   ; }
 $F61F INC B         ; Increment #REGb by one.
 $F620 JR $F619      ; Jump to #R$F619.
*$F622 CALL $F130    ; Call #R$F130.
 $F625 CALL $F255    ; Call #R$F255.
 $F628 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F629 PUSH HL       ; }
 $F62A CALL $D99B    ; Call #R$D99B.
 $F62D CALL $E2FD    ; Call #R$E2FD.
 $F630 CALL $DC4B    ; Call #R$DC4B.
 $F633 CALL $D9BE    ; Call #R$D9BE.
 $F636 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F637 POP BC        ; }
 $F638 BIT 7,B       ; Test bit 7 of #REGb.
 $F63A JR Z,$F664    ; Jump to #R$F664 if #REGb is zero.
 $F63C LD A,($E761)  ; #REGa=*#R$E761.
 $F63F PUSH AF       ; Stash #REGaf on the stack.
 $F640 CALL $E2DA    ; Call #R$E2DA.
 $F643 CALL $D99B    ; Call #R$D99B.
*$F646 PUSH BC       ; Stash #REGbc on the stack.
 $F647 LD A,$12      ; {Write #N$12 to *#R$E75D.
 $F649 LD ($E75D),A  ; }
 $F64C CALL $DC4B    ; Call #R$DC4B.
 $F64F POP BC        ; Restore #REGbc from the stack.
 $F650 DJNZ $F646    ; Decrease counter by one and loop back to #R$F646 until
                     ; counter is zero.
 $F652 POP AF        ; Restore #REGaf from the stack.
 $F653 ADD A,$03     ; #REGa+=#N$03.
 $F655 LD ($E761),A  ; Write #REGa to *#R$E761.
 $F658 LD A,($D832)  ; #REGa=*#R$D832.
 $F65B CP $01        ; {Return if #REGa is equal to #N$01.
 $F65D RET Z         ; }
 $F65E CP $03        ; {Return if #REGa is equal to #N$03.
 $F660 RET Z         ; }
 $F661 JP $F7EB      ; Jump to #R$F7EB.
*$F664 LD DE,$0007   ; {#REGhl-=#N($0007,$04,$04).
 $F667 AND A         ;
 $F668 SBC HL,DE     ; }
 $F66A CALL $E2F1    ; Call #R$E2F1.
 $F66D LD A,($D832)  ; {Return if *#R$D832 is equal to #N$02.
 $F670 CP $02        ;
 $F672 RET Z         ; }
 $F673 BIT 5,B       ; Test bit 5 of #REGb.
 $F675 JR Z,$F696    ; Jump to #R$F696 if #REGa is zero.
*$F677 LD A,$00      ; {Write #N$00 to *#R$D832.
 $F679 LD ($D832),A  ; }
*$F67C LD A,($E75D)  ; #REGa=*#R$E75D.
 $F67F CP $0F        ; Compare #REGa with #N$0F.
 $F681 RET P         ; Return P.
 $F682 ADD A,$04     ; #REGa+=#N$04.
 $F684 LD ($D82C),A  ; Write #REGa to *#R$D82C.
 $F687 LD DE,$0007   ; {#REGhl+=#N($0007,$04,$04).
 $F68A ADD HL,DE     ; }
 $F68B LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F68E LD A,(HL)     ; {Write *#REGhl to *#R$E2C7.
 $F68F LD ($E2C7),A  ; }
 $F692 LD B,$00      ; #REGb=#N$00.
 $F694 JR $F619      ; Jump to #R$F619.
*$F696 LD A,($D832)  ; {Jump to #R$F6A4 if *#R$D832 is not equal to #N$00.
 $F699 CP $00        ;
 $F69B JR NZ,$F6A4   ; }
 $F69D PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F69E PUSH HL       ; }
 $F69F CALL $F7EB    ; Call #R$F7EB.
 $F6A2 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F6A3 POP BC        ; }
*$F6A4 LD A,($D832)  ; #REGa=*#R$D832.
 $F6A7 CP $02        ; {Return if #REGa is equal to #N$02.
 $F6A9 RET Z         ; }
 $F6AA CP $03        ; {Jump to #R$F6B3 if #REGa is equal to #N$03.
 $F6AC JR Z,$F6B3    ; }
 $F6AE LD A,$01      ; {Write #N$01 to *#R$D832.
 $F6B0 LD ($D832),A  ; }
*$F6B3 BIT 6,B       ; Test bit 6 of #REGb.
 $F6B5 JR NZ,$F6BF   ; Jump to #R$F6BF if #REGa is not zero.
 $F6B7 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$03.
 $F6BA CP $03        ;
 $F6BC RET Z         ; }
 $F6BD JR $F67C      ; Jump to #R$F67C.
*$F6BF LD A,($E761)  ; {#REGc=*#R$E761.
 $F6C2 LD C,A        ; }
 $F6C3 LD A,($D82C)  ; #REGa=*#R$D82C.
 $F6C6 ADD A,C       ; #REGa+=#REGc.
 $F6C7 LD ($D82C),A  ; Write #REGa to *#R$D82C.
 $F6CA LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F6CD CALL $E250    ; Call #R$E250.
 $F6D0 LD A,($D832)  ; {Jump to #R$F6DC if *#R$D832 is equal to #N$03.
 $F6D3 CP $03        ;
 $F6D5 JR Z,$F6DC    ; }
 $F6D7 LD A,$02      ; {Write #N$02 to *#R$D832.
 $F6D9 LD ($D832),A  ; }
*$F6DC LD DE,$0007   ; #REGde=#N($0007,$04,$04).
 $F6DF AND A         ; Set flags.
 $F6E0 CALL $F711    ; Call #R$F711.
 $F6E3 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F6E4 PUSH HL       ; }
 $F6E5 CALL $F6F3    ; Call #R$F6F3.
 $F6E8 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F6E9 POP BC        ; }
 $F6EA LD A,($D832)  ; {Return if *#R$D832 is equal to #N$03.
 $F6ED CP $03        ;
 $F6EF RET Z         ; }
 $F6F0 JP $F76E      ; Jump to #R$F76E.
*$F6F3 LD A,($D82D)  ; #REGa=*#R$D82D.
 $F6F6 INC A         ; Increment #REGa by one.
 $F6F7 RLCA          ; {RLCA.
 $F6F8 RLCA          ;
 $F6F9 RLCA          ; }
 $F6FA LD H,A        ; #REGh=#REGa.
 $F6FB LD A,($D82C)  ; #REGa=*#R$D82C.
 $F6FE ADD A,$03     ; #REGa+=#N$03.
 $F700 RLCA          ; {RLCA.
 $F701 RLCA          ;
 $F702 RLCA          ; }
 $F703 DEC A         ; Decrease #REGa by one.
 $F704 LD IX,$E192   ; #REGix=#R$E192.
 $F708 JP $E0E2      ; Jump to #R$E0E2.
*$F70B CP $18        ; Compare #REGa with #N$18.
 $F70D JP NZ,$F430   ; Jump to #R$F430 if #REGa is not zero.
 $F710 AND A         ; Set flags.
*$F711 SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $F713 LD A,(HL)     ; #REGa=*#REGhl.
 $F714 CP $00        ; Compare #REGa with #N$00.
 $F716 JR NZ,$F71B   ; Jump to #R$F71B if #REGa is not zero.
 $F718 INC B         ; Increment #REGb by one.
 $F719 JR $F711      ; Jump to #R$F711.
*$F71B CALL $F130    ; Call #R$F130.
 $F71E CALL $F255    ; Call #R$F255.
 $F721 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F722 PUSH HL       ; }
 $F723 CALL $D99B    ; Call #R$D99B.
 $F726 CALL $E2FD    ; Call #R$E2FD.
 $F729 CALL $DCDC    ; Call #R$DCDC.
 $F72C CALL $D9BE    ; Call #R$D9BE.
 $F72F POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F730 POP BC        ; }
 $F731 BIT 7,B       ; Test bit 7 of #REGb.
 $F733 JR Z,$F75D    ; Jump to #R$F75D if #REGb is zero.
 $F735 LD A,($E761)  ; #REGa=*#R$E761.
 $F738 PUSH AF       ; Stash #REGaf on the stack.
 $F739 CALL $E2DA    ; Call #R$E2DA.
 $F73C CALL $D99B    ; Call #R$D99B.
*$F73F PUSH BC       ; Stash #REGbc on the stack.
 $F740 LD A,$02      ; #REGa=#N$02.
 $F742 LD ($E75D),A  ; Write #REGa to *#R$E75D.
 $F745 CALL $DCDC    ; Call #R$DCDC.
 $F748 POP BC        ; Restore #REGbc from the stack.
 $F749 DJNZ $F73F    ; Decrease counter by one and loop back to #R$F73F until
                     ; counter is zero.
 $F74B POP AF        ; Restore #REGaf from the stack.
 $F74C ADD A,$03     ; #REGa+=#N$03.
 $F74E LD ($E761),A  ; Write #REGa to *#R$E761.
 $F751 LD A,($D832)  ; #REGa=*#R$D832.
 $F754 CP $01        ; Compare #REGa with #N$01.
 $F756 RET Z         ; Return if #REGa is zero.
 $F757 CP $03        ; Compare #REGa with #N$03.
 $F759 RET Z         ; Return if #REGa is zero.
 $F75A JP $F6F3      ; Jump to #R$F6F3.
*$F75D LD DE,$0007   ; {#REGhl+=#N($0007,$04,$04).
 $F760 ADD HL,DE     ; }
 $F761 CALL $E2F1    ; Call #R$E2F1.
 $F764 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$02.
 $F767 CP $02        ;
 $F769 RET Z         ; }
 $F76A BIT 5,B       ; Test bit 5 of #REGb.
 $F76C JR Z,$F78F    ; Jump to #R$F78F if #REGa is zero.
*$F76E LD A,$00      ; {Write #N$00 to *#R$D832.
 $F770 LD ($D832),A  ; }
*$F773 LD A,($E75D)  ; #REGa=*#R$E75D.
 $F776 CP $05        ; {Return if #REGa is lower than #N$05 (unsigned
 $F778 RET M         ; comparison).}
 $F779 SUB $04       ; #REGa-=#N$04.
 $F77B LD ($D82C),A  ; Write #REGa to *#R$D82C.
 $F77E LD DE,$0007   ; {#REGhl-=#N($0007,$04,$04) (with carry).
 $F781 AND A         ;
 $F782 SBC HL,DE     ; }
 $F784 LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F787 LD A,(HL)     ; {Write *#REGhl to *#R$E2C7.
 $F788 LD ($E2C7),A  ; }
 $F78B LD B,$00      ; #REGb=#N$00.
 $F78D JR $F711      ; Jump to #R$F711.
*$F78F LD A,($D832)  ; {Jump to #R$F79D if *#R$D832 is not equal to #N$00.
 $F792 CP $00        ;
 $F794 JR NZ,$F79D   ; }
 $F796 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F797 PUSH HL       ; }
 $F798 CALL $F6F3    ; Call #R$F6F3.
 $F79B POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F79C POP BC        ; }
*$F79D LD A,($D832)  ; {Return if *#R$D832 is equal to #N$02.
 $F7A0 CP $02        ;
 $F7A2 RET Z         ; }
 $F7A3 CP $03        ; {Jump to #R$F7AC if *#R$D832 is equal to #N$03.
 $F7A5 JR Z,$F7AC    ; }
 $F7A7 LD A,$01      ; {Write #N$01 to *#R$D832.
 $F7A9 LD ($D832),A  ; }
*$F7AC BIT 6,B       ; Test bit 6 of #REGb.
 $F7AE JR NZ,$F7B8   ; Jump to #R$F7B8 if #REGa is not zero.
 $F7B0 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$03.
 $F7B3 CP $03        ;
 $F7B5 RET Z         ; }
 $F7B6 JR $F773      ; Jump to #R$F773.
*$F7B8 LD A,($E761)  ; {#REGc=*#R$E761.
 $F7BB LD C,A        ; }
 $F7BC LD A,($D82C)  ; #REGa=*#R$D82C.
 $F7BF SUB C         ; #REGa-=#REGc.
 $F7C0 LD ($D82C),A  ; Write #REGa to *#R$D82C.
 $F7C3 LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F7C6 CALL $E250    ; Call #R$E250.
 $F7C9 LD A,($D832)  ; {Jump to #R$F7D5 if *#R$D832 is equal to #N$03.
 $F7CC CP $03        ;
 $F7CE JR Z,$F7D5    ; }
 $F7D0 LD A,$02      ; {Write #N$02 to *#R$D832.
 $F7D2 LD ($D832),A  ; }
*$F7D5 LD DE,$0007   ; #REGde=#N($0007,$04,$04).
 $F7D8 CALL $F619    ; Call #R$F619.
 $F7DB PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $F7DC PUSH HL       ; }
 $F7DD CALL $F7EB    ; Call #R$F7EB.
 $F7E0 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $F7E1 POP BC        ; }
 $F7E2 LD A,($D832)  ; {Return if *#R$D832 is equal to #N$03.
 $F7E5 CP $03        ;
 $F7E7 RET Z         ; }
 $F7E8 JP $F677      ; Jump to #R$F677.
*$F7EB LD A,($D82D)  ; #REGa=*#R$D82D.
 $F7EE INC A         ; Increment #REGa by one.
 $F7EF RLCA          ; {RLCA.
 $F7F0 RLCA          ;
 $F7F1 RLCA          ; }
 $F7F2 LD H,A        ; #REGh=#REGa.
 $F7F3 LD A,($D82C)  ; #REGa=*#R$D82C.
 $F7F6 DEC A         ; Decrease #REGa by one.
 $F7F7 RLCA          ; {RLCA.
 $F7F8 RLCA          ;
 $F7F9 RLCA          ; }
 $F7FA LD IX,$E186   ; #REGix=#R$E186.
 $F7FE JP $E0E2      ; Jump to #R$E0E2.

; Routine at F801
;
; Used by the routine at #R$F43E.
c$F801 CP $10        ; {Jump to #R$E320 if #REGa is not equal to #N$10.
 $F803 JP NZ,$E320   ; }
 $F806 LD A,($E26A)  ; {Jump to #R$E320 if *#R$E26A is not equal to #N$00.
 $F809 CP $00        ;
 $F80B JP NZ,$E320   ; }
 $F80E CALL $E713    ; Call #R$E713.
 $F811 LD A,($E2C7)  ; #REGa=*#R$E2C7.
 $F814 CP $00        ; {Jump to #R$E320 if #REGa is equal to #N$00.
 $F816 JP Z,$E320    ; }
 $F819 LD ($E26A),A  ; Write #REGa to *#R$E26A.
 $F81C HALT          ; {Halt operation (suspend CPU until the next interrupt)
 $F81D HALT          ; three times.
 $F81E HALT          ; }
 $F81F CP $15        ; {Jump to #R$F84B if #REGa is lower than #N$15.
 $F821 JP M,$F84B    ; }
 $F824 CP $29        ; {Jump to #R$F853 if #REGa is lower than #N$29.
 $F826 JP M,$F853    ; }
 $F829 CP $3D        ; {Jump to #R$F858 if #REGa is lower than #N$3D.
 $F82B JP M,$F858    ; }
; Else, use #R$AC24 as the default spritesheet.
 $F82E LD HL,$AC24   ; #REGhl=#R$AC24.
; Set the active spritesheet.
@label=WriteSpriteBank
*$F831 LD ($E2C8),HL ; Write #REGhl to *#R$E2C8.
 $F834 CALL $DE69    ; Call #R$DE69.
 $F837 CALL $DA0B    ; Call #R$DA0B.
 $F83A LD HL,($E5B0) ; #REGhl=*#R$E5B0.
 $F83D INC HL        ; Increment #REGhl by one.
 $F83E LD ($E5B0),HL ; Write #REGhl to *#R$E5B0.
 $F841 LD B,$00      ; #REGb=#N$00.
 $F843 LD A,$06      ; {Write #N$06 to *#R$D82D.
 $F845 LD ($D82D),A  ; }
 $F848 JP $F46E      ; Jump to #R$F46E.
; Set the spritebank to the buffer image (containing the image tiles).
@label=SetSpriteBank_BufferImage
*$F84B CALL $DFB2    ; Call #R$DFB2.
 $F84E LD HL,$A0E3   ; #REGhl=#R$A0E3.
 $F851 JR $F831      ; Jump to #R$F831.
; Set spritebank #N$01.
@label=SetSpriteBank_01
*$F853 LD HL,$AC24   ; #REGhl=#R$AC24.
 $F856 JR $F831      ; Jump to #R$F831.
; Set spritebank #N$02.
@label=SetSpriteBank_02
*$F858 LD HL,$B765   ; #REGhl=#R$B765.
 $F85B JR $F831      ; Jump to #R$F831.

; Routine at F85D
;
; Used by the routine at #R$FDFD.
c$F85D DI            ; Disable interrupts.
 $F85E PUSH AF       ; {Stash #REGaf, #REGbc, #REGde, #REGhl and #REGix on the
 $F85F PUSH BC       ; stack.
 $F860 PUSH DE       ;
 $F861 PUSH HL       ;
 $F862 PUSH IX       ; }
 $F864 LD HL,$D839   ; {Jump to #R$F9A1 if bit 7 of *#R$D839 is set.
 $F867 BIT 7,(HL)    ;
 $F869 JP NZ,$F9A1   ; }
 $F86C LD A,($D835)  ; {Jump to #R$F87D if *#R$D835 is OFF (#N$00).
 $F86F CP $00        ;
 $F871 JP Z,$F87D    ; }
; The players cursor is showing, so update the attribute cycling
; animation.
 $F874 CALL $E63F    ; Call #R$E63F.
 $F877 CALL $E6C8    ; Call #R$E6C8.
 $F87A CALL $E5E4    ; Call #R$E5E4.
*$F87D LD A,($D83B)  ; {Jump to #R$F8C6 if *#R$D83B is equal to #N$00.
 $F880 CP $00        ;
 $F882 JP Z,$F8C6    ; }
 $F885 LD HL,$D842   ; #REGhl=#R$D842.
 $F888 DEC (HL)      ; Decrease *#REGhl by one.
 $F889 JP NZ,$F8C6   ; Jump to #R$F8C6 if *#REGhl is not zero.
 $F88C LD (HL),$03   ; Write #N$03 to *#REGhl.
 $F88E LD HL,($D853) ; #REGhl=*#R$D853.
 $F891 LD C,(HL)     ; #REGc=*#REGhl.
 $F892 INC HL        ; Increment #REGhl by one.
 $F893 LD B,(HL)     ; #REGb=*#REGhl.
 $F894 LD A,($DA15)  ; #REGa=*#R$DA15.
 $F897 CALL $DA85    ; Call #R$DA85.
 $F89A LD A,($DA16)  ; #REGa=*#R$DA16.
 $F89D CALL $DA8F    ; Call #R$DA8F.
 $F8A0 LD HL,$D846   ; #REGhl=#R$D846.
 $F8A3 DEC (HL)      ; Decrease *#REGhl by one.
 $F8A4 JP NZ,$F8C6   ; Jump to #R$F8C6 if *#REGhl is not zero.
 $F8A7 LD (HL),$06   ; Write #N$06 to *#REGhl.
 $F8A9 LD HL,($D853) ; #REGhl=*#R$D853.
 $F8AC INC HL        ; {Increment #REGhl by two.
 $F8AD INC HL        ; }
 $F8AE LD A,(HL)     ; {Jump to #R$F8C3 if *#REGhl is not equal to #N$FF.
 $F8AF CP $FF        ;
 $F8B1 JP NZ,$F8C3   ; }
 $F8B4 LD HL,$D838   ; #REGhl=#R$D838.
 $F8B7 SET 1,(HL)    ; Set bit 1 of *#REGhl.
 $F8B9 XOR A         ; {Write #N$00 to *#R$D83B.
 $F8BA LD ($D83B),A  ; }
 $F8BD CALL $DAB1    ; Call #R$DAB1.
 $F8C0 LD HL,$DA1F   ; {Write #R$DA1F to *#R$D853.
*$F8C3 LD ($D853),HL ; }
*$F8C6 LD A,($D83C)  ; {Jump to #R$F90F if *#R$D83C is equal to #N$00.
 $F8C9 CP $00        ;
 $F8CB JP Z,$F90F    ; }
 $F8CE LD HL,$D843   ; #REGhl=#R$D843.
 $F8D1 DEC (HL)      ; Decrease *#REGhl by one.
 $F8D2 JP NZ,$F90F   ; Jump to #R$F90F if *#REGhl is not zero.
 $F8D5 LD (HL),$03   ; Write #N$03 to *#REGhl.
 $F8D7 LD HL,($D855) ; #REGhl=*#R$D855.
 $F8DA LD C,(HL)     ; #REGc=*#REGhl.
 $F8DB INC HL        ; Increment #REGhl by one.
 $F8DC LD B,(HL)     ; #REGb=*#REGhl.
 $F8DD LD A,($DA17)  ; #REGa=*#R$DA17.
 $F8E0 CALL $DA85    ; Call #R$DA85.
 $F8E3 LD A,($DA18)  ; #REGa=*#R$DA18.
 $F8E6 CALL $DA8F    ; Call #R$DA8F.
 $F8E9 LD HL,$D847   ; #REGhl=#R$D847.
 $F8EC DEC (HL)      ; Decrease *#REGhl by one.
 $F8ED JP NZ,$F90F   ; Jump to #R$F90F if *#REGhl is not zero.
 $F8F0 LD (HL),$06   ; Write #N$06 to *#REGhl.
 $F8F2 LD HL,($D855) ; #REGhl=*#R$D855.
 $F8F5 INC HL        ; {Increment #REGhl by two.
 $F8F6 INC HL        ; }
 $F8F7 LD A,(HL)     ; {Jump to #R$F90C if *#REGhl is not equal to #N$FF.
 $F8F8 CP $FF        ;
 $F8FA JP NZ,$F90C   ; }
 $F8FD LD HL,$D838   ; #REGhl=#R$D838.
 $F900 SET 2,(HL)    ; Set bit 2 of *#REGhl.
 $F902 XOR A         ; {Write #N$00 to *#R$D83C.
 $F903 LD ($D83C),A  ; }
 $F906 CALL $DAB1    ; Call #R$DAB1.
 $F909 LD HL,$DA1F   ; {Write #R$DA1F to *#R$D855.
*$F90C LD ($D855),HL ; }
*$F90F LD A,($D83D)  ; {Jump to #R$F958 if *#R$D83D is equal to #N$00.
 $F912 CP $00        ;
 $F914 JP Z,$F958    ; }
 $F917 LD HL,$D844   ; #REGhl=#R$D844.
 $F91A DEC (HL)      ; Decrease *#REGhl by one.
 $F91B JP NZ,$F958   ; Jump to #R$F958 if *#REGhl is not zero.
 $F91E LD (HL),$03   ; Write #N$03 to *#REGhl.
 $F920 LD HL,($D857) ; #REGhl=*#R$D857.
 $F923 LD C,(HL)     ; #REGc=*#REGhl.
 $F924 INC HL        ; Increment #REGhl by one.
 $F925 LD B,(HL)     ; #REGb=*#REGhl.
 $F926 LD A,($DA19)  ; #REGa=*#R$DA19.
 $F929 CALL $DA85    ; Call #R$DA85.
 $F92C LD A,($DA1A)  ; #REGa=*#R$DA1A.
 $F92F CALL $DA8F    ; Call #R$DA8F.
 $F932 LD HL,$D848   ; #REGhl=#R$D848.
 $F935 DEC (HL)      ; Decrease *#REGhl by one.
 $F936 JP NZ,$F958   ; Jump to #R$F958 if *#REGhl is not zero.
 $F939 LD (HL),$06   ; Write #N$06 to *#REGhl.
 $F93B LD HL,($D857) ; #REGhl=*#R$D857.
 $F93E INC HL        ; {Increment #REGhl by two.
 $F93F INC HL        ; }
 $F940 LD A,(HL)     ; {Jump to #R$F955 if *#REGhl is not equal to #N$FF.
 $F941 CP $FF        ;
 $F943 JP NZ,$F955   ; }
 $F946 LD HL,$D838   ; #REGhl=#R$D838.
 $F949 SET 3,(HL)    ; Set bit 3 of *#REGhl.
 $F94B XOR A         ; {Write #N$00 to *#R$D83D.
 $F94C LD ($D83D),A  ; }
 $F94F CALL $DAB1    ; Call #R$DAB1.
 $F952 LD HL,$DA1F   ; {Write #R$DA1F to *#R$D857.
*$F955 LD ($D857),HL ; }
*$F958 LD A,($D83E)  ; {Jump to #R$F9A1 if *#R$D83E is equal to #N$00.
 $F95B CP $00        ;
 $F95D JP Z,$F9A1    ; }
 $F960 LD HL,$D845   ; #REGhl=#R$D845.
 $F963 DEC (HL)      ; Decrease *#REGhl by one.
 $F964 JP NZ,$F9A1   ; Jump to #R$F9A1 if *#REGhl is not zero.
 $F967 LD (HL),$03   ; Write #N$03 to *#REGhl.
 $F969 LD HL,($D859) ; #REGhl=*#R$D859.
 $F96C LD C,(HL)     ; #REGc=*#REGhl.
 $F96D INC HL        ; Increment #REGhl by one.
 $F96E LD B,(HL)     ; #REGb=*#REGhl.
 $F96F LD A,($DA1B)  ; #REGa=*#R$DA1B.
 $F972 CALL $DA85    ; Call #R$DA85.
 $F975 LD A,($DA1C)  ; #REGa=*#R$DA1C.
 $F978 CALL $DA8F    ; Call #R$DA8F.
 $F97B LD HL,$D849   ; #REGhl=#R$D849.
 $F97E DEC (HL)      ; Decrease *#REGhl by one.
 $F97F JP NZ,$F9A1   ; Jump to #R$F9A1 if *#REGhl is not zero.
 $F982 LD (HL),$06   ; Write #N$06 to *#REGhl.
 $F984 LD HL,($D859) ; #REGhl=*#R$D859.
 $F987 INC HL        ; {Increment #REGhl by two.
 $F988 INC HL        ; }
 $F989 LD A,(HL)     ; {Jump to #R$F99E if *#REGhl is not equal to #N$FF.
 $F98A CP $FF        ;
 $F98C JP NZ,$F99E   ; }
 $F98F LD HL,$D838   ; #REGhl=#R$D838.
 $F992 SET 4,(HL)    ; Set bit 4 of *#REGhl.
 $F994 XOR A         ; {Write #N$00 to *#R$D83E.
 $F995 LD ($D83E),A  ; }
 $F998 CALL $DAB1    ; Call #R$DAB1.
 $F99B LD HL,$DA1F   ; {Write #R$DA1F to *#R$D859.
*$F99E LD ($D859),HL ; }
*$F9A1 LD HL,$D839   ; {Jump to #R$F9DD if bit 1 of *#R$D839 is set.
 $F9A4 BIT 1,(HL)    ;
 $F9A6 JP NZ,$F9DD   ; }
 $F9A9 LD HL,$D850   ; #REGhl=#R$D850.
 $F9AC DEC (HL)      ; Decrease *#REGhl by one.
 $F9AD JP NZ,$FA49   ; Jump to #R$FA49 if *#REGhl is not zero.
 $F9B0 LD (HL),$01   ; Write #N$01 to *#REGhl.
 $F9B2 LD A,($D839)  ; {Jump to #R$FA49 if bit 0 of *#R$D839 is set.
 $F9B5 BIT 0,A       ;
 $F9B7 JP NZ,$FA49   ; }
 $F9BA LD (HL),$1E   ; Write #N$1E to *#REGhl.
 $F9BC LD HL,$D839   ; #REGhl=#R$D839.
 $F9BF SET 1,(HL)    ; Set bit 1 of *#REGhl.
 $F9C1 LD HL,$D815   ; #REGhl=#R$D815.
 $F9C4 RLC (HL)      ; Rotate *#REGhl left (with carry).
 $F9C6 LD HL,$D839   ; #REGhl=#R$D839.
 $F9C9 JP NC,$F9D6   ; Jump to #R$F9D6 if *#REGhl is higher.
 $F9CC BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $F9CE JP NZ,$F9D6   ; Jump to #R$F9D6 if *#REGhl is not zero.
 $F9D1 SET 2,(HL)    ; Set bit 2 of *#REGhl.
 $F9D3 JP $F9DD      ; Jump to #R$F9DD.
*$F9D6 RES 2,(HL)    ; Reset bit 2 of *#REGhl.
 $F9D8 LD A,$FF      ; {Write #N$FF to *#R$E264.
 $F9DA LD ($E264),A  ; }
*$F9DD BIT 2,(HL)    ; Test bit 2 of *#REGhl.
 $F9DF LD A,$45      ; #REGa=#COLOUR$45.
 $F9E1 LD ($5809),A  ; Write #REGa to *#N$5809 (attribute buffer location).
 $F9E4 LD ($580A),A  ; Write #REGa to *#N$580A (attribute buffer location).
 $F9E7 LD ($580B),A  ; Write #REGa to *#N$580B (attribute buffer location).
 $F9EA LD ($580C),A  ; Write #REGa to *#N$580C (attribute buffer location).
 $F9ED LD HL,($D84A) ; #REGhl=*#R$D84A.
 $F9F0 LD B,$08      ; #REGb=#N$08.
 $F9F2 JP Z,$FA22    ; Jump to #R$FA22 if *#REGhl is zero.
*$F9F5 SLA (HL)      ; {Shift *#REGhl left two positions (with carry).
 $F9F7 SLA (HL)      ; }
 $F9F9 JP NC,$FA02   ; Jump to #R$FA02 if *#REGhl is higher.
 $F9FC INC H         ; Increment #REGh by one.
 $F9FD DJNZ $F9F5    ; Decrease counter by one and loop back to #R$F9F5 until
                     ; counter is zero.
 $F9FF JP $FA49      ; Jump to #R$FA49.
*$FA02 LD A,($D828)  ; #REGa=*#R$D828.
 $FA05 CP $01        ; {Jump to #R$FA15 if #REGa is equal to #N$01.
 $FA07 JP Z,$FA15    ; }
 $FA0A DEC A         ; Decrease #REGa by one.
 $FA0B LD ($D828),A  ; Write #REGa to *#R$D828.
 $FA0E DEC HL        ; Decrease #REGhl by one.
 $FA0F LD ($D84A),HL ; Write #REGhl to *#R$D84A.
 $FA12 JP $F9F5      ; Jump to #R$F9F5.
*$FA15 LD HL,$D839   ; #REGhl=#R$D839.
 $FA18 RES 1,(HL)    ; Reset bit 1 of *#REGhl.
 $FA1A LD A,$80      ; {Write #N$80 to *#R$E264.
 $FA1C LD ($E264),A  ; }
 $FA1F JP $FA49      ; Jump to #R$FA49.
*$FA22 SCF           ; Set the carry flag.
 $FA23 RR (HL)       ; Rotate *#REGhl right.
 $FA25 SCF           ; Set the carry flag.
 $FA26 RR (HL)       ; Rotate *#REGhl right.
 $FA28 JP C,$FA31    ; Jump to #R$FA31 if #REGhl is lower.
 $FA2B INC H         ; Increment #REGh by one.
 $FA2C DJNZ $FA22    ; Decrease counter by one and loop back to #R$FA22 until
                     ; counter is zero.
 $FA2E JP $FA49      ; Jump to #R$FA49.
*$FA31 LD A,($D828)  ; #REGa=*#R$D828.
 $FA34 CP $04        ; {Jump to #R$FA44 if #REGa is equal to #N$04.
 $FA36 JP Z,$FA44    ; }
 $FA39 INC A         ; Increment #REGa by one.
 $FA3A LD ($D828),A  ; Write #REGa to *#R$D828.
 $FA3D INC HL        ; Increment #REGhl by one.
 $FA3E LD ($D84A),HL ; Write #REGhl to *#R$D84A.
 $FA41 JP $FA22      ; Jump to #R$FA22.
*$FA44 LD HL,$D839   ; #REGhl=#R$D839.
 $FA47 RES 1,(HL)    ; Reset bit 1 of *#REGhl.
*$FA49 LD HL,$D839   ; #REGhl=#R$D839.
 $FA4C BIT 3,(HL)    ; Test bit 3 of *#REGhl.
 $FA4E JP NZ,$FA85   ; Jump to #R$FA85 if #REGhl is not zero.
 $FA51 LD HL,$D851   ; #REGhl=#R$D851.
 $FA54 DEC (HL)      ; Decrease *#REGhl by one.
 $FA55 JP NZ,$FB09   ; Jump to #R$FB09 if *#REGhl is not zero.
 $FA58 LD (HL),$01   ; Write #N$01 to *#REGhl.
 $FA5A LD A,($D839)  ; #REGa=*#R$D839.
 $FA5D BIT 0,A       ; Test bit 0 of #REGa.
 $FA5F JP NZ,$FB09   ; Jump to #R$FB09 if *#REGhl is not zero.
 $FA62 LD (HL),$1E   ; Write #N$1E to *#REGhl.
 $FA64 LD HL,$D839   ; #REGhl=#R$D839.
 $FA67 SET 3,(HL)    ; Set bit 3 of *#REGhl.
 $FA69 LD HL,$D816   ; #REGhl=#R$D816.
 $FA6C RLC (HL)      ; Rotate *#REGhl left (with carry).
 $FA6E LD HL,$D839   ; #REGhl=#R$D839.
 $FA71 JP NC,$FA7E   ; Jump to #R$FA7E if *#REGhl is higher.
 $FA74 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $FA76 JP NZ,$FA7E   ; Jump to #R$FA7E if *#REGhl is not zero.
 $FA79 SET 4,(HL)    ; Set bit 4 of *#REGhl.
 $FA7B JP $FA85      ; Jump to #R$FA85.
*$FA7E RES 4,(HL)    ; Reset bit 4 of *#REGhl.
 $FA80 LD A,$FF      ; {Write #N$FF to *#R$E28E.
 $FA82 LD ($E28E),A  ; }
*$FA85 BIT 4,(HL)    ; Test bit 4 of *#REGhl.
 $FA87 LD A,$45      ; #REGa=#COLOUR$45.
 $FA89 LD ($5AA9),A  ; Write #REGa to *#N$5AA9 (attribute buffer location).
 $FA8C LD ($5AAA),A  ; Write #REGa to *#N$5AAA (attribute buffer location).
 $FA8F LD ($5AAB),A  ; Write #REGa to *#N$5AAB (attribute buffer location).
 $FA92 LD ($5AAC),A  ; Write #REGa to *#N$5AAC (attribute buffer location).
 $FA95 LD HL,($D84C) ; #REGhl=*#R$D84C.
 $FA98 LD B,$08      ; #REGb=#N$08.
 $FA9A JP Z,$FAD6    ; Jump to #R$FAD6 if *#REGhl is zero.
; This entry point is used by the routine at #R$EE61.
*$FA9D SRL (HL)      ; Shift *#REGhl right.
 $FA9F SRL (HL)      ; Shift *#REGhl right.
 $FAA1 JP NC,$FAB0   ; Jump to #R$FAB0 if *#REGhl is higher.
 $FAA4 INC H         ; Increment #REGh by one.
 $FAA5 DJNZ $FA9D    ; Decrease counter by one and loop back to #R$FA9D until
                     ; counter is zero.
 $FAA7 LD HL,$D83A   ; #REGhl=#R$D83A.
 $FAAA BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $FAAC RET NZ        ; Return if #REGh is not zero.
 $FAAD JP $FB09      ; Jump to #R$FB09.
*$FAB0 LD A,($D829)  ; #REGa=*#R$D829.
 $FAB3 CP $01        ; {Jump to #R$FAC3 if #REGa is equal to #N$01.
 $FAB5 JP Z,$FAC3    ; }
 $FAB8 DEC A         ; Decrease #REGa by one.
 $FAB9 LD ($D829),A  ; Write #REGa to *#R$D829.
 $FABC INC HL        ; Increment #REGhl by one.
 $FABD LD ($D84C),HL ; Write #REGhl to *#R$D84C.
 $FAC0 JP $FA9D      ; Jump to #R$FA9D.
*$FAC3 LD HL,$D839   ; #REGhl=#R$D839.
 $FAC6 RES 3,(HL)    ; Reset bit 3 of *#REGhl.
 $FAC8 LD A,$80      ; {Write #N$80 to *#R$E28E.
 $FACA LD ($E28E),A  ; }
 $FACD LD HL,$D83A   ; #REGhl=#R$D83A.
 $FAD0 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $FAD2 RET NZ        ; Return if #REGhl is not zero.
 $FAD3 JP $FB09      ; Jump to #R$FB09.
; This entry point is used by the routine at #R$EE61.
*$FAD6 SCF           ; Set the carry flag.
 $FAD7 RL (HL)       ; Rotate *#REGhl left.
 $FAD9 SCF           ; Set the carry flag.
 $FADA RL (HL)       ; Rotate *#REGhl left.
 $FADC JP C,$FAEB    ; Jump to #R$FAEB if #REGhl is lower.
 $FADF INC H         ; Increment #REGh by one.
 $FAE0 DJNZ $FAD6    ; Decrease counter by one and loop back to #R$FAD6 until
                     ; counter is zero.
 $FAE2 LD HL,$D83A   ; #REGhl=#R$D83A.
 $FAE5 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $FAE7 RET NZ        ; Return if #REGh is not zero.
 $FAE8 JP $FB09      ; Jump to #R$FB09.
*$FAEB LD A,($D829)  ; #REGa=*#R$D829.
 $FAEE CP $04        ; {Jump to #R$FAFE if #REGa is equal to #N$04.
 $FAF0 JP Z,$FAFE    ; }
 $FAF3 INC A         ; Increment #REGa by one.
 $FAF4 LD ($D829),A  ; Write #REGa to *#R$D829.
 $FAF7 DEC HL        ; Decrease #REGhl by one.
 $FAF8 LD ($D84C),HL ; Write #REGhl to *#R$D84C.
 $FAFB JP $FAD6      ; Jump to #R$FAD6.
*$FAFE LD HL,$D839   ; #REGhl=#R$D839.
 $FB01 RES 3,(HL)    ; Reset bit 3 of *#REGhl.
 $FB03 LD HL,$D83A   ; #REGhl=#R$D83A.
 $FB06 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $FB08 RET NZ        ; Return if #REGhl is not zero.
*$FB09 LD HL,$D839   ; #REGhl=#R$D839.
 $FB0C BIT 5,(HL)    ; Test bit 5 of *#REGhl.
 $FB0E JP NZ,$FB45   ; Jump to #R$FB45 if #REGhl is not zero.
 $FB11 LD HL,$D852   ; #REGhl=#R$D852.
 $FB14 DEC (HL)      ; Decrease *#REGhl by one.
 $FB15 JP NZ,$FBDD   ; Jump to #R$FBDD if *#REGhl is not zero.
 $FB18 LD (HL),$01   ; Write #N$01 to *#REGhl.
 $FB1A LD A,($D839)  ; #REGa=*#R$D839.
 $FB1D BIT 0,A       ; Test bit 0 of #REGa.
 $FB1F JP NZ,$FBDD   ; Jump to #R$FBDD if *#REGhl is not zero.
 $FB22 LD (HL),$1E   ; Write #N$1E to *#REGhl.
 $FB24 LD HL,$D839   ; #REGhl=#R$D839.
 $FB27 SET 5,(HL)    ; Set bit 5 of *#REGhl.
 $FB29 LD HL,$D817   ; #REGhl=#R$D817.
 $FB2C RLC (HL)      ; Rotate *#REGhl left (with carry).
 $FB2E LD HL,$D839   ; #REGhl=#R$D839.
 $FB31 JP NC,$FB3E   ; Jump to #R$FB3E if *#REGhl is higher.
 $FB34 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $FB36 JP NZ,$FB3E   ; Jump to #R$FB3E if *#REGhl is not zero.
 $FB39 SET 6,(HL)    ; Set bit 6 of *#REGhl.
 $FB3B JP $FB45      ; Jump to #R$FB45.
*$FB3E RES 6,(HL)    ; Reset bit 6 of *#REGhl.
 $FB40 LD A,$FF      ; {Write #N$FF to *#R$E276.
 $FB42 LD ($E276),A  ; }
*$FB45 BIT 6,(HL)    ; Test bit 6 of *#REGhl.
 $FB47 LD A,$45      ; #REGa=#COLOUR$45.
 $FB49 LD ($5920),A  ; Write #REGa to *#N$5920 (attribute buffer location).
 $FB4C LD ($5940),A  ; Write #REGa to *#N$5940 (attribute buffer location).
 $FB4F LD ($5960),A  ; Write #REGa to *#N$5960 (attribute buffer location).
 $FB52 LD ($5980),A  ; Write #REGa to *#N$5980 (attribute buffer location).
 $FB55 LD HL,($D84E) ; #REGhl=*#R$D84E.
 $FB58 JP Z,$FBA0    ; Jump to #R$FBA0 if *#REGhl is zero.
 $FB5B LD A,(HL)     ; {Jump to #R$FB93 if *#REGhl is equal to #N$00.
 $FB5C CP $00        ;
 $FB5E JP Z,$FB93    ; }
 $FB61 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $FB63 INC H         ; Increment #REGh by one.
 $FB64 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $FB66 INC H         ; Increment #REGh by one.
 $FB67 LD ($D84E),HL ; Write #REGhl to *#R$D84E.
 $FB6A LD HL,$D82A   ; #REGhl=#R$D82A.
 $FB6D DEC (HL)      ; Decrease *#REGhl by one.
 $FB6E JP NZ,$FBDD   ; Jump to #R$FBDD if *#REGhl is not zero.
 $FB71 LD (HL),$04   ; Write #N$04 to *#REGhl.
 $FB73 LD HL,($D84E) ; #REGhl=*#R$D84E.
 $FB76 LD DE,$07E0   ; #REGde=#N($07E0,$04,$04).
 $FB79 SCF           ; Set the carry flag.
 $FB7A CCF           ; Invert the carry flag.
 $FB7B SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $FB7D LD ($D84E),HL ; Write #REGhl to *#R$D84E.
 $FB80 LD HL,$D82B   ; #REGhl=#R$D82B.
 $FB83 DEC (HL)      ; Decrease *#REGhl by one.
 $FB84 JP NZ,$FBDD   ; Jump to #R$FBDD if *#REGhl is not zero.
 $FB87 LD (HL),$04   ; Write #N$04 to *#REGhl.
 $FB89 LD HL,($D84E) ; #REGhl=*#R$D84E.
 $FB8C LD DE,$06E0   ; {#REGhl+=#N($06E0,$04,$04).
 $FB8F ADD HL,DE     ; }
 $FB90 LD ($D84E),HL ; Write #REGhl to *#R$D84E.
*$FB93 LD HL,$D839   ; #REGhl=#R$D839.
 $FB96 RES 5,(HL)    ; Reset bit 5 of *#REGhl.
 $FB98 LD A,$80      ; {Write #N$80 to *#R$E276.
 $FB9A LD ($E276),A  ; }
 $FB9D JP $FBDD      ; Jump to #R$FBDD.
*$FBA0 LD A,(HL)     ; {Jump to #R$FBD8 if *#REGhl is not equal to #N$00.
 $FBA1 CP $00        ;
 $FBA3 JP NZ,$FBD8   ; }
 $FBA6 LD (HL),$FF   ; Write #N$FF to *#REGhl.
 $FBA8 DEC H         ; Decrease #REGh by one.
 $FBA9 LD (HL),$FF   ; Write #N$FF to *#REGhl.
 $FBAB DEC H         ; Decrease #REGh by one.
 $FBAC LD ($D84E),HL ; Write #REGhl to *#R$D84E.
 $FBAF LD HL,$D82A   ; #REGhl=#R$D82A.
 $FBB2 DEC (HL)      ; Decrease *#REGhl by one.
 $FBB3 JP NZ,$FBDD   ; Jump to #R$FBDD if *#REGhl is not zero.
 $FBB6 LD (HL),$04   ; Write #N$04 to *#REGhl.
 $FBB8 LD HL,($D84E) ; #REGhl=*#R$D84E.
 $FBBB LD DE,$07E0   ; {#REGhl+=#N($07E0,$04,$04).
 $FBBE ADD HL,DE     ; }
 $FBBF LD ($D84E),HL ; Write #REGhl to *#R$D84E.
 $FBC2 LD HL,$D82B   ; #REGhl=#R$D82B.
 $FBC5 DEC (HL)      ; Decrease *#REGhl by one.
 $FBC6 JP NZ,$FBDD   ; Jump to #R$FBDD if *#REGhl is not zero.
 $FBC9 LD (HL),$04   ; Write #N$04 to *#REGhl.
 $FBCB LD HL,($D84E) ; #REGhl=*#R$D84E.
 $FBCE LD DE,$06E0   ; #REGde=#N($06E0,$04,$04).
 $FBD1 SCF           ; Set the carry flag.
 $FBD2 CCF           ; Invert the carry flag.
 $FBD3 SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $FBD5 LD ($D84E),HL ; Write #REGhl to *#R$D84E.
*$FBD8 LD HL,$D839   ; #REGhl=#R$D839.
 $FBDB RES 5,(HL)    ; Reset bit 5 of *#REGhl.
*$FBDD LD HL,$D85F   ; #REGhl=#R$D85F.
 $FBE0 LD B,$0C      ; #REGb=#N$0C.
*$FBE2 DEC (HL)      ; Decrease *#REGhl by one.
 $FBE3 CALL Z,$FBEC  ; Call #R$FBEC zero.
 $FBE6 INC HL        ; Increment #REGhl by one.
 $FBE7 DJNZ $FBE2    ; Decrease counter by one and loop back to #R$FBE2 until
                     ; counter is zero.
 $FBE9 JP $FC43      ; Jump to #R$FC43.
*$FBEC LD (HL),$1E   ; Write #N$1E to *#REGhl.
 $FBEE PUSH HL       ; Stash #REGhl on the stack.
 $FBEF LD HL,$D818   ; #REGhl=#R$D818.
 $FBF2 LD A,$0C      ; #REGa=#N$0C.
 $FBF4 SUB B         ; #REGa-=#REGb.
 $FBF5 LD D,$00      ; #REGd=#N$00.
 $FBF7 LD E,A        ; #REGe=#REGa.
 $FBF8 ADD HL,DE     ; #REGhl+=#REGde.
 $FBF9 RLC (HL)      ; Rotate *#REGhl left (with carry).
 $FBFB JP NC,$FC10   ; Jump to #R$FC10 if #REGhl is higher.
 $FBFE LD HL,$D839   ; #REGhl=#R$D839.
 $FC01 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $FC03 JP NZ,$FC10   ; Jump to #R$FC10 if #REGhl is not zero.
 $FC06 LD C,$68      ; #REGc=#N$68.
 $FC08 CALL $FC1A    ; Call #R$FC1A.
 $FC0B LD C,$40      ; #REGc=#N$40.
 $FC0D JP $FC32      ; Jump to #R$FC32.
*$FC10 LD C,$6D      ; #REGc=#N$6D.
 $FC12 CALL $FC1A    ; Call #R$FC1A.
 $FC15 LD C,$FF      ; #REGc=#N$FF.
 $FC17 JP $FC32      ; Jump to #R$FC32.
*$FC1A LD IX,$D6B4   ; #REGix=#R$D6B4.
 $FC1E RLCA          ; {RLCA.
 $FC1F RLCA          ; }
 $FC20 LD E,A        ; #REGe=#REGa.
 $FC21 ADD IX,DE     ; #REGix+=#REGde.
 $FC23 LD L,(IX+$00) ; #REGl=*#REGix+#N$00.
 $FC26 LD H,(IX+$01) ; #REGh=*#REGix+#N$01.
 $FC29 LD (HL),C     ; Write #REGc to *#REGhl.
 $FC2A LD L,(IX+$02) ; #REGl=*#REGix+#N$02.
 $FC2D LD H,(IX+$03) ; #REGh=*#REGix+#N$03.
 $FC30 LD (HL),C     ; Write #REGc to *#REGhl.
 $FC31 RET           ; Return.
*$FC32 LD IX,$D6E4   ; #REGix=#R$D6E4.
 $FC36 RRCA          ; RRCA.
 $FC37 LD E,A        ; #REGe=#REGa.
 $FC38 ADD IX,DE     ; #REGix+=#REGde.
 $FC3A LD L,(IX+$00) ; #REGl=*#REGix+#N$00.
 $FC3D LD H,(IX+$01) ; #REGh=*#REGix+#N$01.
 $FC40 LD (HL),C     ; Write #REGc to *#REGhl.
 $FC41 POP HL        ; Restore #REGhl from the stack.
 $FC42 RET           ; Return.

; Routine at FC43
;
; Used by the routine at #R$F85D.
c$FC43 LD HL,$D83A   ; #REGhl=#R$D83A.
 $FC46 BIT 0,(HL)    ; Test bit 0 of *#REGhl.
 $FC48 JP Z,$FCA4    ; Jump to #R$FCA4 if  is zero.
 $FC4B LD HL,$D85D   ; #REGhl=#R$D85D.
 $FC4E DEC (HL)      ; Decrease *#REGhl by one.
 $FC4F JP NZ,$FCA4   ; Jump to #R$FCA4 if *#REGhl is not zero.
 $FC52 LD (HL),$4B   ; Write #N$4B to *#REGhl.
 $FC54 LD HL,$D83A   ; #REGhl=#R$D83A.
 $FC57 BIT 5,(HL)    ; Test bit 5 of *#REGhl.
 $FC59 JP Z,$FC6D    ; Jump to #R$FC6D if *#REGhl is zero.
 $FC5C LD A,$05      ; #REGa=#N$05.
 $FC5E LD D,$32      ; #REGd=#N$32.
 $FC60 LD E,$50      ; #REGe=#N$50.
*$FC62 XOR %00010000 ; Flip bit 4.
 $FC64 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $FC66 LD B,D        ; #REGb=#REGd.
*$FC67 DJNZ $FC67    ; Decrease counter by one and loop back to #R$FC67 until
                     ; counter is zero.
 $FC69 DEC E         ; Decrease #REGe by one.
 $FC6A JP NZ,$FC62   ; Jump to #R$FC62 if #REGe is not zero.
; This entry point is used by the routine at #R$D894.
*$FC6D LD HL,($D85B) ; #REGhl=*#R$D85B.
 $FC70 LD B,$04      ; #REGb=#N$04.
*$FC72 SLA (HL)      ; Shift *#REGhl left (with carry).
 $FC74 JP NC,$FC7D   ; Jump to #R$FC7D if #REGe is higher.
 $FC77 INC H         ; Increment #REGh by one.
 $FC78 DJNZ $FC72    ; Decrease counter by one and loop back to #R$FC72 until
                     ; counter is zero.
 $FC7A JP $FCA4      ; Jump to #R$FCA4.
*$FC7D LD A,($D85E)  ; #REGa=*#R$D85E.
 $FC80 DEC A         ; Decrease #REGa by one.
 $FC81 JP Z,$FC9B    ; Jump to #R$FC9B if #REGa is zero.
 $FC84 LD ($D85E),A  ; Write #REGa to *#R$D85E.
 $FC87 CP $03        ; Compare #REGa with #N$03.
 $FC89 JP P,$FC94    ; Jump to #R$FC94 P.
 $FC8C LD A,($D83A)  ; #REGa=*#R$D83A.
 $FC8F SET 5,A       ; Set bit 5 of #REGa.
 $FC91 LD ($D83A),A  ; Write #REGa to *#R$D83A.
*$FC94 DEC HL        ; Decrease #REGhl by one.
 $FC95 LD ($D85B),HL ; Write #REGhl to *#R$D85B.
 $FC98 JP $FC72      ; Jump to #R$FC72.
*$FC9B LD HL,$D83A   ; #REGhl=#R$D83A.
 $FC9E SET 4,(HL)    ; Set bit 4 of *#REGhl.
 $FCA0 RES 0,(HL)    ; Reset bit 0 of *#REGhl.
 $FCA2 RES 5,(HL)    ; Reset bit 5 of *#REGhl.
*$FCA4 LD HL,$D83A   ; #REGhl=#R$D83A.
 $FCA7 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $FCA9 RET NZ        ; Return if #REGhl is not zero.
 $FCAA POP IX        ; Restore #REGix from the stack.
 $FCAC POP HL        ; {Restore #REGhl, #REGde, #REGbc and #REGaf from the
 $FCAD POP DE        ; stack.
 $FCAE POP BC        ;
 $FCAF POP AF        ; }
 $FCB0 EI            ; Enable interrupts.
 $FCB1 RETI          ; Return from the interrupt routine.
 $FCB3 NOP           ;
 $FCB4 NOP           ;
 $FCB5 NOP           ;
 $FCB6 NOP           ;
 $FCB7 NOP           ;
 $FCB8 NOP           ;
 $FCB9 NOP           ;
 $FCBA NOP           ;
 $FCBB NOP           ;
 $FCBC NOP           ;
 $FCBD NOP           ;
 $FCBE NOP           ;
 $FCBF NOP           ;
 $FCC0 NOP           ;
 $FCC1 NOP           ;
 $FCC2 NOP           ;
 $FCC3 NOP           ;
 $FCC4 NOP           ;
 $FCC5 NOP           ;
 $FCC6 NOP           ;
 $FCC7 NOP           ;
 $FCC8 NOP           ;
 $FCC9 NOP           ;
 $FCCA NOP           ;
 $FCCB NOP           ;
 $FCCC NOP           ;
 $FCCD NOP           ;
 $FCCE NOP           ;
 $FCCF NOP           ;
 $FCD0 NOP           ;
 $FCD1 NOP           ;
 $FCD2 NOP           ;
 $FCD3 NOP           ;
 $FCD4 NOP           ;
 $FCD5 NOP           ;
 $FCD6 NOP           ;
 $FCD7 NOP           ;
 $FCD8 NOP           ;
 $FCD9 NOP           ;
 $FCDA NOP           ;
 $FCDB NOP           ;
 $FCDC NOP           ;
 $FCDD NOP           ;
 $FCDE NOP           ;
 $FCDF NOP           ;
 $FCE0 NOP           ;
 $FCE1 NOP           ;
 $FCE2 NOP           ;
 $FCE3 NOP           ;
 $FCE4 NOP           ;
 $FCE5 NOP           ;
 $FCE6 NOP           ;
 $FCE7 NOP           ;
 $FCE8 NOP           ;
 $FCE9 NOP           ;
 $FCEA NOP           ;
 $FCEB NOP           ;
 $FCEC NOP           ;
 $FCED NOP           ;
 $FCEE NOP           ;
 $FCEF NOP           ;
 $FCF0 NOP           ;
 $FCF1 NOP           ;
 $FCF2 NOP           ;
 $FCF3 NOP           ;
 $FCF4 NOP           ;
 $FCF5 NOP           ;
 $FCF6 NOP           ;
 $FCF7 NOP           ;
 $FCF8 NOP           ;
 $FCF9 NOP           ;
 $FCFA NOP           ;
 $FCFB NOP           ;
 $FCFC NOP           ;
 $FCFD NOP           ;
 $FCFE NOP           ;
 $FCFF NOP           ;
 $FD00 NOP           ;
 $FD01 NOP           ;
 $FD02 NOP           ;
 $FD03 NOP           ;
 $FD04 NOP           ;
 $FD05 NOP           ;
 $FD06 NOP           ;
 $FD07 NOP           ;
 $FD08 NOP           ;
 $FD09 NOP           ;
 $FD0A NOP           ;
 $FD0B NOP           ;
 $FD0C NOP           ;
 $FD0D NOP           ;
 $FD0E NOP           ;
 $FD0F NOP           ;
 $FD10 NOP           ;
 $FD11 NOP           ;
 $FD12 NOP           ;
 $FD13 NOP           ;
 $FD14 NOP           ;
 $FD15 NOP           ;
 $FD16 NOP           ;
 $FD17 NOP           ;
 $FD18 NOP           ;
 $FD19 NOP           ;
 $FD1A NOP           ;
 $FD1B NOP           ;
 $FD1C NOP           ;
 $FD1D NOP           ;
 $FD1E NOP           ;
 $FD1F NOP           ;
 $FD20 NOP           ;
 $FD21 NOP           ;
 $FD22 NOP           ;
 $FD23 NOP           ;
 $FD24 NOP           ;
 $FD25 NOP           ;
 $FD26 NOP           ;
 $FD27 NOP           ;
 $FD28 NOP           ;
 $FD29 NOP           ;
 $FD2A NOP           ;
 $FD2B NOP           ;
 $FD2C NOP           ;
 $FD2D NOP           ;
 $FD2E NOP           ;
 $FD2F NOP           ;
 $FD30 NOP           ;
 $FD31 NOP           ;
 $FD32 NOP           ;
 $FD33 NOP           ;
 $FD34 NOP           ;
 $FD35 NOP           ;
 $FD36 NOP           ;
 $FD37 NOP           ;
 $FD38 NOP           ;
 $FD39 NOP           ;
 $FD3A NOP           ;
 $FD3B NOP           ;
 $FD3C NOP           ;
 $FD3D NOP           ;
 $FD3E NOP           ;
 $FD3F NOP           ;
 $FD40 NOP           ;
 $FD41 NOP           ;
 $FD42 NOP           ;
 $FD43 NOP           ;
 $FD44 NOP           ;
 $FD45 NOP           ;
 $FD46 NOP           ;
 $FD47 NOP           ;
 $FD48 NOP           ;
 $FD49 NOP           ;
 $FD4A NOP           ;
 $FD4B NOP           ;
 $FD4C NOP           ;
 $FD4D NOP           ;
 $FD4E NOP           ;
 $FD4F NOP           ;
 $FD50 NOP           ;
 $FD51 NOP           ;
 $FD52 NOP           ;
 $FD53 NOP           ;
 $FD54 NOP           ;
 $FD55 NOP           ;
 $FD56 NOP           ;
 $FD57 NOP           ;
 $FD58 NOP           ;
 $FD59 NOP           ;
 $FD5A NOP           ;
 $FD5B NOP           ;
 $FD5C NOP           ;
 $FD5D NOP           ;
 $FD5E NOP           ;
 $FD5F NOP           ;
 $FD60 NOP           ;
 $FD61 NOP           ;
 $FD62 NOP           ;
 $FD63 NOP           ;
 $FD64 NOP           ;
 $FD65 NOP           ;
 $FD66 NOP           ;
 $FD67 NOP           ;
 $FD68 NOP           ;
 $FD69 NOP           ;
 $FD6A NOP           ;
 $FD6B NOP           ;
 $FD6C NOP           ;
 $FD6D NOP           ;
 $FD6E NOP           ;
 $FD6F NOP           ;
 $FD70 NOP           ;
 $FD71 NOP           ;
 $FD72 NOP           ;
 $FD73 NOP           ;
 $FD74 NOP           ;
 $FD75 NOP           ;
 $FD76 NOP           ;
 $FD77 NOP           ;
 $FD78 NOP           ;
 $FD79 NOP           ;
 $FD7A NOP           ;
 $FD7B NOP           ;
 $FD7C NOP           ;
 $FD7D NOP           ;
 $FD7E NOP           ;
 $FD7F NOP           ;
 $FD80 NOP           ;
 $FD81 NOP           ;
 $FD82 NOP           ;
 $FD83 NOP           ;
 $FD84 NOP           ;
 $FD85 NOP           ;
 $FD86 NOP           ;
 $FD87 NOP           ;
 $FD88 NOP           ;
 $FD89 NOP           ;
 $FD8A NOP           ;
 $FD8B NOP           ;
 $FD8C NOP           ;
 $FD8D NOP           ;
 $FD8E NOP           ;
 $FD8F NOP           ;
 $FD90 NOP           ;
 $FD91 NOP           ;
 $FD92 NOP           ;
 $FD93 NOP           ;
 $FD94 NOP           ;
 $FD95 NOP           ;
 $FD96 NOP           ;
 $FD97 NOP           ;
 $FD98 NOP           ;
 $FD99 NOP           ;
 $FD9A NOP           ;
 $FD9B NOP           ;
 $FD9C NOP           ;
 $FD9D NOP           ;
 $FD9E NOP           ;
 $FD9F NOP           ;
 $FDA0 NOP           ;
 $FDA1 NOP           ;
 $FDA2 NOP           ;
 $FDA3 NOP           ;
 $FDA4 NOP           ;
 $FDA5 NOP           ;
 $FDA6 NOP           ;
 $FDA7 NOP           ;
 $FDA8 NOP           ;
 $FDA9 NOP           ;
 $FDAA NOP           ;
 $FDAB NOP           ;
 $FDAC NOP           ;
 $FDAD NOP           ;
 $FDAE NOP           ;
 $FDAF NOP           ;
 $FDB0 NOP           ;
 $FDB1 NOP           ;
 $FDB2 NOP           ;
 $FDB3 NOP           ;
 $FDB4 NOP           ;
 $FDB5 NOP           ;
 $FDB6 NOP           ;
 $FDB7 NOP           ;
 $FDB8 NOP           ;
 $FDB9 NOP           ;
 $FDBA NOP           ;
 $FDBB NOP           ;
 $FDBC NOP           ;
 $FDBD NOP           ;
 $FDBE NOP           ;
 $FDBF NOP           ;
 $FDC0 NOP           ;
 $FDC1 NOP           ;
 $FDC2 NOP           ;
 $FDC3 NOP           ;
 $FDC4 NOP           ;
 $FDC5 NOP           ;
 $FDC6 NOP           ;
 $FDC7 NOP           ;
 $FDC8 NOP           ;
 $FDC9 NOP           ;
 $FDCA NOP           ;
 $FDCB NOP           ;
 $FDCC NOP           ;
 $FDCD NOP           ;
 $FDCE NOP           ;
 $FDCF NOP           ;
 $FDD0 NOP           ;
 $FDD1 NOP           ;
 $FDD2 NOP           ;
 $FDD3 NOP           ;
 $FDD4 NOP           ;
 $FDD5 NOP           ;
 $FDD6 NOP           ;
 $FDD7 NOP           ;
 $FDD8 NOP           ;
 $FDD9 NOP           ;
 $FDDA NOP           ;
 $FDDB NOP           ;
 $FDDC NOP           ;
 $FDDD NOP           ;
 $FDDE NOP           ;
 $FDDF NOP           ;
 $FDE0 NOP           ;
 $FDE1 NOP           ;
 $FDE2 NOP           ;
 $FDE3 NOP           ;
 $FDE4 NOP           ;
 $FDE5 NOP           ;
 $FDE6 NOP           ;
 $FDE7 NOP           ;
 $FDE8 NOP           ;
 $FDE9 NOP           ;
 $FDEA NOP           ;
 $FDEB NOP           ;
 $FDEC NOP           ;
 $FDED NOP           ;
 $FDEE NOP           ;
 $FDEF NOP           ;
 $FDF0 NOP           ;
 $FDF1 NOP           ;
 $FDF2 NOP           ;
 $FDF3 NOP           ;
 $FDF4 NOP           ;
 $FDF5 NOP           ;
 $FDF6 NOP           ;
 $FDF7 NOP           ;
 $FDF8 NOP           ;
 $FDF9 NOP           ;
 $FDFA NOP           ;
 $FDFB NOP           ;
 $FDFC NOP           ;

; Routine at FDFD
c$FDFD JP $F85D      ; Jump to #R$F85D.

; Data block at FE00
b$FE00 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE08 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE10 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE18 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE20 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE28 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE30 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE38 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE40 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE48 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE50 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE58 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE60 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE68 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE70 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE78 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE80 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE88 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE90 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE98 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEA0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEA8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEB0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEB8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEC0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEC8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FED0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FED8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEE0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEE8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEF0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEF8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FF00 DEFB $FD,$00,$00,$00,$00,$00,$00,$00
 $FF08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF18 DEFB $F3,$0D,$CE,$0B,$E3,$50,$CE,$0B
 $FF20 DEFB $E4,$50,$1D,$17,$DC,$0A,$CE,$0B
 $FF28 DEFB $E7,$50,$1A,$17,$DC,$0A,$D7,$18
 $FF30 DEFB $38,$00,$CE,$0B,$6D,$40,$CE,$0B
 $FF38 DEFB $B7,$2D,$62,$5E,$5D,$5E,$E6,$A0
 $FF40 DEFB $2B,$2D,$65,$33,$C8,$DF,$ED,$10
 $FF48 DEFB $0D,$00,$09,$00,$85,$1C,$10,$1C
 $FF50 DEFB $52,$1B,$76,$1B,$03,$13,$00,$3E
 $FF58 DEFB $00,$3C,$42,$42,$7E,$42,$42,$00
 $FF60 DEFB $00,$7C,$42,$7C,$42,$42,$7C,$00
 $FF68 DEFB $00,$3C,$42,$40,$40,$42,$3C,$00
 $FF70 DEFB $00,$78,$44,$42,$42,$44,$78,$00
 $FF78 DEFB $00,$7E,$40,$7C,$40,$40,$7E,$00
 $FF80 DEFB $00,$7E,$40,$7C,$40,$40,$40,$00
 $FF88 DEFB $00,$3C,$42,$40,$4E,$42,$3C,$00
 $FF90 DEFB $00,$42,$42,$7E,$42,$42,$42,$00
 $FF98 DEFB $00,$3E,$08,$08,$08,$08,$3E,$00
 $FFA0 DEFB $00,$02,$02,$02,$42,$42,$3C,$00
 $FFA8 DEFB $00,$44,$48,$70,$48,$44,$42,$00
 $FFB0 DEFB $00,$40,$40,$40,$40,$40,$7E,$00
 $FFB8 DEFB $00,$42,$66,$5A,$42,$42,$42,$00
 $FFC0 DEFB $00,$42,$62,$52,$4A,$46,$42,$00
 $FFC8 DEFB $00,$3C,$42,$42,$42,$42,$3C,$00
 $FFD0 DEFB $00,$7C,$42,$42,$7C,$40,$40,$00
 $FFD8 DEFB $00,$3C,$42,$42,$52,$4A,$3C,$00
 $FFE0 DEFB $00,$7C,$42,$42,$7C,$44,$42,$00
 $FFE8 DEFB $00,$3C,$40,$3C,$02,$42,$3C,$00
 $FFF0 DEFB $00,$FE,$10,$10,$10,$10,$10,$00
 $FFF8 DEFB $00,$42,$42,$42,$42,$42,$3C,$00
